{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13d6719d-73ac-48c8-a37f-d3a5338d7706",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: mysql-connector-python in c:\\users\\hello\\anaconda3\\lib\\site-packages (9.3.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install mysql-connector-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a7707b5b-081a-4458-a3b5-88effede721a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sqlalchemy in c:\\users\\hello\\anaconda3\\lib\\site-packages (2.0.34)\n",
      "Requirement already satisfied: pymysql in c:\\users\\hello\\anaconda3\\lib\\site-packages (1.1.1)\n",
      "Requirement already satisfied: typing-extensions>=4.6.0 in c:\\users\\hello\\anaconda3\\lib\\site-packages (from sqlalchemy) (4.11.0)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in c:\\users\\hello\\anaconda3\\lib\\site-packages (from sqlalchemy) (3.0.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install sqlalchemy pymysql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9d29af78-f9c7-4bb5-a0dc-b7d7ea357d24",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "user = 'root'             \n",
    "password = '123456789'  \n",
    "host = 'localhost'        \n",
    "database = \"credit_card_fraud_detection\"\n",
    "engine = create_engine(f'mysql+pymysql://{user}:{password}@{host}/{database}')\n",
    "query =   \" SELECT * FROM credit_card_fraud_detection.tratransaction\"\n",
    "df = pd.read_sql(query, engine)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4147bc64-a556-454f-8ef7-a28627b5f9de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Sno trans_date_trans_time        cc_num  \\\n",
      "0        0      21-06-2020 12:14  2.290000e+15   \n",
      "1        1      21-06-2020 12:14  3.570000e+15   \n",
      "2        2      21-06-2020 12:14  3.600000e+15   \n",
      "3        3      21-06-2020 12:15  3.590000e+15   \n",
      "4        4      21-06-2020 12:15  3.530000e+15   \n",
      "...    ...                   ...           ...   \n",
      "8995  8995      23-06-2020 18:49  3.580000e+15   \n",
      "8996  8996      23-06-2020 18:50  3.510000e+15   \n",
      "8997  8997      23-06-2020 18:50  4.190000e+12   \n",
      "8998  8998      23-06-2020 18:50  4.180000e+18   \n",
      "8999  8999      23-06-2020 18:50  3.880000e+13   \n",
      "\n",
      "                                  merchant        category     amt    first  \\\n",
      "0                    fraud_Kirlin and Sons   personal_care    2.86     Jeff   \n",
      "1                     fraud_Sporer-Keebler   personal_care   29.84   Joanne   \n",
      "2     fraud_Swaniawski, Nitzsche and Welch  health_fitness   41.28   Ashley   \n",
      "3                        fraud_Haley Group        misc_pos   60.05    Brian   \n",
      "4                    fraud_Johnston-Casper          travel    3.19   Nathan   \n",
      "...                                    ...             ...     ...      ...   \n",
      "8995                    fraud_Kihn-Fritsch     food_dining   23.73  Lindsay   \n",
      "8996                    fraud_Leannon-Ward     food_dining   23.62    James   \n",
      "8997                    fraud_Schiller Ltd   personal_care   23.19    Casey   \n",
      "8998                     fraud_Bode-Rempel       kids_pets  148.87  Jessica   \n",
      "8999                    fraud_Waelchi-Wolf       kids_pets   47.34   Andrew   \n",
      "\n",
      "          last gender                          street  ...      lat      long  \\\n",
      "0      Elliott      M               351 Darlene Green  ...  33.9659  -80.9355   \n",
      "1     Williams      F                3638 Marsh Union  ...  40.3207 -110.4360   \n",
      "2        Lopez      F            9333 Valentine Point  ...  40.6729  -73.5365   \n",
      "3     Williams      M     32941 Krystal Mill Apt. 552  ...  28.5697  -80.8191   \n",
      "4       Massey      M        5783 Evan Roads Apt. 465  ...  44.2529  -85.0170   \n",
      "...        ...    ...                             ...  ...      ...       ...   \n",
      "8995    Wilson      F           7618 Gonzales Mission  ...  38.7897  -93.8702   \n",
      "8996    Cooper      M      663 Ramirez Trace Apt. 951  ...  34.7789  -86.5438   \n",
      "8997    Howell      F  374 Christopher Ramp Suite 855  ...  33.3645  -81.2718   \n",
      "8998    Potter      F   7600 Stephen Course Suite 031  ...  36.6659 -105.4694   \n",
      "8999    Tucker      M                  583 Gray Creek  ...  42.4069  -74.1528   \n",
      "\n",
      "      city_pop                              job         dob  \\\n",
      "0       333497              Mechanical engineer  19-03-1968   \n",
      "1          302           Sales professional, IT  17-01-1990   \n",
      "2        34496                Librarian, public  21-10-1970   \n",
      "3        54767                     Set designer  25-07-1987   \n",
      "4         1126               Furniture designer  06-07-1955   \n",
      "...        ...                              ...         ...   \n",
      "8995      2368             Electronics engineer  17-07-1989   \n",
      "8996    190178  Television production assistant  01-04-1973   \n",
      "8997      4913                 Technical brewer  10-11-1966   \n",
      "8998       606         Surveyor, land/geomatics  06-09-1988   \n",
      "8999       277            Glass blower/designer  12-12-1971   \n",
      "\n",
      "                             trans_num   unix_time  merch_lat  merch_long  \\\n",
      "0     2da90c7d74bd46a0caf3777415b3ebd3  1371816865  33.986391  -81.200714   \n",
      "1     324cc204407e99f51b0d6ca0055005e7  1371816873  39.450498 -109.960431   \n",
      "2     c81755dbbbea9d5c77f094348a7579be  1371816893  40.495810  -74.196111   \n",
      "3     2159175b9efe66dc301f149d3d5abf8c  1371816915  28.812398  -80.883061   \n",
      "4     57ff021bd3f328f8738bb535c302a31b  1371816917  44.959148  -85.884734   \n",
      "...                                ...         ...        ...         ...   \n",
      "8995  b11734eea5283ff611394a923f4787b5  1372013383  37.901996  -94.134388   \n",
      "8996  65592cbbac453fd21cba803d1b1a66ec  1372013402  34.048517  -85.925251   \n",
      "8997  46359adedf5fd1e5051b1f0f2810cfdb  1372013416  33.932220  -82.157360   \n",
      "8998  4951124f49b70edf05ae71c18596387f  1372013416  37.148262 -104.757229   \n",
      "8999  7de8d41962173f92cacb7daba4972b60  1372013423  41.826931  -75.031613   \n",
      "\n",
      "      is_fraud  \n",
      "0            0  \n",
      "1            0  \n",
      "2            0  \n",
      "3            0  \n",
      "4            0  \n",
      "...        ...  \n",
      "8995         0  \n",
      "8996         0  \n",
      "8997         0  \n",
      "8998         0  \n",
      "8999         0  \n",
      "\n",
      "[9000 rows x 23 columns]\n"
     ]
    }
   ],
   "source": [
    "# to check complete dataset\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e5395f06-95db-47a0-aeae-bf87258bda63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sno</th>\n",
       "      <th>trans_date_trans_time</th>\n",
       "      <th>cc_num</th>\n",
       "      <th>merchant</th>\n",
       "      <th>category</th>\n",
       "      <th>amt</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "      <th>gender</th>\n",
       "      <th>street</th>\n",
       "      <th>...</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city_pop</th>\n",
       "      <th>job</th>\n",
       "      <th>dob</th>\n",
       "      <th>trans_num</th>\n",
       "      <th>unix_time</th>\n",
       "      <th>merch_lat</th>\n",
       "      <th>merch_long</th>\n",
       "      <th>is_fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>21-06-2020 12:14</td>\n",
       "      <td>2.290000e+15</td>\n",
       "      <td>fraud_Kirlin and Sons</td>\n",
       "      <td>personal_care</td>\n",
       "      <td>2.86</td>\n",
       "      <td>Jeff</td>\n",
       "      <td>Elliott</td>\n",
       "      <td>M</td>\n",
       "      <td>351 Darlene Green</td>\n",
       "      <td>...</td>\n",
       "      <td>33.9659</td>\n",
       "      <td>-80.9355</td>\n",
       "      <td>333497</td>\n",
       "      <td>Mechanical engineer</td>\n",
       "      <td>19-03-1968</td>\n",
       "      <td>2da90c7d74bd46a0caf3777415b3ebd3</td>\n",
       "      <td>1371816865</td>\n",
       "      <td>33.986391</td>\n",
       "      <td>-81.200714</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>21-06-2020 12:14</td>\n",
       "      <td>3.570000e+15</td>\n",
       "      <td>fraud_Sporer-Keebler</td>\n",
       "      <td>personal_care</td>\n",
       "      <td>29.84</td>\n",
       "      <td>Joanne</td>\n",
       "      <td>Williams</td>\n",
       "      <td>F</td>\n",
       "      <td>3638 Marsh Union</td>\n",
       "      <td>...</td>\n",
       "      <td>40.3207</td>\n",
       "      <td>-110.4360</td>\n",
       "      <td>302</td>\n",
       "      <td>Sales professional, IT</td>\n",
       "      <td>17-01-1990</td>\n",
       "      <td>324cc204407e99f51b0d6ca0055005e7</td>\n",
       "      <td>1371816873</td>\n",
       "      <td>39.450498</td>\n",
       "      <td>-109.960431</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>21-06-2020 12:14</td>\n",
       "      <td>3.600000e+15</td>\n",
       "      <td>fraud_Swaniawski, Nitzsche and Welch</td>\n",
       "      <td>health_fitness</td>\n",
       "      <td>41.28</td>\n",
       "      <td>Ashley</td>\n",
       "      <td>Lopez</td>\n",
       "      <td>F</td>\n",
       "      <td>9333 Valentine Point</td>\n",
       "      <td>...</td>\n",
       "      <td>40.6729</td>\n",
       "      <td>-73.5365</td>\n",
       "      <td>34496</td>\n",
       "      <td>Librarian, public</td>\n",
       "      <td>21-10-1970</td>\n",
       "      <td>c81755dbbbea9d5c77f094348a7579be</td>\n",
       "      <td>1371816893</td>\n",
       "      <td>40.495810</td>\n",
       "      <td>-74.196111</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>21-06-2020 12:15</td>\n",
       "      <td>3.590000e+15</td>\n",
       "      <td>fraud_Haley Group</td>\n",
       "      <td>misc_pos</td>\n",
       "      <td>60.05</td>\n",
       "      <td>Brian</td>\n",
       "      <td>Williams</td>\n",
       "      <td>M</td>\n",
       "      <td>32941 Krystal Mill Apt. 552</td>\n",
       "      <td>...</td>\n",
       "      <td>28.5697</td>\n",
       "      <td>-80.8191</td>\n",
       "      <td>54767</td>\n",
       "      <td>Set designer</td>\n",
       "      <td>25-07-1987</td>\n",
       "      <td>2159175b9efe66dc301f149d3d5abf8c</td>\n",
       "      <td>1371816915</td>\n",
       "      <td>28.812398</td>\n",
       "      <td>-80.883061</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>21-06-2020 12:15</td>\n",
       "      <td>3.530000e+15</td>\n",
       "      <td>fraud_Johnston-Casper</td>\n",
       "      <td>travel</td>\n",
       "      <td>3.19</td>\n",
       "      <td>Nathan</td>\n",
       "      <td>Massey</td>\n",
       "      <td>M</td>\n",
       "      <td>5783 Evan Roads Apt. 465</td>\n",
       "      <td>...</td>\n",
       "      <td>44.2529</td>\n",
       "      <td>-85.0170</td>\n",
       "      <td>1126</td>\n",
       "      <td>Furniture designer</td>\n",
       "      <td>06-07-1955</td>\n",
       "      <td>57ff021bd3f328f8738bb535c302a31b</td>\n",
       "      <td>1371816917</td>\n",
       "      <td>44.959148</td>\n",
       "      <td>-85.884734</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sno trans_date_trans_time        cc_num  \\\n",
       "0    0      21-06-2020 12:14  2.290000e+15   \n",
       "1    1      21-06-2020 12:14  3.570000e+15   \n",
       "2    2      21-06-2020 12:14  3.600000e+15   \n",
       "3    3      21-06-2020 12:15  3.590000e+15   \n",
       "4    4      21-06-2020 12:15  3.530000e+15   \n",
       "\n",
       "                               merchant        category    amt   first  \\\n",
       "0                 fraud_Kirlin and Sons   personal_care   2.86    Jeff   \n",
       "1                  fraud_Sporer-Keebler   personal_care  29.84  Joanne   \n",
       "2  fraud_Swaniawski, Nitzsche and Welch  health_fitness  41.28  Ashley   \n",
       "3                     fraud_Haley Group        misc_pos  60.05   Brian   \n",
       "4                 fraud_Johnston-Casper          travel   3.19  Nathan   \n",
       "\n",
       "       last gender                       street  ...      lat      long  \\\n",
       "0   Elliott      M            351 Darlene Green  ...  33.9659  -80.9355   \n",
       "1  Williams      F             3638 Marsh Union  ...  40.3207 -110.4360   \n",
       "2     Lopez      F         9333 Valentine Point  ...  40.6729  -73.5365   \n",
       "3  Williams      M  32941 Krystal Mill Apt. 552  ...  28.5697  -80.8191   \n",
       "4    Massey      M     5783 Evan Roads Apt. 465  ...  44.2529  -85.0170   \n",
       "\n",
       "   city_pop                     job         dob  \\\n",
       "0    333497     Mechanical engineer  19-03-1968   \n",
       "1       302  Sales professional, IT  17-01-1990   \n",
       "2     34496       Librarian, public  21-10-1970   \n",
       "3     54767            Set designer  25-07-1987   \n",
       "4      1126      Furniture designer  06-07-1955   \n",
       "\n",
       "                          trans_num   unix_time  merch_lat  merch_long  \\\n",
       "0  2da90c7d74bd46a0caf3777415b3ebd3  1371816865  33.986391  -81.200714   \n",
       "1  324cc204407e99f51b0d6ca0055005e7  1371816873  39.450498 -109.960431   \n",
       "2  c81755dbbbea9d5c77f094348a7579be  1371816893  40.495810  -74.196111   \n",
       "3  2159175b9efe66dc301f149d3d5abf8c  1371816915  28.812398  -80.883061   \n",
       "4  57ff021bd3f328f8738bb535c302a31b  1371816917  44.959148  -85.884734   \n",
       "\n",
       "   is_fraud  \n",
       "0         0  \n",
       "1         0  \n",
       "2         0  \n",
       "3         0  \n",
       "4         0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO CHECK SOME ROWS\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59855c2a-c29e-4dcb-9c74-e6d8e5eeecfb",
   "metadata": {},
   "source": [
    "OBSERVATION: \n",
    "\"The dataset contains structured transaction records with 22 columns.Each row represent a\n",
    " single transaction, including details such as date/time, merchant, amount, location,\n",
    " and demographic info\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8dab4c79-1ebc-496d-b25e-2eb057003d43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sno</th>\n",
       "      <th>trans_date_trans_time</th>\n",
       "      <th>cc_num</th>\n",
       "      <th>merchant</th>\n",
       "      <th>category</th>\n",
       "      <th>amt</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "      <th>gender</th>\n",
       "      <th>street</th>\n",
       "      <th>...</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city_pop</th>\n",
       "      <th>job</th>\n",
       "      <th>dob</th>\n",
       "      <th>trans_num</th>\n",
       "      <th>unix_time</th>\n",
       "      <th>merch_lat</th>\n",
       "      <th>merch_long</th>\n",
       "      <th>is_fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8995</th>\n",
       "      <td>8995</td>\n",
       "      <td>23-06-2020 18:49</td>\n",
       "      <td>3.580000e+15</td>\n",
       "      <td>fraud_Kihn-Fritsch</td>\n",
       "      <td>food_dining</td>\n",
       "      <td>23.73</td>\n",
       "      <td>Lindsay</td>\n",
       "      <td>Wilson</td>\n",
       "      <td>F</td>\n",
       "      <td>7618 Gonzales Mission</td>\n",
       "      <td>...</td>\n",
       "      <td>38.7897</td>\n",
       "      <td>-93.8702</td>\n",
       "      <td>2368</td>\n",
       "      <td>Electronics engineer</td>\n",
       "      <td>17-07-1989</td>\n",
       "      <td>b11734eea5283ff611394a923f4787b5</td>\n",
       "      <td>1372013383</td>\n",
       "      <td>37.901996</td>\n",
       "      <td>-94.134388</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8996</th>\n",
       "      <td>8996</td>\n",
       "      <td>23-06-2020 18:50</td>\n",
       "      <td>3.510000e+15</td>\n",
       "      <td>fraud_Leannon-Ward</td>\n",
       "      <td>food_dining</td>\n",
       "      <td>23.62</td>\n",
       "      <td>James</td>\n",
       "      <td>Cooper</td>\n",
       "      <td>M</td>\n",
       "      <td>663 Ramirez Trace Apt. 951</td>\n",
       "      <td>...</td>\n",
       "      <td>34.7789</td>\n",
       "      <td>-86.5438</td>\n",
       "      <td>190178</td>\n",
       "      <td>Television production assistant</td>\n",
       "      <td>01-04-1973</td>\n",
       "      <td>65592cbbac453fd21cba803d1b1a66ec</td>\n",
       "      <td>1372013402</td>\n",
       "      <td>34.048517</td>\n",
       "      <td>-85.925251</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8997</th>\n",
       "      <td>8997</td>\n",
       "      <td>23-06-2020 18:50</td>\n",
       "      <td>4.190000e+12</td>\n",
       "      <td>fraud_Schiller Ltd</td>\n",
       "      <td>personal_care</td>\n",
       "      <td>23.19</td>\n",
       "      <td>Casey</td>\n",
       "      <td>Howell</td>\n",
       "      <td>F</td>\n",
       "      <td>374 Christopher Ramp Suite 855</td>\n",
       "      <td>...</td>\n",
       "      <td>33.3645</td>\n",
       "      <td>-81.2718</td>\n",
       "      <td>4913</td>\n",
       "      <td>Technical brewer</td>\n",
       "      <td>10-11-1966</td>\n",
       "      <td>46359adedf5fd1e5051b1f0f2810cfdb</td>\n",
       "      <td>1372013416</td>\n",
       "      <td>33.932220</td>\n",
       "      <td>-82.157360</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8998</th>\n",
       "      <td>8998</td>\n",
       "      <td>23-06-2020 18:50</td>\n",
       "      <td>4.180000e+18</td>\n",
       "      <td>fraud_Bode-Rempel</td>\n",
       "      <td>kids_pets</td>\n",
       "      <td>148.87</td>\n",
       "      <td>Jessica</td>\n",
       "      <td>Potter</td>\n",
       "      <td>F</td>\n",
       "      <td>7600 Stephen Course Suite 031</td>\n",
       "      <td>...</td>\n",
       "      <td>36.6659</td>\n",
       "      <td>-105.4694</td>\n",
       "      <td>606</td>\n",
       "      <td>Surveyor, land/geomatics</td>\n",
       "      <td>06-09-1988</td>\n",
       "      <td>4951124f49b70edf05ae71c18596387f</td>\n",
       "      <td>1372013416</td>\n",
       "      <td>37.148262</td>\n",
       "      <td>-104.757229</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8999</th>\n",
       "      <td>8999</td>\n",
       "      <td>23-06-2020 18:50</td>\n",
       "      <td>3.880000e+13</td>\n",
       "      <td>fraud_Waelchi-Wolf</td>\n",
       "      <td>kids_pets</td>\n",
       "      <td>47.34</td>\n",
       "      <td>Andrew</td>\n",
       "      <td>Tucker</td>\n",
       "      <td>M</td>\n",
       "      <td>583 Gray Creek</td>\n",
       "      <td>...</td>\n",
       "      <td>42.4069</td>\n",
       "      <td>-74.1528</td>\n",
       "      <td>277</td>\n",
       "      <td>Glass blower/designer</td>\n",
       "      <td>12-12-1971</td>\n",
       "      <td>7de8d41962173f92cacb7daba4972b60</td>\n",
       "      <td>1372013423</td>\n",
       "      <td>41.826931</td>\n",
       "      <td>-75.031613</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Sno trans_date_trans_time        cc_num            merchant  \\\n",
       "8995  8995      23-06-2020 18:49  3.580000e+15  fraud_Kihn-Fritsch   \n",
       "8996  8996      23-06-2020 18:50  3.510000e+15  fraud_Leannon-Ward   \n",
       "8997  8997      23-06-2020 18:50  4.190000e+12  fraud_Schiller Ltd   \n",
       "8998  8998      23-06-2020 18:50  4.180000e+18   fraud_Bode-Rempel   \n",
       "8999  8999      23-06-2020 18:50  3.880000e+13  fraud_Waelchi-Wolf   \n",
       "\n",
       "           category     amt    first    last gender  \\\n",
       "8995    food_dining   23.73  Lindsay  Wilson      F   \n",
       "8996    food_dining   23.62    James  Cooper      M   \n",
       "8997  personal_care   23.19    Casey  Howell      F   \n",
       "8998      kids_pets  148.87  Jessica  Potter      F   \n",
       "8999      kids_pets   47.34   Andrew  Tucker      M   \n",
       "\n",
       "                              street  ...      lat      long  city_pop  \\\n",
       "8995           7618 Gonzales Mission  ...  38.7897  -93.8702      2368   \n",
       "8996      663 Ramirez Trace Apt. 951  ...  34.7789  -86.5438    190178   \n",
       "8997  374 Christopher Ramp Suite 855  ...  33.3645  -81.2718      4913   \n",
       "8998   7600 Stephen Course Suite 031  ...  36.6659 -105.4694       606   \n",
       "8999                  583 Gray Creek  ...  42.4069  -74.1528       277   \n",
       "\n",
       "                                  job         dob  \\\n",
       "8995             Electronics engineer  17-07-1989   \n",
       "8996  Television production assistant  01-04-1973   \n",
       "8997                 Technical brewer  10-11-1966   \n",
       "8998         Surveyor, land/geomatics  06-09-1988   \n",
       "8999            Glass blower/designer  12-12-1971   \n",
       "\n",
       "                             trans_num   unix_time  merch_lat  merch_long  \\\n",
       "8995  b11734eea5283ff611394a923f4787b5  1372013383  37.901996  -94.134388   \n",
       "8996  65592cbbac453fd21cba803d1b1a66ec  1372013402  34.048517  -85.925251   \n",
       "8997  46359adedf5fd1e5051b1f0f2810cfdb  1372013416  33.932220  -82.157360   \n",
       "8998  4951124f49b70edf05ae71c18596387f  1372013416  37.148262 -104.757229   \n",
       "8999  7de8d41962173f92cacb7daba4972b60  1372013423  41.826931  -75.031613   \n",
       "\n",
       "      is_fraud  \n",
       "8995         0  \n",
       "8996         0  \n",
       "8997         0  \n",
       "8998         0  \n",
       "8999         0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO CHECK BOTTOM ROWS\n",
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "870b4a79-bef0-45f2-b607-0580c35c2996",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "\"The last 5 rows of the dataset appear consistent with the rest of the data. All columns are present and                   correctly formatted. The timestamps suggest the dataset is sorted chronologically\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "34bcfe00-9714-4302-a005-89e26af1b5a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9000 entries, 0 to 8999\n",
      "Data columns (total 23 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   Sno                    9000 non-null   int64  \n",
      " 1   trans_date_trans_time  9000 non-null   object \n",
      " 2   cc_num                 9000 non-null   float64\n",
      " 3   merchant               9000 non-null   object \n",
      " 4   category               9000 non-null   object \n",
      " 5   amt                    9000 non-null   float64\n",
      " 6   first                  9000 non-null   object \n",
      " 7   last                   9000 non-null   object \n",
      " 8   gender                 9000 non-null   object \n",
      " 9   street                 9000 non-null   object \n",
      " 10  city                   9000 non-null   object \n",
      " 11  state                  9000 non-null   object \n",
      " 12  zip                    9000 non-null   int64  \n",
      " 13  lat                    9000 non-null   float64\n",
      " 14  long                   9000 non-null   float64\n",
      " 15  city_pop               9000 non-null   int64  \n",
      " 16  job                    9000 non-null   object \n",
      " 17  dob                    9000 non-null   object \n",
      " 18  trans_num              9000 non-null   object \n",
      " 19  unix_time              9000 non-null   int64  \n",
      " 20  merch_lat              9000 non-null   float64\n",
      " 21  merch_long             9000 non-null   float64\n",
      " 22  is_fraud               9000 non-null   int64  \n",
      "dtypes: float64(6), int64(5), object(12)\n",
      "memory usage: 1.6+ MB\n"
     ]
    }
   ],
   "source": [
    "#TO SEE SUMMARY\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54a9bcc4-56d3-4527-9d24-cf0636235013",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The dataset contains 9000 entries and 22 columns. Most columns have complete data.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d5e9921f-4d7f-4e1b-a392-9be1e555351f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sno</th>\n",
       "      <th>cc_num</th>\n",
       "      <th>amt</th>\n",
       "      <th>zip</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city_pop</th>\n",
       "      <th>unix_time</th>\n",
       "      <th>merch_lat</th>\n",
       "      <th>merch_long</th>\n",
       "      <th>is_fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9000.000000</td>\n",
       "      <td>9.000000e+03</td>\n",
       "      <td>9000.000000</td>\n",
       "      <td>9000.000000</td>\n",
       "      <td>9000.000000</td>\n",
       "      <td>9000.000000</td>\n",
       "      <td>9.000000e+03</td>\n",
       "      <td>9.000000e+03</td>\n",
       "      <td>9000.000000</td>\n",
       "      <td>9000.000000</td>\n",
       "      <td>9000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4499.500000</td>\n",
       "      <td>4.075113e+17</td>\n",
       "      <td>67.615313</td>\n",
       "      <td>48451.812556</td>\n",
       "      <td>38.466155</td>\n",
       "      <td>-89.989711</td>\n",
       "      <td>9.599461e+04</td>\n",
       "      <td>1.371916e+09</td>\n",
       "      <td>38.451335</td>\n",
       "      <td>-89.989323</td>\n",
       "      <td>0.002444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2598.220545</td>\n",
       "      <td>1.297011e+18</td>\n",
       "      <td>123.069824</td>\n",
       "      <td>26761.477241</td>\n",
       "      <td>5.113646</td>\n",
       "      <td>13.620592</td>\n",
       "      <td>3.245845e+05</td>\n",
       "      <td>5.752840e+04</td>\n",
       "      <td>5.146519</td>\n",
       "      <td>13.635804</td>\n",
       "      <td>0.049384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.041621e+10</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1257.000000</td>\n",
       "      <td>20.027100</td>\n",
       "      <td>-165.672300</td>\n",
       "      <td>2.300000e+01</td>\n",
       "      <td>1.371817e+09</td>\n",
       "      <td>19.163455</td>\n",
       "      <td>-166.464422</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2249.750000</td>\n",
       "      <td>1.800000e+14</td>\n",
       "      <td>9.317500</td>\n",
       "      <td>26041.000000</td>\n",
       "      <td>34.509100</td>\n",
       "      <td>-96.618400</td>\n",
       "      <td>7.820000e+02</td>\n",
       "      <td>1.371866e+09</td>\n",
       "      <td>34.606487</td>\n",
       "      <td>-96.616111</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4499.500000</td>\n",
       "      <td>3.520000e+15</td>\n",
       "      <td>45.365000</td>\n",
       "      <td>47838.000000</td>\n",
       "      <td>39.319900</td>\n",
       "      <td>-86.947500</td>\n",
       "      <td>2.807000e+03</td>\n",
       "      <td>1.371918e+09</td>\n",
       "      <td>39.297930</td>\n",
       "      <td>-87.195419</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6749.250000</td>\n",
       "      <td>4.640000e+15</td>\n",
       "      <td>80.942500</td>\n",
       "      <td>72011.000000</td>\n",
       "      <td>41.940400</td>\n",
       "      <td>-80.175200</td>\n",
       "      <td>2.190200e+04</td>\n",
       "      <td>1.371965e+09</td>\n",
       "      <td>41.968794</td>\n",
       "      <td>-80.262697</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8999.000000</td>\n",
       "      <td>4.990000e+18</td>\n",
       "      <td>3344.720000</td>\n",
       "      <td>99783.000000</td>\n",
       "      <td>65.689900</td>\n",
       "      <td>-67.950300</td>\n",
       "      <td>2.906700e+06</td>\n",
       "      <td>1.372013e+09</td>\n",
       "      <td>65.951727</td>\n",
       "      <td>-67.122946</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Sno        cc_num          amt           zip          lat  \\\n",
       "count  9000.000000  9.000000e+03  9000.000000   9000.000000  9000.000000   \n",
       "mean   4499.500000  4.075113e+17    67.615313  48451.812556    38.466155   \n",
       "std    2598.220545  1.297011e+18   123.069824  26761.477241     5.113646   \n",
       "min       0.000000  6.041621e+10     1.000000   1257.000000    20.027100   \n",
       "25%    2249.750000  1.800000e+14     9.317500  26041.000000    34.509100   \n",
       "50%    4499.500000  3.520000e+15    45.365000  47838.000000    39.319900   \n",
       "75%    6749.250000  4.640000e+15    80.942500  72011.000000    41.940400   \n",
       "max    8999.000000  4.990000e+18  3344.720000  99783.000000    65.689900   \n",
       "\n",
       "              long      city_pop     unix_time    merch_lat   merch_long  \\\n",
       "count  9000.000000  9.000000e+03  9.000000e+03  9000.000000  9000.000000   \n",
       "mean    -89.989711  9.599461e+04  1.371916e+09    38.451335   -89.989323   \n",
       "std      13.620592  3.245845e+05  5.752840e+04     5.146519    13.635804   \n",
       "min    -165.672300  2.300000e+01  1.371817e+09    19.163455  -166.464422   \n",
       "25%     -96.618400  7.820000e+02  1.371866e+09    34.606487   -96.616111   \n",
       "50%     -86.947500  2.807000e+03  1.371918e+09    39.297930   -87.195419   \n",
       "75%     -80.175200  2.190200e+04  1.371965e+09    41.968794   -80.262697   \n",
       "max     -67.950300  2.906700e+06  1.372013e+09    65.951727   -67.122946   \n",
       "\n",
       "          is_fraud  \n",
       "count  9000.000000  \n",
       "mean      0.002444  \n",
       "std       0.049384  \n",
       "min       0.000000  \n",
       "25%       0.000000  \n",
       "50%       0.000000  \n",
       "75%       0.000000  \n",
       "max       1.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO SEE DESCRIPTIVE ANALYSIS\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc7d4830-d5e9-4dd1-a965-5710f5bbf6b9",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "It provides a statistical summary of the numeric columns. For example, the amt column (transaction amount) has a mean of around X, with a minimum of Y and a maximum of Z, suggesting a wide range of transaction values. The standard deviation shows moderate/high variability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "489e9efe-7560-431e-ae07-6731d75531ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sno                      0\n",
       "trans_date_trans_time    0\n",
       "cc_num                   0\n",
       "merchant                 0\n",
       "category                 0\n",
       "amt                      0\n",
       "first                    0\n",
       "last                     0\n",
       "gender                   0\n",
       "street                   0\n",
       "city                     0\n",
       "state                    0\n",
       "zip                      0\n",
       "lat                      0\n",
       "long                     0\n",
       "city_pop                 0\n",
       "job                      0\n",
       "dob                      0\n",
       "trans_num                0\n",
       "unix_time                0\n",
       "merch_lat                0\n",
       "merch_long               0\n",
       "is_fraud                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO CHECK NULL VALUES\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "786f9b3d-434c-451e-b6f8-f22feba18f22",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "It shows that the dataset is mostly complete, with no significant missing values in any columns. All columns              return a count of 0, indicating no null entries.               "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "72a1cabd-d62b-4045-80fb-5b6570d1d056",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TO CHECK DUPLICATES\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b6ee94a-d032-4ee6-8e9f-05f5b5d5c281",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "It returns 0, indicating there are no duplicate rows in the dataset. This confirms that each transaction                  record is unique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2b2a7e23-cb17-4b84-9b23-093d33ddf2af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        personal_care\n",
      "1        personal_care\n",
      "2       health_fitness\n",
      "3             misc_pos\n",
      "4               travel\n",
      "             ...      \n",
      "8995       food_dining\n",
      "8996       food_dining\n",
      "8997     personal_care\n",
      "8998         kids_pets\n",
      "8999         kids_pets\n",
      "Name: category, Length: 9000, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#TO STRIP WHITESPACES\n",
    "df['category'] = df['category'].str.strip()\n",
    "print(df['category'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b6170c1-f531-4fe6-b821-f0543a633d98",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "Leading and trailing whitespaces were removed from the category column using .str.strip(). This ensures clean             and consistent category values, which is important for accurate grouping, filtering, and visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b62b72fd-cc30-43c8-9ec8-8a6229eefdcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       M\n",
      "1       F\n",
      "2       F\n",
      "3       M\n",
      "4       M\n",
      "       ..\n",
      "8995    F\n",
      "8996    M\n",
      "8997    F\n",
      "8998    F\n",
      "8999    M\n",
      "Name: gender, Length: 9000, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#TO CHECK UNIQUE VALUES\n",
    "df['gender'].unique()\n",
    "df['gender'] = df['gender'].str.upper().str.strip()\n",
    "print(df['gender'] )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c38f965a-efb7-485c-a090-f5298a366a66",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The gender column was standardized by converting all values to uppercase and removing leading/trailing                    whitespaces. This ensures consistent gender representation ('M' and 'F') and prevents data grouping issues                caused by inconsistent formatting. Initial inspection using .unique() confirmed the presence of inconsistent              entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "67215fa0-8f2f-4eaf-b752-0aab9c678e7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       2290000000000000.0\n",
      "1       3570000000000000.0\n",
      "2       3600000000000000.0\n",
      "3       3590000000000000.0\n",
      "4       3530000000000000.0\n",
      "               ...        \n",
      "8995    3580000000000000.0\n",
      "8996    3510000000000000.0\n",
      "8997       4190000000000.0\n",
      "8998              4.18e+18\n",
      "8999      38800000000000.0\n",
      "Name: cc_num, Length: 9000, dtype: object\n",
      "0       29209\n",
      "1       84002\n",
      "2       11710\n",
      "3       32780\n",
      "4       49632\n",
      "        ...  \n",
      "8995    64019\n",
      "8996    35811\n",
      "8997    29817\n",
      "8998    87558\n",
      "8999    12460\n",
      "Name: zip, Length: 9000, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#TO CONVERT DATA TYPES\n",
    "df['cc_num'] = df['cc_num'].astype(str)\n",
    "df['zip'] = df['zip'].astype(str)\n",
    "print(df['cc_num'])\n",
    "print(df['zip'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b89708ec-08ee-4547-841c-360279eae382",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The cc_num and zip columns were converted to string data types using .astype(str). This ensures accurate                  representation of identifier fields, prevents loss of information like leading zeros, and avoids                          inappropriate mathematical operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "dc0574d8-78cd-4e2b-ae66-ffbc322ead9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      2020-06-21 12:14:00\n",
      "1      2020-06-21 12:14:00\n",
      "2      2020-06-21 12:14:00\n",
      "3      2020-06-21 12:15:00\n",
      "4      2020-06-21 12:15:00\n",
      "               ...        \n",
      "8995   2020-06-23 18:49:00\n",
      "8996   2020-06-23 18:50:00\n",
      "8997   2020-06-23 18:50:00\n",
      "8998   2020-06-23 18:50:00\n",
      "8999   2020-06-23 18:50:00\n",
      "Name: trans_date_trans_time, Length: 9000, dtype: datetime64[ns]\n"
     ]
    }
   ],
   "source": [
    "#TO FIX DATE AND TIME\n",
    "df['trans_date_trans_time'] = pd.to_datetime(df['trans_date_trans_time'], format=\"%d-%m-%Y %H:%M\")\n",
    "print(df['trans_date_trans_time'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a81e32e-ee56-4ebd-b201-95e68f8906e2",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "This column was successfully converted from string to datetime format using pd.to_datetime(). This transformation enables efficient extraction of temporal features like hour, day, and weekday, which are critical for identifying fraud patterns over time. Now, we can perform detailed time-based analyses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7cddb66c-2a93-4a71-8371-bc5085ba2d45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       12\n",
      "1       12\n",
      "2       12\n",
      "3       12\n",
      "4       12\n",
      "        ..\n",
      "8995    18\n",
      "8996    18\n",
      "8997    18\n",
      "8998    18\n",
      "8999    18\n",
      "Name: hour, Length: 9000, dtype: int32\n",
      "0        Sunday\n",
      "1        Sunday\n",
      "2        Sunday\n",
      "3        Sunday\n",
      "4        Sunday\n",
      "         ...   \n",
      "8995    Tuesday\n",
      "8996    Tuesday\n",
      "8997    Tuesday\n",
      "8998    Tuesday\n",
      "8999    Tuesday\n",
      "Name: day_of_week, Length: 9000, dtype: object\n",
      "0        True\n",
      "1        True\n",
      "2        True\n",
      "3        True\n",
      "4        True\n",
      "        ...  \n",
      "8995    False\n",
      "8996    False\n",
      "8997    False\n",
      "8998    False\n",
      "8999    False\n",
      "Name: is_weekend, Length: 9000, dtype: bool\n"
     ]
    }
   ],
   "source": [
    "#Feature Engineering\n",
    "df['hour'] = df['trans_date_trans_time'].dt.hour\n",
    "df['day_of_week'] = df['trans_date_trans_time'].dt.day_name()\n",
    "df['is_weekend'] = df['day_of_week'].isin(['Saturday', 'Sunday'])\n",
    "print(df['hour'])\n",
    "print(df['day_of_week'])\n",
    "print(df['is_weekend'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "535183e9-3af0-43b5-9257-b4632de49537",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "Three new time-based features were created:\n",
    ">hour: Extracted to identify transaction timing patterns throughout the day.\n",
    ">day_of_week: Added to detect daily patterns and trends.\n",
    ">is_weekend: A boolean column to help assess if fraudulent activity is more prevalent on weekends.\n",
    "\n",
    "These features are valuable for time-based visualizations, fraud trend analysis, and model building.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "274d0acb-8338-4c6b-ae1e-9a39681c8d53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Sno trans_date_trans_time              cc_num  \\\n",
      "0    0   2020-06-21 12:14:00  2290000000000000.0   \n",
      "1    1   2020-06-21 12:14:00  3570000000000000.0   \n",
      "2    2   2020-06-21 12:14:00  3600000000000000.0   \n",
      "3    3   2020-06-21 12:15:00  3590000000000000.0   \n",
      "4    4   2020-06-21 12:15:00  3530000000000000.0   \n",
      "\n",
      "                               merchant        category    amt   first  \\\n",
      "0                 fraud_Kirlin and Sons   personal_care   2.86    Jeff   \n",
      "1                  fraud_Sporer-Keebler   personal_care  29.84  Joanne   \n",
      "2  fraud_Swaniawski, Nitzsche and Welch  health_fitness  41.28  Ashley   \n",
      "3                     fraud_Haley Group        misc_pos  60.05   Brian   \n",
      "4                 fraud_Johnston-Casper          travel   3.19  Nathan   \n",
      "\n",
      "       last gender                       street  ...                     job  \\\n",
      "0   Elliott      M            351 Darlene Green  ...     Mechanical engineer   \n",
      "1  Williams      F             3638 Marsh Union  ...  Sales professional, IT   \n",
      "2     Lopez      F         9333 Valentine Point  ...       Librarian, public   \n",
      "3  Williams      M  32941 Krystal Mill Apt. 552  ...            Set designer   \n",
      "4    Massey      M     5783 Evan Roads Apt. 465  ...      Furniture designer   \n",
      "\n",
      "          dob                         trans_num   unix_time  merch_lat  \\\n",
      "0  19-03-1968  2da90c7d74bd46a0caf3777415b3ebd3  1371816865  33.986391   \n",
      "1  17-01-1990  324cc204407e99f51b0d6ca0055005e7  1371816873  39.450498   \n",
      "2  21-10-1970  c81755dbbbea9d5c77f094348a7579be  1371816893  40.495810   \n",
      "3  25-07-1987  2159175b9efe66dc301f149d3d5abf8c  1371816915  28.812398   \n",
      "4  06-07-1955  57ff021bd3f328f8738bb535c302a31b  1371816917  44.959148   \n",
      "\n",
      "   merch_long is_fraud hour day_of_week  is_weekend  \n",
      "0  -81.200714        0   12      Sunday        True  \n",
      "1 -109.960431        0   12      Sunday        True  \n",
      "2  -74.196111        0   12      Sunday        True  \n",
      "3  -80.883061        0   12      Sunday        True  \n",
      "4  -85.884734        0   12      Sunday        True  \n",
      "\n",
      "[5 rows x 26 columns]\n",
      "Shape after cleaning: (9000, 26)\n"
     ]
    }
   ],
   "source": [
    "#AFTER CLEANING DATASET\n",
    "print(df.head())\n",
    "print(\"Shape after cleaning:\", df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bec1d643-8fa1-42b7-981f-4833da2fba43",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The cleaned dataset has (9000, 26) rows and columns, where 26 reflects the total number of original + newly engineered features (like hour, day_of_week, is_weekend). The preview using .head() confirms that:\n",
    "\n",
    ">Date and time formats are correctly parsed.\n",
    ">Text fields are trimmed and standardized.\n",
    ">New time-based columns are successfully added.\n",
    ">Identifier columns (cc_num, zip) are of type str.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6fa4556c-dfd1-4d4b-a5e2-9adec418ab53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#BOXPLOT TO CHECK OUTLIERS\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.boxplot(y=df['amt'])\n",
    "plt.title(\"Box Plot of Transaction Amount\")\n",
    "plt.xlabel(\"Transaction Amount\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f98aa283-b1b0-4f6c-956f-908810504129",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "There are clear outliers in the transaction amounts, especially high-value ones. this indicates potential                 fraudulent activity, and such transactions require further investigation. high-value outliers can skew                    average metrics and impact model performance if not handled properly.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "53733914-1fea-4a93-8aad-c83e59bea9e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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2uoftZ9FixZBpVKJj+vXrzf0kIiIiIioBTN6ALayssIzzzyDfv36Yc2aNejZsyc++ugjyOVyAKhxljYvL088KyyXy1FZWYnCwsJ6a27dulXjfW/fvl3j7PKDpFKpuDqF9kFERERETz6jB+CHCYKAiooKeHp6Qi6XIykpSdxWWVmJ48ePIyAgAADQt29fWFpa6tTk5ubiwoULYo2/vz9UKhVOnz4t1qSlpUGlUok1RERERGQ6LIz55osXL0ZgYCDc3d1x9+5dJCQk4NixY0hMTIREIkF4eDhWr16Nzp07o3Pnzli9ejVsbW0xefJkAIBMJsP06dMxf/58tG3bFs7OzliwYAF8fHwwYsQIAEC3bt0wZswYzJw5E1u3bgUAzJo1C0FBQQ1eAYKIiIiIWg+jBuBbt24hNDQUubm5kMlk8PX1RWJiIkaOHAkAWLhwIcrKyhAWFobCwkL4+fnhhx9+gIODg7iPDz/8EBYWFpg4cSLKysowfPhwxMXFwdzcXKyJj4/HvHnzxNUigoODERMT07wHS0REREQtQotbB7il4jrARERERC3bE7cOMBERERFRc2AAJiIiIiKTwgBMRERERCaFAZiIiIiITAoDMBERERGZFAZgIiIiIjIpDMBEREREZFIYgImIiIjIpDAAExEREZFJYQAmIiIiIpPCAExEREREJoUBmIiIiIhMCgMwEREREZkUBmAiIiIiMikMwERERERkUhiAiYiIiMikMAATERERkUlhACYiIiIik8IATEREREQmhQGYiIiIiEwKAzARERERmRQGYCIiIiIyKQzARERERGRSGICJiIiIyKQwABMRERGRSWEAJiIiIiKTwgBMRERERCaFAZiIiIiITAoDMBERERGZFAZgIiIiIjIpDMBEREREZFIYgImIiIjIpDAAExEREZFJYQAmIiIiIpPCAExEREREJoUBmIiIiIhMCgMwEREREZkUBmAiIiIiMikMwERERERkUhiAiYiIiMikMAATERERkUlhACYiIiIik2LUALxmzRo899xzcHBwgIuLC8aNG4fLly/r1EydOhUSiUTn0b9/f52aiooKzJ07F+3atYOdnR2Cg4Nx48YNnZrCwkKEhoZCJpNBJpMhNDQURUVFTX2IRERERNTCGDUAHz9+HHPmzEFqaiqSkpJQXV2NUaNGobS0VKduzJgxyM3NFR8HDx7U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",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#FRAUDULENT TRANSACTIONS TEND TO HAVE HIGHER OR UNUSUAL AMOUNTS.\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.boxplot(data=df, x='is_fraud', y='amt')\n",
    "plt.title(\"Transaction Amount by Fraud Label\")\n",
    "plt.xlabel(\"Fraud (1 = fraud, 0 = Not fraud)\")\n",
    "plt.ylabel(\"Transaction Amount\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af0ec10f-1f33-4c5d-87c7-965ac2b3d95c",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The boxplot shows that fraudulent transactions generally have higher transaction amounts compared to non-                 fraudulent ones. The median value for frauds is visibly greater, and there are more high-value outliers in                the fraud group. This suggests that fraudsters often attempt transactions with larger amounts, making amt a               strong predictive feature for modeling.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "54e9b3a1-7f30-43a3-959f-95623f851aa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stored procedure executed successfully.\n",
      "(1, '16bf2e46c54369a8eab2214649506425', 3560000000000000, datetime.datetime(2020, 6, 21, 22, 6), Decimal('24.84'), \"fraud_Hamill-D'Amore\", 'health_fitness', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2, 'ab4b379d2c0c9c667d46508d4e126d72', 6560000000000000, datetime.datetime(2020, 6, 21, 22, 32), Decimal('780.52'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(3, '47a9987ae81d99f7832a54b29a77bf4b', 6560000000000000, datetime.datetime(2020, 6, 21, 22, 37), Decimal('620.33'), 'fraud_Nienow PLC', 'entertainment', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(4, 'fe956c7e4a253c437c18918bf96f7b62', 4010000000000000, datetime.datetime(2020, 6, 21, 22, 38), Decimal('1077.69'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(5, 'f6838c01f5d2262006e6b71d33ba7c6d', 3560000000000000, datetime.datetime(2020, 6, 21, 23, 2), Decimal('842.65'), 'fraud_Hermann and Sons', 'shopping_pos', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(6, '0bac42920027f9b7b3d328bda2709983', 3520000000000000, datetime.datetime(2020, 6, 21, 23, 16), Decimal('22.55'), 'fraud_Thompson-Gleason', 'health_fitness', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(7, 'eb388ceabaf56474808664772b2d5853', 4010000000000000, datetime.datetime(2020, 6, 21, 23, 21), Decimal('1128.26'), 'fraud_Kuhic LLC', 'shopping_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(8, 'aff46f2741b3501d32b447f842618666', 4010000000000000, datetime.datetime(2020, 6, 21, 23, 35), Decimal('931.82'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(9, '8cabf98e58e2b29f7684362fea1f026c', 4010000000000000, datetime.datetime(2020, 6, 21, 23, 40), Decimal('983.00'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(10, '1799ffe421a2a05dc87903e379140f55', 6560000000000000, datetime.datetime(2020, 6, 21, 23, 59), Decimal('955.16'), 'fraud_Lemke-Gutmann', 'shopping_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(11, '720905fa777ec90291cfd002fd12d67f', 4010000000000000, datetime.datetime(2020, 6, 22, 0, 6), Decimal('701.81'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(12, '5461e8c92d8b6512c620b2f943ff8ffa', 3520000000000000, datetime.datetime(2020, 6, 22, 1, 18), Decimal('8.39'), 'fraud_Yost, Block and Koepp', 'misc_pos', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(13, '219c46c355f98b732d9a36818c5b8a88', 4010000000000000, datetime.datetime(2020, 6, 22, 1, 25), Decimal('326.94'), 'fraud_Goldner, Kovacek and Abbott', 'grocery_pos', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(14, '7220be6f2a92f9c1056d2bcf46c986bd', 3520000000000000, datetime.datetime(2020, 6, 22, 1, 54), Decimal('353.08'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(15, '2316b3d5045b9dcba383d5c27031ea4a', 4010000000000000, datetime.datetime(2020, 6, 22, 3, 38), Decimal('868.48'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(16, 'd40a602f3d62fc3849bacd25c413952b', 3520000000000000, datetime.datetime(2020, 6, 22, 3, 48), Decimal('13.25'), 'fraud_Skiles-Ankunding', 'grocery_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(17, '20ffa4abb3d483d9558c33640be75066', 3520000000000000, datetime.datetime(2020, 6, 22, 3, 55), Decimal('777.45'), 'fraud_Kuhn LLC', 'shopping_pos', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(18, '4ee010ce369915da173469857effcea5', 3520000000000000, datetime.datetime(2020, 6, 22, 4, 58), Decimal('967.86'), 'fraud_Schumm PLC', 'shopping_net', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(19, 'd6f6c02b96059201092cab8cef7ceabf', 4010000000000000, datetime.datetime(2020, 6, 22, 21, 51), Decimal('825.81'), 'fraud_Baumbach, Strosin and Nicolas', 'shopping_pos', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(20, 'a965da9bc7daef7f526ce640d5c090ae', 3520000000000000, datetime.datetime(2020, 6, 22, 22, 20), Decimal('21.92'), 'fraud_Shanahan-Lehner', 'personal_care', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(21, 'c3a4aa2a2242f932c576d974dae46a34', 3520000000000000, datetime.datetime(2020, 6, 22, 23, 8), Decimal('21.74'), 'fraud_Haley, Batz and Auer', 'health_fitness', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(22, '217ca81136b86234abecc0ece6358f96', 3520000000000000, datetime.datetime(2020, 6, 22, 23, 35), Decimal('250.32'), 'fraud_Kutch-Wilderman', 'home', 1, 'Labeled as fraud', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(32, 'a563f1ac90cedc803fb4ab036f303d2b', 4660000000000000000, datetime.datetime(2020, 6, 22, 0, 0), Decimal('66.75'), 'fraud_Heller-Langosh', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(33, 'f8034a466492844ef807d418d8f7b308', 213000000000000, datetime.datetime(2020, 6, 22, 0, 0), Decimal('99.94'), 'fraud_Hintz-Bruen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(34, 'a0a696d31bf91d092e6de81fa4ecdc8a', 6600000000000000, datetime.datetime(2020, 6, 22, 0, 0), Decimal('325.61'), 'fraud_McGlynn-Heathcote', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(35, '942cd9e4b14d4e085f8c120278bb9f44', 676000000000, datetime.datetime(2020, 6, 22, 0, 0), Decimal('84.13'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(36, 'd7f983b337b32117544f215f934be686', 3560000000000000, datetime.datetime(2020, 6, 22, 0, 2), Decimal('53.75'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(37, '22fbe14c36f3e31abbcd605694881172', 213000000000000, datetime.datetime(2020, 6, 22, 0, 3), Decimal('68.39'), 'fraud_Ernser-Lynch', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(38, 'db33bcce226af5865d1367528c41d64a', 6520000000000000, datetime.datetime(2020, 6, 22, 0, 5), Decimal('7.47'), 'fraud_Jewess LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(39, 'fb03e4937011e63a34db5ee97e75d4b6', 2290000000000000, datetime.datetime(2020, 6, 22, 0, 5), Decimal('55.32'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(40, '5be6e71756b6a1f9a21f89caf7a24754', 6510000000000000, datetime.datetime(2020, 6, 22, 0, 5), Decimal('9.59'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(41, 'd5f7c3a16db2f741453afd04aba7fa5c', 4310000000000000000, datetime.datetime(2020, 6, 22, 0, 6), Decimal('1.23'), 'fraud_Eichmann-Russel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(42, 'cc8a947a84162d0f60750c36ece25fa9', 2710000000000000, datetime.datetime(2020, 6, 22, 0, 6), Decimal('91.61'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(43, '9ea6b5721748302e95be33d024773c62', 36200000000000, datetime.datetime(2020, 6, 22, 0, 6), Decimal('66.39'), 'fraud_Bernier, Streich and Jewess', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(44, 'a6b92a3b2e9ea68105dabac8d29218c4', 4960000000000, datetime.datetime(2020, 6, 22, 0, 7), Decimal('62.62'), \"fraud_Friesen-D'Amore\", 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(45, '7bd26566712e86f2bf4ccf7983be0780', 4470000000000000000, datetime.datetime(2020, 6, 22, 0, 10), Decimal('48.33'), 'fraud_Huel, Hammes and Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(46, '6fa949a56a641e4985d7f5543b3aa6b9', 376000000000000, datetime.datetime(2020, 6, 22, 0, 10), Decimal('68.50'), 'fraud_Powlowski-Weimann', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(47, '60042942c14be548bb0a94ebfa7a3bca', 639000000000, datetime.datetime(2020, 6, 22, 0, 10), Decimal('108.20'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(48, 'b099a9eff197799bd679f0ad203c4648', 3590000000000000, datetime.datetime(2020, 6, 22, 0, 10), Decimal('54.07'), 'fraud_Skiles-Ankunding', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(49, '809ba058efa68be51d38443bbaf19429', 180000000000000, datetime.datetime(2020, 6, 22, 0, 12), Decimal('36.28'), 'fraud_Gutmann-Upton', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(50, '8d9b1b9fcd97c75bebb35e5c58ac7426', 3580000000000000, datetime.datetime(2020, 6, 22, 0, 13), Decimal('16.15'), 'fraud_Block Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(51, 'd5ca3f173bd2c2f853a911bd8b861472', 4340000000000000, datetime.datetime(2020, 6, 22, 0, 13), Decimal('44.17'), 'fraud_Turner, Ruecker and Parisian', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(52, '335f56dd328ecb4f1c2a476a538fcd6a', 373000000000000, datetime.datetime(2020, 6, 22, 0, 14), Decimal('432.31'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(53, 'f3f0619729bc3ace0a9c19343bd946f5', 561000000000, datetime.datetime(2020, 6, 22, 0, 15), Decimal('5.20'), 'fraud_Kerluke Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(54, '342f880794bafa272336d2ad40a102ac', 676000000000, datetime.datetime(2020, 6, 22, 0, 15), Decimal('6.39'), 'fraud_Block Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(55, '116a25785d3c95bedf48cc0fb383f151', 4030000000000000, datetime.datetime(2020, 6, 22, 0, 15), Decimal('4.73'), 'fraud_Roob, Conn and Tremblay', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(56, '197a1829c8376f8c619f61998fa1b46c', 6010000000000000, datetime.datetime(2020, 6, 22, 0, 16), Decimal('81.60'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(57, '68ee3c1cafee886f7a9873da4bbda232', 4840000000000000, datetime.datetime(2020, 6, 22, 0, 17), Decimal('41.19'), 'fraud_Herman Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(58, 'cb29a2e2f5c9541a9ec1d6fa51f0d473', 4430000000000000000, datetime.datetime(2020, 6, 22, 0, 18), Decimal('4.13'), 'fraud_Volkman Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(59, 'e6e60ab63ae7b40d498b019032ecee86', 213000000000000, datetime.datetime(2020, 6, 22, 0, 18), Decimal('54.02'), 'fraud_Schaefer, Fay and Hilll', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(60, '796e050a35fc8ab552efdbc05e4cb7d4', 4030000000000000, datetime.datetime(2020, 6, 22, 0, 19), Decimal('42.27'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(61, 'e69db92cee8a24ebbe63970232cf97d0', 676000000000, datetime.datetime(2020, 6, 22, 0, 19), Decimal('8.97'), 'fraud_Welch Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(62, '49a432aa928bd730ca0923916426b226', 180000000000000, datetime.datetime(2020, 6, 22, 0, 20), Decimal('5.20'), 'fraud_Monahan, Bogisich and Ledner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(63, 'e93c2f789b92e21ea676b782afa8d666', 30100000000000, datetime.datetime(2020, 6, 22, 0, 21), Decimal('64.29'), 'fraud_Schmitt Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(64, '69607c9b4c8353c496344c2a3ed8bd5c', 4270000000000000, datetime.datetime(2020, 6, 22, 0, 22), Decimal('15.72'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(65, '48848b6e8189a0de1b5e42512d3fe318', 3540000000000000, datetime.datetime(2020, 6, 22, 0, 22), Decimal('100.92'), 'fraud_Kutch-Hegmann', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(66, 'b8e60047fef12f4bf943a9bd53d4e8d2', 4790000000000000000, datetime.datetime(2020, 6, 22, 0, 23), Decimal('78.54'), 'fraud_Spinka Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(67, 'e3d9388b295dc343338c7c8308fe5954', 3540000000000000, datetime.datetime(2020, 6, 22, 0, 23), Decimal('240.09'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(68, '0ace2884b7ebaf8b55159f24c5c59437', 4610000000000000, datetime.datetime(2020, 6, 22, 0, 24), Decimal('88.08'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(69, '36ccfb59fa7c1bb993261bb4dd5cbc83', 377000000000000, datetime.datetime(2020, 6, 22, 0, 25), Decimal('87.12'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(70, '5e487843262d06301b834f1bf1d90936', 4800000000000000, datetime.datetime(2020, 6, 22, 0, 25), Decimal('6.42'), 'fraud_Turcotte-Halvorson', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(71, '674997c19d8961614e58db117f4abc54', 30200000000000, datetime.datetime(2020, 6, 22, 0, 25), Decimal('128.94'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(72, '29cc64ff830427cf67e5e85952b59de8', 30300000000000, datetime.datetime(2020, 6, 22, 0, 27), Decimal('62.70'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(73, '9d9d88880fa677ebbea913b5f27fb4da', 374000000000000, datetime.datetime(2020, 6, 22, 0, 28), Decimal('53.42'), 'fraud_Marks Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(74, '67a93a8de98219a3efa811c0dc437636', 3550000000000000, datetime.datetime(2020, 6, 22, 0, 29), Decimal('722.94'), 'fraud_Huel-Langworth', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(75, '7f4378e07ee540b97bf51786086603d2', 213000000000000, datetime.datetime(2020, 6, 22, 0, 30), Decimal('128.73'), 'fraud_Larkin, Stracke and Greenfelder', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(76, 'ee5c7d0d84ecf3b603e13cc3571fc9d7', 343000000000000, datetime.datetime(2020, 6, 22, 0, 30), Decimal('91.17'), 'fraud_Abshire PLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(77, '91a5148b1f0c4c24c1e9bda07ff72e5b', 2300000000000000, datetime.datetime(2020, 6, 22, 0, 31), Decimal('50.30'), 'fraud_Eichmann, Bogan and Rodriguez', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(78, '265ef791f8fddbbc3eff2124c3b9e560', 3590000000000000, datetime.datetime(2020, 6, 22, 0, 31), Decimal('151.10'), 'fraud_Weber and Sons', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(79, '9260e33726ee00fca30495c8c010ee1e', 3500000000000000, datetime.datetime(2020, 6, 22, 0, 31), Decimal('38.69'), 'fraud_Hoppe, Harris and Bednar', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(80, 'ee909bb2c9cbfdc9d3cbf9b68e91aa28', 4560000000000000000, datetime.datetime(2020, 6, 22, 0, 31), Decimal('53.85'), 'fraud_Morissette, Weber and Wiegand', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(81, '415c1049e259b6747426b3de1fb6eaf2', 4330000000000000, datetime.datetime(2020, 6, 22, 0, 32), Decimal('207.48'), 'fraud_Moen, Reinger and Murphy', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(82, 'b6a6e3326a42f46442d9257fa48bc7cf', 6010000000000000, datetime.datetime(2020, 6, 22, 0, 32), Decimal('180.73'), 'fraud_Kuhn LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(83, '130ed9f5861c887e07dd65eda13a694c', 4860000000000, datetime.datetime(2020, 6, 22, 0, 33), Decimal('133.22'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(84, 'ce08e2f7a515fcea66d9cc2dedf5f376', 377000000000000, datetime.datetime(2020, 6, 22, 0, 33), Decimal('8.64'), 'fraud_Ferry, Lynch and Kautzer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(85, '82a66070b4f26868138523dbc36b00e7', 4270000000000000, datetime.datetime(2020, 6, 22, 0, 33), Decimal('54.33'), 'fraud_Bahringer, Schoen and Corkery', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(86, '22d466cdd1d861264f2667da70cbd3de', 3590000000000000, datetime.datetime(2020, 6, 22, 0, 36), Decimal('211.71'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(87, 'b55af12a371e061d968cdafd5135f721', 180000000000000, datetime.datetime(2020, 6, 22, 0, 36), Decimal('37.09'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(88, '48a9eb70e72bb3e443cdc138abc6c889', 4660000000000000, datetime.datetime(2020, 6, 22, 0, 37), Decimal('559.59'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(89, '13ddbc8c6d37c28595ccb983e9ac8233', 180000000000000, datetime.datetime(2020, 6, 22, 0, 37), Decimal('75.73'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(90, '8f1eaab20e22499ae4bc3ac33a2df0bb', 4980000000000, datetime.datetime(2020, 6, 22, 0, 37), Decimal('58.74'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(91, '66ff55d7989c4fef8d69f0b8e8c64d88', 4130000000000000, datetime.datetime(2020, 6, 22, 0, 39), Decimal('152.32'), 'fraud_Schaefer, Fay and Hilll', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(92, '9e9a93b760ce5f745e6d17c61e46d56c', 373000000000000, datetime.datetime(2020, 6, 22, 0, 40), Decimal('195.40'), \"fraud_O'Keefe-Hudson\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(93, '336c2b369fe5365f943b0c3aeb397d82', 4430000000000000, datetime.datetime(2020, 6, 22, 0, 41), Decimal('61.15'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(94, '214d68dd6ed09c4263c982d46554beed', 180000000000000, datetime.datetime(2020, 6, 22, 0, 41), Decimal('48.85'), 'fraud_Murray Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(95, 'd91415cdf4d374372e510e397a45f8af', 3570000000000000, datetime.datetime(2020, 6, 22, 0, 41), Decimal('63.77'), 'fraud_Pfeffer LLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(96, 'b62b74b9be7ce91841143f8ac7476643', 374000000000000, datetime.datetime(2020, 6, 22, 0, 42), Decimal('68.90'), 'fraud_Padberg-Welch', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(97, '954bdc9e0e9ed5ed0f53220a5f3cfc2d', 6010000000000000, datetime.datetime(2020, 6, 22, 0, 42), Decimal('91.08'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(98, '938896467278d9cf8f38b17e7e6a4fab', 6540000000000000, datetime.datetime(2020, 6, 22, 0, 43), Decimal('28.44'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(99, 'cdec81197cb441c026b1dec34d1e256a', 6530000000000000, datetime.datetime(2020, 6, 22, 0, 45), Decimal('47.36'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(100, '4f584d6dcfe46b0d59ee4d6afa9c9713', 3520000000000000, datetime.datetime(2020, 6, 22, 0, 45), Decimal('223.39'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(101, 'c33290e62fc984852f374b4efc12025a', 4640000000000000, datetime.datetime(2020, 6, 22, 0, 46), Decimal('49.89'), 'fraud_Kuvalis Ltd', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(102, '6f09c7d4de7586da1ce5b055b625ba85', 3590000000000000, datetime.datetime(2020, 6, 22, 0, 47), Decimal('21.40'), 'fraud_Williamson LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(103, '41946ac6eaf45351ac0cb75571eac692', 376000000000000, datetime.datetime(2020, 6, 22, 0, 47), Decimal('92.67'), 'fraud_Jast Ltd', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(104, '0d61f7d2c1320def0cb0b985711fd8d1', 4300000000000000, datetime.datetime(2020, 6, 22, 0, 49), Decimal('6.31'), 'fraud_Miller-Harris', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(105, 'd2c29471bb8556114867cabe3bc6bfb7', 3530000000000000, datetime.datetime(2020, 6, 22, 0, 49), Decimal('56.35'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(106, 'f07d6c05824597fc54b39a10850e201e', 3510000000000000, datetime.datetime(2020, 6, 22, 0, 49), Decimal('1.07'), 'fraud_Swaniawski, Lowe and Robel', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(107, 'edc9db5e82c2ece31cf7d2b67c4d74c9', 345000000000000, datetime.datetime(2020, 6, 22, 0, 50), Decimal('37.43'), 'fraud_Kemmer-Buckridge', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(108, 'c4d946b47622b6a4b1c6a8349007dc61', 4450000000000000, datetime.datetime(2020, 6, 22, 0, 50), Decimal('7.32'), 'fraud_Pagac LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(109, 'b24f4493229f2df7644901061856a1b4', 4500000000000000000, datetime.datetime(2020, 6, 22, 0, 50), Decimal('72.15'), 'fraud_Swift, Bradtke and Marquardt', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(110, '3e13966c922d229dbc2a22fcb7299fff', 4380000000000000000, datetime.datetime(2020, 6, 22, 0, 50), Decimal('55.03'), 'fraud_Olson, Becker and Koch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(111, '2c7de32ae5c26d2a3b4887587c2e54b3', 4660000000000000, datetime.datetime(2020, 6, 22, 0, 50), Decimal('2.87'), 'fraud_Denesik and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(112, '69dd79cb59289718739cc663d0dd8404', 6010000000000000, datetime.datetime(2020, 6, 22, 0, 50), Decimal('40.02'), 'fraud_Monahan, Bogisich and Ledner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(113, '6a697b79a44a359e18d3d4c2ae69db0b', 30000000000000, datetime.datetime(2020, 6, 22, 0, 51), Decimal('47.92'), 'fraud_Simonis-Prohaska', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(114, 'b90ae09e67af8b08c7b20cc9e4587cd5', 4550000000000000, datetime.datetime(2020, 6, 22, 0, 51), Decimal('1.69'), 'fraud_Wintheiser, Dietrich and Schimmel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(115, '6f760682ec99c15cae456d96d769dd64', 6010000000000000, datetime.datetime(2020, 6, 22, 0, 51), Decimal('59.69'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(116, '8dc703cfe486a94000a6e905fde67e62', 377000000000000, datetime.datetime(2020, 6, 22, 0, 52), Decimal('60.24'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(117, '71c91ecbbe2098e995a7fc6283e7cdfb', 4410000000000000000, datetime.datetime(2020, 6, 22, 0, 54), Decimal('13.72'), 'fraud_Christiansen-Gusikowski', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(118, '2d56a727edeb39d0919eca1651e31043', 4600000000000000000, datetime.datetime(2020, 6, 22, 0, 54), Decimal('15.16'), 'fraud_Cruickshank-Mills', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(119, '8e06656f4aa7cf02122cea29087e82d6', 4830000000000000, datetime.datetime(2020, 6, 22, 0, 55), Decimal('62.42'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(120, '1f85c9fb45f4a80f347d053a48382f5c', 4480000000000, datetime.datetime(2020, 6, 22, 0, 55), Decimal('74.76'), 'fraud_Vandervort-Funk', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(121, '5be2d812f8caf11500c1cf393061196e', 3580000000000000, datetime.datetime(2020, 6, 22, 0, 55), Decimal('1.05'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(122, 'f8b47a1a2867b32fb45f15a00636755d', 4660000000000000, datetime.datetime(2020, 6, 22, 0, 55), Decimal('7.28'), 'fraud_Dibbert and Sons', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(123, '89a832e8552edf247e2f817832b9a505', 3590000000000000, datetime.datetime(2020, 6, 22, 0, 56), Decimal('6.86'), 'fraud_Ferry, Reichel and DuBuque', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(124, '3c0d58ac22869a11bdb2bdcc696307bd', 4990000000000, datetime.datetime(2020, 6, 22, 0, 57), Decimal('9.68'), 'fraud_Willms, Kris and Bergnaum', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(125, '60af483cf18a4e05fe0b55b5afd44730', 38200000000000, datetime.datetime(2020, 6, 22, 0, 58), Decimal('60.02'), 'fraud_Kemmer-Reinger', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(126, '81f48079be4e65b9ff186d8b81eed847', 4720000000000000000, datetime.datetime(2020, 6, 22, 0, 58), Decimal('72.98'), 'fraud_Koss and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(127, 'f7865fb0eaabd8b5f65941e754daf3bf', 4450000000000000, datetime.datetime(2020, 6, 22, 0, 59), Decimal('96.80'), 'fraud_Hackett-Lueilwitz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(128, 'ba6ab10b260c872f6cf2954134c2250d', 585000000000, datetime.datetime(2020, 6, 22, 0, 59), Decimal('5.48'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(129, '2bfa27f2eab884eac15828388b81a4cf', 213000000000000, datetime.datetime(2020, 6, 22, 1, 0), Decimal('101.81'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(130, 'b7629c9c5fffeefe947b32cac50966bb', 4310000000000000000, datetime.datetime(2020, 6, 22, 1, 0), Decimal('3.16'), 'fraud_Hickle Group', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(131, '24c7877e9c7831b097b6dce49256d768', 4470000000000000000, datetime.datetime(2020, 6, 22, 1, 0), Decimal('3.69'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(132, 'f09f04c34c85871935f7a93484ff3242', 4680000000000, datetime.datetime(2020, 6, 22, 1, 0), Decimal('35.95'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(133, '5cd67098b3542129b25950bf0f311473', 4660000000000000000, datetime.datetime(2020, 6, 22, 1, 1), Decimal('1.43'), 'fraud_Pouros-Haag', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(134, '3b0a6425a4b65ea7bcd99dbc5b4f0b06', 30100000000000, datetime.datetime(2020, 6, 22, 1, 1), Decimal('7.21'), 'fraud_Klocko LLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(135, '240c4a8a52dc8c399cbec95ad198b29b', 4050000000000000, datetime.datetime(2020, 6, 22, 1, 2), Decimal('112.29'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(136, '0c0f612fcc92805167110f86b67d11ae', 378000000000000, datetime.datetime(2020, 6, 22, 1, 3), Decimal('51.33'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(137, 'c3c9356dbd85ee7ddc6e68c1b188da0f', 3550000000000000, datetime.datetime(2020, 6, 22, 1, 3), Decimal('70.49'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(138, '418875bbd219cc2fbdee269a24b8c381', 4070000000000, datetime.datetime(2020, 6, 22, 1, 3), Decimal('113.34'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(139, '94c2edc1b9374ec8e0884531d7612583', 3520000000000000, datetime.datetime(2020, 6, 22, 1, 4), Decimal('215.37'), 'fraud_Rowe, Batz and Goodwin', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(140, 'f698f67ba4bf7fe93c3e64b891d3b8d8', 3600000000000000, datetime.datetime(2020, 6, 22, 1, 4), Decimal('57.91'), 'fraud_Kemmer-Reinger', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(141, '828bd3b640c6c7b7d51f6b26234aa6df', 180000000000000, datetime.datetime(2020, 6, 22, 1, 5), Decimal('80.96'), 'fraud_Bailey-Morar', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(142, '68c85344c4cd2515e713dae449c54225', 3530000000000000, datetime.datetime(2020, 6, 22, 1, 5), Decimal('55.03'), 'fraud_Kling Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(143, '31c23360decda2fd5f2177fb3e5abcb6', 4800000000000000000, datetime.datetime(2020, 6, 22, 1, 5), Decimal('73.76'), 'fraud_Eichmann, Bogan and Rodriguez', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(144, '06c2ea10df2c23e9f7805684218327b1', 213000000000000, datetime.datetime(2020, 6, 22, 1, 5), Decimal('2.39'), 'fraud_Willms, Kris and Bergnaum', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(145, '46bd00cb1f096d99b406515c19f44b75', 4640000000000, datetime.datetime(2020, 6, 22, 1, 5), Decimal('139.82'), 'fraud_Kiehn-Emmerich', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(146, '6b655cb491f259eb88da1ee15341821e', 4310000000000, datetime.datetime(2020, 6, 22, 1, 6), Decimal('5.39'), 'fraud_Thiel-Thiel', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(147, 'dbb75bffededf552dc3a2b0c3e2682b5', 4480000000000000, datetime.datetime(2020, 6, 22, 1, 6), Decimal('55.89'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(148, '97a46dd194f9b2e289253866f6445103', 3570000000000000, datetime.datetime(2020, 6, 22, 1, 7), Decimal('55.71'), 'fraud_Eichmann, Bogan and Rodriguez', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(149, '5ddbe2fb189302dbe4715d15d2a1dd43', 3560000000000000, datetime.datetime(2020, 6, 22, 1, 7), Decimal('76.10'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(150, 'febbeee8655686847525bd16f5740645', 180000000000000, datetime.datetime(2020, 6, 22, 1, 8), Decimal('52.88'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(151, 'e047cc334235066f66e6a4f38d28b3e2', 4780000000000, datetime.datetime(2020, 6, 22, 1, 9), Decimal('55.23'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(152, '79124cd9de6ba4e60345a5cb38cbcae2', 4730000000000000, datetime.datetime(2020, 6, 22, 1, 9), Decimal('6.51'), 'fraud_Buckridge PLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(153, '21ee839f7104d7eeef52ff6f732e4600', 213000000000000, datetime.datetime(2020, 6, 22, 1, 10), Decimal('3.20'), 'fraud_Pouros-Haag', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(154, '0855099bd920d29a7078fa49fa5a5144', 6010000000000000, datetime.datetime(2020, 6, 22, 1, 11), Decimal('91.49'), 'fraud_Ferry, Reichel and DuBuque', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(155, 'f2f2ca589755af74a6a55df9b8ed7a32', 639000000000, datetime.datetime(2020, 6, 22, 1, 11), Decimal('74.51'), \"fraud_Friesen-D'Amore\", 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(156, '4fd4aa7cdfdbfe42ebaaadb981155529', 3570000000000000, datetime.datetime(2020, 6, 22, 1, 11), Decimal('16.13'), 'fraud_Durgan-Auer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(157, 'c14ecaf5d8b3c6195b0706ba89c0442e', 4710000000000000, datetime.datetime(2020, 6, 22, 1, 12), Decimal('103.10'), 'fraud_Kerluke Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(158, 'b6dbf1b599e4f526043bfab6b35f38c5', 4450000000000000, datetime.datetime(2020, 6, 22, 1, 12), Decimal('89.90'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(159, 'df2f0d0703b0fbc25e30cb7fe60dcc3a', 584000000000, datetime.datetime(2020, 6, 22, 1, 13), Decimal('5.99'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(160, '86d7adca3f333b1a61a37b717fb44406', 4870000000000000, datetime.datetime(2020, 6, 22, 1, 13), Decimal('41.15'), 'fraud_Harris, Gusikowski and Heaney', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(161, 'ba30ac87ec3d053611907060ac8f0eba', 6010000000000000, datetime.datetime(2020, 6, 22, 1, 13), Decimal('59.49'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(162, 'de59a8b9716eafbfabadf046b5df439f', 3500000000000000, datetime.datetime(2020, 6, 22, 1, 13), Decimal('73.96'), 'fraud_Mraz-Herzog', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(163, '0b8c23d77aae7b19df739e066dffd756', 6520000000000000, datetime.datetime(2020, 6, 22, 1, 14), Decimal('57.39'), 'fraud_Schaefer, Fay and Hilll', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(164, '74e14b89e8d7ffcd0ebc6861e3d53a7b', 4260000000000, datetime.datetime(2020, 6, 22, 1, 14), Decimal('978.39'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(165, 'aec4353efc1413b7f4126323ff113b66', 4470000000000000000, datetime.datetime(2020, 6, 22, 1, 14), Decimal('74.91'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(166, '54a26313062a274ecfbc348b46d57153', 3500000000000000, datetime.datetime(2020, 6, 22, 1, 14), Decimal('48.02'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(167, '5fb0c993d04254f998ed400f4deb61c4', 4340000000000000, datetime.datetime(2020, 6, 22, 1, 15), Decimal('78.65'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(168, '21188461d96176cbe49c1a7316b4cdd3', 30400000000000, datetime.datetime(2020, 6, 22, 1, 15), Decimal('99.56'), 'fraud_Rowe, Batz and Goodwin', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(169, 'd4dcbd02dc57afd909aa43bc43d846f2', 2240000000000000, datetime.datetime(2020, 6, 22, 1, 16), Decimal('86.87'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(170, '83e14d134edb62455bcc5477d72f3b5e', 4840000000000000, datetime.datetime(2020, 6, 22, 1, 16), Decimal('67.93'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(171, 'dd3fa53c464bad74f93e8d2acd523deb', 3560000000000000, datetime.datetime(2020, 6, 22, 1, 16), Decimal('7.86'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(172, '47fab92e08f457cabefbea9697d10aab', 6520000000000000, datetime.datetime(2020, 6, 22, 1, 17), Decimal('1.35'), 'fraud_Bashirian Group', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(173, '2ecc50bc8661dd608aa5c29ad9ce0e7a', 6010000000000000, datetime.datetime(2020, 6, 22, 1, 17), Decimal('3.37'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(174, 'd703aa29596707e332831867979c94ac', 344000000000000, datetime.datetime(2020, 6, 22, 1, 17), Decimal('7.20'), 'fraud_Cremin, Hamill and Reichel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(175, '5195f5f6217f3d08f0e885eff34c4298', 562000000000, datetime.datetime(2020, 6, 22, 1, 18), Decimal('53.49'), 'fraud_Rowe-Vandervort', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(176, '0287f65fd9454cea832ba6dbc5c7eea8', 213000000000000, datetime.datetime(2020, 6, 22, 1, 18), Decimal('116.13'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(177, '3546ec7f092ec0031cee3fd1b157c0f4', 30200000000000, datetime.datetime(2020, 6, 22, 1, 18), Decimal('106.60'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(178, 'babe05d358f46a7d5e0abc854b0a84b4', 378000000000000, datetime.datetime(2020, 6, 22, 1, 18), Decimal('109.67'), 'fraud_DuBuque LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(179, '4ee510a665ef4dd049caa7c70929d583', 377000000000000, datetime.datetime(2020, 6, 22, 1, 18), Decimal('57.31'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(180, 'cbcaf8a1958271b3a83cd140dcbae468', 4380000000000000000, datetime.datetime(2020, 6, 22, 1, 19), Decimal('76.02'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(181, '286cd7465708364af1ef07b99e2468e1', 568000000000, datetime.datetime(2020, 6, 22, 1, 19), Decimal('67.17'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(182, 'f8643567ea9b25dd315dd4cfd3eb8565', 345000000000000, datetime.datetime(2020, 6, 22, 1, 20), Decimal('57.50'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(183, 'e9779c05df09bb033e6eb5f7a44ebe73', 2580000000000000, datetime.datetime(2020, 6, 22, 1, 20), Decimal('83.67'), 'fraud_Kiehn Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(184, 'a0c94c581e83b20bcfbfbe9876371b4b', 4100000000000000000, datetime.datetime(2020, 6, 22, 1, 22), Decimal('106.66'), 'fraud_Tillman, Dickinson and Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(185, 'a30736c8afb92bf610e3223e2ad5c431', 3590000000000000, datetime.datetime(2020, 6, 22, 1, 22), Decimal('106.82'), 'fraud_Jakubowski Group', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(186, '8f3a455643539b45c86d23654088f015', 6600000000000000, datetime.datetime(2020, 6, 22, 1, 22), Decimal('2.95'), 'fraud_Roob, Conn and Tremblay', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(187, '839bab92f440bac880538e1b52121903', 676000000000, datetime.datetime(2020, 6, 22, 1, 23), Decimal('78.70'), 'fraud_Douglas-White', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(188, 'fb2bbd21986c279407a5441ce3df3923', 4100000000000000, datetime.datetime(2020, 6, 22, 1, 23), Decimal('82.46'), 'fraud_Friesen-Stamm', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(189, '5d78b6c2e1b38b226cbf843645b0842a', 6010000000000000, datetime.datetime(2020, 6, 22, 1, 23), Decimal('316.82'), 'fraud_Smith-Stokes', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(190, '94eda64358c84342f86c0eb3058e6373', 4430000000000000, datetime.datetime(2020, 6, 22, 1, 23), Decimal('19.64'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(191, '9a544a5d0de86591f299ebc408906a4f', 630000000000, datetime.datetime(2020, 6, 22, 1, 23), Decimal('80.61'), 'fraud_Heller-Langosh', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(192, '50f1279f6b1e87d6fdca70778535725f', 213000000000000, datetime.datetime(2020, 6, 22, 1, 24), Decimal('59.11'), 'fraud_Heller-Langosh', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(193, 'ad76c200b5d7ad5cb72b0fa22c8e034c', 4860000000000000, datetime.datetime(2020, 6, 22, 1, 24), Decimal('122.83'), 'fraud_Kuhic Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(194, '32989620d799c3515ab795d205342ce1', 3560000000000000, datetime.datetime(2020, 6, 22, 1, 24), Decimal('5.54'), 'fraud_Dickinson-Rempel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(195, '3c78ba7935533cdb3782b17d013809b4', 6550000000000000, datetime.datetime(2020, 6, 22, 1, 24), Decimal('696.77'), 'fraud_Hudson-Grady', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(196, '0b6050b138aec16772fc1c1897c1219a', 4480000000000000, datetime.datetime(2020, 6, 22, 1, 25), Decimal('4.68'), 'fraud_Miller-Harris', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(197, '55121b67d587f87babce6c57350e004f', 213000000000000, datetime.datetime(2020, 6, 22, 1, 26), Decimal('141.95'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(198, 'f66764f76bdfbfe6ab22b2d06433b7ef', 30300000000000, datetime.datetime(2020, 6, 22, 1, 26), Decimal('70.93'), 'fraud_Hintz-Bruen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(199, '95613e253b3687497c37343788c4976e', 4470000000000000000, datetime.datetime(2020, 6, 22, 1, 27), Decimal('63.51'), 'fraud_Friesen-Stamm', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(200, 'e4f8ef5d7017aa880875fef863da1b50', 60427851591, datetime.datetime(2020, 6, 22, 1, 28), Decimal('98.38'), 'fraud_Fisher Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(201, '04ad11f0695518c577b07ecea5885628', 502000000000, datetime.datetime(2020, 6, 22, 1, 29), Decimal('9.08'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(202, '91f4bcac65d49217f3dd7ead390cade9', 376000000000000, datetime.datetime(2020, 6, 22, 1, 29), Decimal('81.19'), 'fraud_Bailey-Morar', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(203, '32b64bdcad68f7adfdc1fcb6eaf0ac06', 3600000000000000, datetime.datetime(2020, 6, 22, 1, 29), Decimal('62.60'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(204, '7faea786dfd8167321b83a32954fa045', 5460000000000000, datetime.datetime(2020, 6, 22, 1, 29), Decimal('5.86'), 'fraud_Hickle Group', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(205, '2c74a98f96d72d42b863bac9bee1b312', 3510000000000000, datetime.datetime(2020, 6, 22, 1, 29), Decimal('62.83'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(206, 'aaf974604ff02662cb3b25a7838d77c2', 3560000000000000, datetime.datetime(2020, 6, 22, 1, 29), Decimal('72.19'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(207, 'f606b1bf8878805a53b0870e3822b1ba', 2230000000000000, datetime.datetime(2020, 6, 22, 1, 30), Decimal('74.89'), 'fraud_Hoppe, Harris and Bednar', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(208, 'a400e26f888a82f91b1f4e15838a4bfb', 630000000000, datetime.datetime(2020, 6, 22, 1, 30), Decimal('240.16'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(209, '9758c52d5e98c54b57136e57b92f6119', 180000000000000, datetime.datetime(2020, 6, 22, 1, 31), Decimal('7.65'), 'fraud_Tillman, Fritsch and Schmitt', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(210, '2a0fa460856637002b38f1eff744e148', 4290000000000000, datetime.datetime(2020, 6, 22, 1, 31), Decimal('29.35'), 'fraud_Dach-Borer', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(211, '8b862eba4f28184ba55b9aee62de4e6b', 676000000000, datetime.datetime(2020, 6, 22, 1, 32), Decimal('9.39'), 'fraud_Schmeler Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(212, '0223115bc3cf70f6595b08d265a0a093', 4500000000000000000, datetime.datetime(2020, 6, 22, 1, 32), Decimal('285.77'), 'fraud_Cormier, Stracke and Thiel', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(213, 'c82603beb6fa5ff1e080787b2184d451', 5540000000000000, datetime.datetime(2020, 6, 22, 1, 32), Decimal('83.61'), 'fraud_Friesen-Stamm', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(214, '52a69472ef941df4a4b2af40f57faead', 504000000000, datetime.datetime(2020, 6, 22, 1, 34), Decimal('65.23'), 'fraud_Kemmer-Reinger', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(215, '27033e457b6607e7fe479bd4135829bf', 346000000000000, datetime.datetime(2020, 6, 22, 1, 34), Decimal('65.22'), 'fraud_Kling Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(216, 'b08884aba065b5ed6389d978aaef93fb', 375000000000000, datetime.datetime(2020, 6, 22, 1, 34), Decimal('1.42'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(217, '883179294cef1acedd4341984ffb21e7', 30400000000000, datetime.datetime(2020, 6, 22, 1, 35), Decimal('53.56'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(218, '68677387668bcb30cd3d1d6a10cd6bc8', 3510000000000000, datetime.datetime(2020, 6, 22, 1, 35), Decimal('73.79'), 'fraud_Eichmann, Bogan and Rodriguez', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(219, 'c34d5f3bb1b599ad0e20c5c76cdfa1a4', 3530000000000000, datetime.datetime(2020, 6, 22, 1, 35), Decimal('51.91'), 'fraud_Eichmann, Bogan and Rodriguez', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(220, 'ffb96d3fc087f628d14a722f35a7b735', 342000000000000, datetime.datetime(2020, 6, 22, 1, 35), Decimal('46.70'), 'fraud_Morar Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(221, '24f464fda210c5a1ad88539aa2ed2ab4', 4150000000000000, datetime.datetime(2020, 6, 22, 1, 35), Decimal('61.61'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(222, '7ff3037d43d94372f5c901c5c903ba21', 4640000000000, datetime.datetime(2020, 6, 22, 1, 36), Decimal('67.72'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(223, 'f188a31dc576000a27cdcd26dd15d4d3', 4800000000000000000, datetime.datetime(2020, 6, 22, 1, 36), Decimal('47.74'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(224, 'd1071f67e5972b72501750a903482492', 6530000000000000, datetime.datetime(2020, 6, 22, 1, 38), Decimal('6.57'), 'fraud_Pfeffer LLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(225, '1c43f524e0689eb638595b5d26b1434c', 4640000000000000, datetime.datetime(2020, 6, 22, 1, 38), Decimal('115.20'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(226, '5c4511cbfb51ad969bd6ae179c554f83', 4670000000000000, datetime.datetime(2020, 6, 22, 1, 39), Decimal('4.32'), 'fraud_Jacobi and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(227, 'fb70dd560fcc2539b809005a607cfcd0', 6010000000000000, datetime.datetime(2020, 6, 22, 1, 39), Decimal('168.58'), \"fraud_Schamberger-O'Keefe\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(228, '4a24a1228a59a8abe15295ed683afd22', 3560000000000000, datetime.datetime(2020, 6, 22, 1, 39), Decimal('190.63'), 'fraud_Weber and Sons', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(229, 'ae66c9c9075a8bd67d491b677f0956dd', 213000000000000, datetime.datetime(2020, 6, 22, 1, 39), Decimal('142.08'), 'fraud_Murray-Smitham', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(230, 'bb3932438a25731ccc57946ca865fd3b', 4910000000000000000, datetime.datetime(2020, 6, 22, 1, 40), Decimal('65.27'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(231, 'ae393f632f724c96a96bb38c3f70c3c4', 6010000000000000, datetime.datetime(2020, 6, 22, 1, 41), Decimal('54.15'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(232, '932570ba0ca8950b1e5928da8b080111', 30100000000000, datetime.datetime(2020, 6, 22, 1, 41), Decimal('297.99'), 'fraud_Dach-Nader', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(233, '8a1c5a45e8cc479591e170d35ab6a0c3', 3580000000000000, datetime.datetime(2020, 6, 22, 1, 42), Decimal('9.66'), 'fraud_Roob, Conn and Tremblay', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(234, 'b273060751f1e36b0e7d78e6a3f762c8', 348000000000000, datetime.datetime(2020, 6, 22, 1, 43), Decimal('92.52'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(235, '2ceec2c3dcebad3d66d2c0f959788978', 4750000000000, datetime.datetime(2020, 6, 22, 1, 44), Decimal('48.37'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(236, '292747f6bc32d82c4b9c0d4313aec8dc', 6570000000000000, datetime.datetime(2020, 6, 22, 1, 45), Decimal('32.56'), 'fraud_Stiedemann Ltd', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(237, 'eb704dd346e6c2ead4bf56851d231295', 213000000000000, datetime.datetime(2020, 6, 22, 1, 45), Decimal('111.20'), 'fraud_McDermott-Weimann', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(238, '23b906bd953bc20bbfa5d8cafb840d54', 4860000000000000000, datetime.datetime(2020, 6, 22, 1, 46), Decimal('12.21'), 'fraud_Howe Ltd', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(239, '8c312af86b22ebf5b7ee1f41d02c387b', 213000000000000, datetime.datetime(2020, 6, 22, 1, 46), Decimal('103.31'), \"fraud_Schamberger-O'Keefe\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(240, '0e142c66c4f7085a1c5c08fe7af8065d', 30400000000000, datetime.datetime(2020, 6, 22, 1, 46), Decimal('69.52'), 'fraud_Christiansen-Gusikowski', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(241, '0ec4b5634304cdf106e872f6278f5635', 4040000000000000000, datetime.datetime(2020, 6, 22, 1, 46), Decimal('106.68'), 'fraud_Kiehn Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(242, 'dc13ea3ffbcd7d73661a48a881b21fdd', 4480000000000000000, datetime.datetime(2020, 6, 22, 1, 46), Decimal('1.72'), 'fraud_Kerluke PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(243, '37f4ddf1ad0f8623f19c8096c480970a', 3560000000000000, datetime.datetime(2020, 6, 22, 1, 46), Decimal('65.29'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(244, '7229f2a6055d256d44446b927869a93d', 6010000000000000, datetime.datetime(2020, 6, 22, 1, 46), Decimal('83.54'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(245, '236dee04cf00d7823a3d40a9ea3831b7', 3570000000000000, datetime.datetime(2020, 6, 22, 1, 47), Decimal('6.00'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(246, '9431b57effa079f7d81adb06c2fae8da', 676000000000, datetime.datetime(2020, 6, 22, 1, 47), Decimal('39.80'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(247, 'd734a440cbf130444c8ed5660aa0c93f', 4090000000000000000, datetime.datetime(2020, 6, 22, 1, 47), Decimal('140.51'), 'fraud_Kuhic Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(248, 'f4b6be2cb4562fc74ed1c3029a8b4802', 180000000000000, datetime.datetime(2020, 6, 22, 1, 48), Decimal('67.03'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(249, 'fa01ce58c448f5b41501e6a879541f9c', 2260000000000000, datetime.datetime(2020, 6, 22, 1, 48), Decimal('7.18'), 'fraud_Nitzsche, Kessler and Wolff', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(250, 'ad0a61bf8c7737842c13247bb2f92c00', 2660000000000000, datetime.datetime(2020, 6, 22, 1, 48), Decimal('5.58'), 'fraud_Nicolas, Hills and McGlynn', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(251, '4efe965ea44df37859e1080ba253aa6e', 3530000000000000, datetime.datetime(2020, 6, 22, 1, 48), Decimal('24.25'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(252, 'f19c7a8321259f1239240d5bd383911d', 4290000000000000000, datetime.datetime(2020, 6, 22, 1, 49), Decimal('64.95'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(253, '8ebc8d2337353482316bd1716008ab0b', 213000000000000, datetime.datetime(2020, 6, 22, 1, 49), Decimal('237.70'), 'fraud_DuBuque LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(254, 'ad9a2ec96a922dc613551c2509283f53', 3600000000000000, datetime.datetime(2020, 6, 22, 1, 50), Decimal('83.42'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(255, '69353abafca9c3c4560ac63258ffe8e8', 572000000000, datetime.datetime(2020, 6, 22, 1, 51), Decimal('88.42'), 'fraud_Rau and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(256, '9482114516cb7abab94b69e43b7683fb', 3590000000000000, datetime.datetime(2020, 6, 22, 1, 52), Decimal('67.66'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(257, '0e7865dfd5c686134843a6c8879e3add', 4550000000000000, datetime.datetime(2020, 6, 22, 1, 52), Decimal('90.00'), 'fraud_Hackett-Lueilwitz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(258, '90aa4e029f9505981f063a64df839790', 676000000000, datetime.datetime(2020, 6, 22, 1, 54), Decimal('27.97'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(259, 'a6b7abcd743584f3a2c443d29cc402a3', 4070000000000, datetime.datetime(2020, 6, 22, 1, 54), Decimal('2.67'), 'fraud_Klocko LLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(260, '0555924a7ca4b13dcf98e72f6157ff78', 30500000000000, datetime.datetime(2020, 6, 22, 1, 55), Decimal('85.66'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(261, 'e9be3c4f8fda5b2977d43ffba961e065', 38600000000000, datetime.datetime(2020, 6, 22, 1, 55), Decimal('42.37'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(262, '9bbdd4821da59fe4afe8bf96175074ef', 4650000000000000, datetime.datetime(2020, 6, 22, 1, 55), Decimal('4.85'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(263, '09685a00634205b4e777965594bac702', 3510000000000000, datetime.datetime(2020, 6, 22, 1, 56), Decimal('36.67'), 'fraud_Dach-Borer', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(264, '114c635b7087dceede88258b56c503ed', 2660000000000000, datetime.datetime(2020, 6, 22, 1, 56), Decimal('85.53'), 'fraud_Hackett-Lueilwitz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(265, 'ca159184211d9cfc14220ea15bf4258f', 4480000000000000, datetime.datetime(2020, 6, 22, 1, 57), Decimal('3.31'), 'fraud_Bahringer, Schoen and Corkery', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(266, '5dd65abc459bc3289185009bb717b49b', 4210000000000000000, datetime.datetime(2020, 6, 22, 1, 57), Decimal('69.03'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(267, '371ed3b552652bc58066d8e0f734be3d', 4720000000000000000, datetime.datetime(2020, 6, 22, 1, 59), Decimal('2.25'), 'fraud_Barrows PLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(268, 'cad98932e1777ccdac38d921afd20a2c', 371000000000000, datetime.datetime(2020, 6, 22, 2, 0), Decimal('75.53'), 'fraud_Tillman, Dickinson and Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(269, '20fbef8fda728c7637d7b80af1e43cdd', 2230000000000000, datetime.datetime(2020, 6, 22, 2, 0), Decimal('106.55'), 'fraud_Kiehn-Emmerich', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(270, '7800b8a885e04ad7691656e123bdf9cf', 180000000000000, datetime.datetime(2020, 6, 22, 2, 1), Decimal('449.25'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(271, '79a4c24ad09b5290596191a1e808ea1a', 4260000000000, datetime.datetime(2020, 6, 22, 2, 1), Decimal('42.54'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(272, 'e49073c215881c97193882261063b586', 30200000000000, datetime.datetime(2020, 6, 22, 2, 2), Decimal('106.26'), 'fraud_Goldner, Kovacek and Abbott', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(273, '0ec38cb29c3ebf8440d920875e903a1d', 30100000000000, datetime.datetime(2020, 6, 22, 2, 2), Decimal('8.31'), 'fraud_Beier-Hyatt', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(274, 'bfba8708d3fd31e8fe6df6da717da499', 6010000000000000, datetime.datetime(2020, 6, 22, 2, 3), Decimal('70.81'), 'fraud_Trantow PLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(275, '46134bbd274ee245e5745911d459d9c3', 30400000000000, datetime.datetime(2020, 6, 22, 2, 3), Decimal('81.83'), 'fraud_McDermott-Weimann', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(276, '06c5d4c34e8f4ec2be860b484771efd2', 4590000000000000, datetime.datetime(2020, 6, 22, 2, 3), Decimal('92.62'), 'fraud_Vandervort-Funk', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(277, 'f92850dff661bdb6f39ef75bdd15ac70', 4500000000000000000, datetime.datetime(2020, 6, 22, 2, 3), Decimal('224.63'), 'fraud_Goyette Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(278, 'cdc65418395163503ae29b9d07e51c54', 4450000000000000, datetime.datetime(2020, 6, 22, 2, 4), Decimal('4.73'), 'fraud_Goyette Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(279, '750363f98c81163085fc2ff993c3aac2', 30100000000000, datetime.datetime(2020, 6, 22, 2, 5), Decimal('74.80'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(280, '152472d59ea6ba2d51895bfbebdd8622', 630000000000, datetime.datetime(2020, 6, 22, 2, 5), Decimal('6.30'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(281, '447c8ab5f86b2e9c08249f74d120d927', 30200000000000, datetime.datetime(2020, 6, 22, 2, 5), Decimal('79.95'), 'fraud_Dach-Borer', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(282, '4ef50996c58ae64057c531c5d3b468f6', 3600000000000000, datetime.datetime(2020, 6, 22, 2, 5), Decimal('65.67'), \"fraud_O'Keefe-Hudson\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(283, 'b0a75ffe222765d836ad9bb3f42260e3', 3570000000000000, datetime.datetime(2020, 6, 22, 2, 5), Decimal('4.15'), 'fraud_Douglas, Schneider and Turner', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(284, '989611757bb28f42265d2a96056c4f04', 4550000000000000, datetime.datetime(2020, 6, 22, 2, 6), Decimal('15.05'), 'fraud_Cormier LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(285, '5044808175d3fff25297605bc15eb7e7', 213000000000000, datetime.datetime(2020, 6, 22, 2, 6), Decimal('56.16'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(286, '3b79ba17c2169feea3d4442d10a208dd', 180000000000000, datetime.datetime(2020, 6, 22, 2, 7), Decimal('70.68'), 'fraud_Murray Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(287, 'e0a3fdb013d336189eb5312ab4f5b09b', 4170000000000000, datetime.datetime(2020, 6, 22, 2, 8), Decimal('70.63'), 'fraud_Lockman, West and Runte', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(288, 'be0c47d618aab5ce33d0b303ae67931d', 4290000000000, datetime.datetime(2020, 6, 22, 2, 9), Decimal('71.43'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(289, '4155796b05886bafe5a034984c49598c', 6550000000000000, datetime.datetime(2020, 6, 22, 2, 9), Decimal('8.55'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(290, '5330cdbfefa3b710025312c4e603fd33', 4540000000000, datetime.datetime(2020, 6, 22, 2, 9), Decimal('2.53'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(291, 'cdbe7dbf2b049e7e9f82170b96b5c864', 6520000000000000, datetime.datetime(2020, 6, 22, 2, 10), Decimal('70.30'), 'fraud_Kling Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(292, 'a82ba237c31e8cf9a5ce351dc5a1adea', 6550000000000000, datetime.datetime(2020, 6, 22, 2, 11), Decimal('92.45'), 'fraud_Kiehn Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(293, 'a2466d835cd9041277d719c69b5016c7', 4170000000000000, datetime.datetime(2020, 6, 22, 2, 11), Decimal('64.66'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(294, 'c5dffd745e3d89a4347b0b8c59b216a9', 3520000000000000, datetime.datetime(2020, 6, 22, 2, 11), Decimal('106.21'), 'fraud_Raynor, Reinger and Hagenes', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(295, '36637fdcb03506a3dbf7f944a8b79277', 3500000000000000, datetime.datetime(2020, 6, 22, 2, 11), Decimal('56.88'), 'fraud_Friesen-Stamm', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(296, 'd45397b517051ddf3e982d1350c693ec', 4450000000000000, datetime.datetime(2020, 6, 22, 2, 12), Decimal('99.54'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(297, '84be1d3f1ced4088c762c32cc84c8213', 4240000000000000, datetime.datetime(2020, 6, 22, 2, 12), Decimal('3.97'), 'fraud_Goyette Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(298, '82f18af5f69a34ae938c17d35774453c', 4170000000000, datetime.datetime(2020, 6, 22, 2, 13), Decimal('5.21'), 'fraud_Pacocha-Bauch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(299, '13c3183771eb475c14f2f80b08c1bbd5', 213000000000000, datetime.datetime(2020, 6, 22, 2, 13), Decimal('49.42'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(300, '7b256e6b4edade4ba07fb60bc14f860c', 6540000000000000, datetime.datetime(2020, 6, 22, 2, 14), Decimal('73.10'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(301, 'b3f81f9ed2167159f79d6324707ea064', 4980000000000, datetime.datetime(2020, 6, 22, 2, 14), Decimal('14.13'), 'fraud_Durgan-Auer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(302, '3735377eccdca8720673fe506f3016f2', 4420000000000000, datetime.datetime(2020, 6, 22, 2, 15), Decimal('74.97'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(303, 'b2394e10cf51174d25496cb349d2f5a9', 30200000000000, datetime.datetime(2020, 6, 22, 2, 16), Decimal('92.12'), 'fraud_Kutch LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(304, '0393a5a4221837364caabb36454c5fb3', 342000000000000, datetime.datetime(2020, 6, 22, 2, 16), Decimal('95.03'), 'fraud_Kutch LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(305, '153397442f95e64c6f6950adc7a72b4e', 345000000000000, datetime.datetime(2020, 6, 22, 2, 16), Decimal('2.71'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(306, '393f0b31bbb088f4d7ad2399f5ed126a', 4670000000000000, datetime.datetime(2020, 6, 22, 2, 17), Decimal('4.39'), 'fraud_Terry-Huel', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(307, '1b1bdb6bf31570ba7da4cc0bbbf5de9f', 6540000000000000, datetime.datetime(2020, 6, 22, 2, 17), Decimal('54.02'), 'fraud_Harber Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(308, '6261a28dd19e3dda1805c157f614a4e7', 30300000000000, datetime.datetime(2020, 6, 22, 2, 18), Decimal('139.99'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(309, '0edd65ddc126d96aba1ea35f992a6cde', 180000000000000, datetime.datetime(2020, 6, 22, 2, 18), Decimal('69.41'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(310, '78dc4ea7c2a1231ed29e58bff4cd798e', 213000000000000, datetime.datetime(2020, 6, 22, 2, 20), Decimal('115.43'), 'fraud_Huel, Hammes and Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(311, '01ecb8879912038788856ff1aac163bf', 4450000000000000, datetime.datetime(2020, 6, 22, 2, 20), Decimal('76.14'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(312, '2a881e50b5a1ce20063454d80b1e595c', 346000000000000, datetime.datetime(2020, 6, 22, 2, 21), Decimal('8.43'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(313, '780f2b390cdeb4305478232608b77a07', 344000000000000, datetime.datetime(2020, 6, 22, 2, 22), Decimal('11.09'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(314, '01021147a224fbc0d92227a51ff8a6eb', 3590000000000000, datetime.datetime(2020, 6, 22, 2, 22), Decimal('67.90'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(315, '9bb8215e0117eb8aee5d021043f97b0a', 4940000000000000, datetime.datetime(2020, 6, 22, 2, 22), Decimal('197.35'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(316, 'e5fcf3c1f2bc221796c193d78a29ec89', 213000000000000, datetime.datetime(2020, 6, 22, 2, 22), Decimal('238.46'), 'fraud_McGlynn-Jaskolski', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(317, '44ef398f70ce0fad75916e4c9af0f9b0', 4070000000000000, datetime.datetime(2020, 6, 22, 2, 22), Decimal('2.16'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(318, '982b0baa654e7fc8665d697a97f5e1ca', 573000000000, datetime.datetime(2020, 6, 22, 2, 22), Decimal('5.91'), 'fraud_Denesik and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(319, '25976d29ee7f454646a403d845e596ac', 373000000000000, datetime.datetime(2020, 6, 22, 2, 23), Decimal('164.43'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(320, '67bc8e5c3e2a9daf3408c12d97d58c1d', 4730000000000000, datetime.datetime(2020, 6, 22, 2, 23), Decimal('21.22'), 'fraud_Pacocha-Bauch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(321, '6640a2c6549f562eaeb34dbdc5f701bc', 213000000000000, datetime.datetime(2020, 6, 22, 2, 24), Decimal('58.91'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(322, '6d35ecb652672c0ffdb685dbd544f01c', 3520000000000000, datetime.datetime(2020, 6, 22, 2, 25), Decimal('9.23'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(323, 'c48c2b5885025d14e1be48b4bede5dfa', 4460000000000, datetime.datetime(2020, 6, 22, 2, 26), Decimal('84.40'), 'fraud_Ferry, Reichel and DuBuque', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(324, 'd403bca8e292cc9438ccf39f56c56c0f', 2240000000000000, datetime.datetime(2020, 6, 22, 2, 26), Decimal('112.97'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(325, '9d73b7be8774586b8b56dcfe37e2c326', 5000000000000000, datetime.datetime(2020, 6, 22, 2, 27), Decimal('32.13'), 'fraud_Miller-Harris', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(326, '4bf2e36f485a80c20060811d85afc92e', 4490000000000000000, datetime.datetime(2020, 6, 22, 2, 27), Decimal('222.15'), 'fraud_Weimann, Kuhic and Beahan', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(327, '891ccd0e08d6c12d3a71f28e671cf054', 630000000000, datetime.datetime(2020, 6, 22, 2, 28), Decimal('1.22'), 'fraud_Flatley-Durgan', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(328, 'd87873ce51ee8ddd29258e2074933f3a', 6590000000000000, datetime.datetime(2020, 6, 22, 2, 28), Decimal('102.57'), 'fraud_Kuhic Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(329, 'c5f00361f66f8cee1f10e8643e9421c7', 213000000000000, datetime.datetime(2020, 6, 22, 2, 28), Decimal('130.44'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(330, 'e1d878e86624225cde4d0129e8083b7b', 3600000000000000, datetime.datetime(2020, 6, 22, 2, 28), Decimal('63.81'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(331, 'ad87dcd89915bed53435f6d2ea229e31', 3600000000000000, datetime.datetime(2020, 6, 22, 2, 29), Decimal('69.94'), 'fraud_Rodriguez Group', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(332, '5cbd028e7dfe9778c0c4e74b4bef5cc4', 30100000000000, datetime.datetime(2020, 6, 22, 2, 29), Decimal('75.51'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(333, '1c1d5afc6c306695a929a042d6cae643', 4970000000000000000, datetime.datetime(2020, 6, 22, 2, 30), Decimal('31.55'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(334, '296a2f11ba7658b13971820657046d1e', 4950000000000000, datetime.datetime(2020, 6, 22, 2, 32), Decimal('73.26'), 'fraud_Kutch-Hegmann', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(335, '98fde874e89a2d37777bb769697f3a51', 374000000000000, datetime.datetime(2020, 6, 22, 2, 32), Decimal('36.33'), 'fraud_Stokes, Christiansen and Sipes', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(336, 'e1d7214d2e6ce4e27b649fef4422a7b0', 377000000000000, datetime.datetime(2020, 6, 22, 2, 34), Decimal('112.95'), 'fraud_Heidenreich PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(337, '05746ead9e4969d1912d3f5e81661c96', 372000000000000, datetime.datetime(2020, 6, 22, 2, 34), Decimal('3.19'), 'fraud_Smith-Stokes', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(338, 'd81a1fe606a3af1e242a9d9a4e15e7fb', 30600000000000, datetime.datetime(2020, 6, 22, 2, 34), Decimal('127.77'), 'fraud_Bauch-Raynor', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(339, '8df567369b226d647a1b9f862c4ae450', 6010000000000000, datetime.datetime(2020, 6, 22, 2, 34), Decimal('74.88'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(340, '4e64c3efc9a309a1fcb47212211ec8a8', 5360000000000000, datetime.datetime(2020, 6, 22, 2, 35), Decimal('71.67'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(341, 'de175d7dbe2ee9b26d8a3ba6f18717f8', 4220000000000000000, datetime.datetime(2020, 6, 22, 2, 35), Decimal('93.02'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(342, 'ecf985d5c045e387a5c3f394771b3e36', 342000000000000, datetime.datetime(2020, 6, 22, 2, 37), Decimal('39.45'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(343, '40bdf4517fcf76da9c86b27c1502d717', 376000000000000, datetime.datetime(2020, 6, 22, 2, 37), Decimal('5.96'), 'fraud_Turcotte, McKenzie and Koss', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(344, 'd1fe7d69196b980b7505b41d214a9d4e', 180000000000000, datetime.datetime(2020, 6, 22, 2, 40), Decimal('40.04'), 'fraud_Runolfsson and Sons', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(345, '0c63b1da6665a2efb4875b3c68067ceb', 3510000000000000, datetime.datetime(2020, 6, 22, 2, 40), Decimal('53.77'), 'fraud_Ortiz Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(346, 'b4720888f3d7497a9b04003abe6074e7', 4680000000000, datetime.datetime(2020, 6, 22, 2, 42), Decimal('98.75'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(347, '87d4480f8cbfba2cb658e21791689098', 376000000000000, datetime.datetime(2020, 6, 22, 2, 42), Decimal('9.10'), 'fraud_Huel-Langworth', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(348, '7ad708764d30eac8a8dc61fce2b911b8', 30500000000000, datetime.datetime(2020, 6, 22, 2, 43), Decimal('30.31'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(349, '32be1101361d36d126c378467c9c6f96', 342000000000000, datetime.datetime(2020, 6, 22, 2, 43), Decimal('23.98'), 'fraud_Zemlak Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(350, 'f709f0f1bf239ccb93ede92c7f3213d3', 6010000000000000, datetime.datetime(2020, 6, 22, 2, 43), Decimal('6.85'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(351, '2c7f016d8986daa7efc1c16d6581b25f', 180000000000000, datetime.datetime(2020, 6, 22, 2, 43), Decimal('63.61'), 'fraud_Wuckert-Walter', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(352, 'de3ebdf5785238c61ebc6f22f393ce6f', 4250000000000, datetime.datetime(2020, 6, 22, 2, 45), Decimal('48.91'), 'fraud_Cremin, Hamill and Reichel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(353, '4b8e5750439ac71088c9965e8da533d9', 4290000000000, datetime.datetime(2020, 6, 22, 2, 46), Decimal('97.94'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(354, 'e3066e979069fa9b066d2fa75325d65b', 2720000000000000, datetime.datetime(2020, 6, 22, 2, 46), Decimal('1.48'), 'fraud_Lesch Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(355, 'fddc6f157539a8d231dcd0043af7dc36', 6010000000000000, datetime.datetime(2020, 6, 22, 2, 46), Decimal('44.26'), 'fraud_Stokes, Christiansen and Sipes', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(356, '8400988c5f8b36e8efcbdd6445725f73', 4600000000000000, datetime.datetime(2020, 6, 22, 2, 46), Decimal('46.46'), 'fraud_Swift, Bradtke and Marquardt', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(357, '1424194f3847e2921587a4eaad681896', 4070000000000, datetime.datetime(2020, 6, 22, 2, 48), Decimal('126.76'), 'fraud_Vandervort-Funk', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(358, 'f6df031499e1cbe615189ef1f469faee', 376000000000000, datetime.datetime(2020, 6, 22, 2, 48), Decimal('95.23'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(359, 'aac1a337636a25971a8d9f0f5308d26e', 6550000000000000, datetime.datetime(2020, 6, 22, 2, 49), Decimal('36.79'), 'fraud_Tromp, Kerluke and Glover', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(360, 'c9788e487b70f529bcb0e087d0b8694c', 348000000000000, datetime.datetime(2020, 6, 22, 2, 49), Decimal('24.28'), 'fraud_Kemmer-Buckridge', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(361, '798002efabc2d27d1198cea647f67146', 30100000000000, datetime.datetime(2020, 6, 22, 2, 50), Decimal('75.06'), 'fraud_Ruecker Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(362, 'cf48632b5153729f5c131e3ed96eac08', 676000000000, datetime.datetime(2020, 6, 22, 2, 51), Decimal('55.39'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(363, '9c039b788526deb135dd9ee2f0db7cea', 2290000000000000, datetime.datetime(2020, 6, 22, 2, 51), Decimal('1.44'), 'fraud_Miller-Harris', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(364, '1f8373099603b45a9dd351d287cee962', 36100000000000, datetime.datetime(2020, 6, 22, 2, 51), Decimal('6.37'), 'fraud_Jewess LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(365, 'c862c4dc8a36dcc4f347d37671763386', 2580000000000000, datetime.datetime(2020, 6, 22, 2, 52), Decimal('79.99'), 'fraud_Bernhard-Lesch', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(366, '35f9824d29df9488a9a6475619f8330c', 30200000000000, datetime.datetime(2020, 6, 22, 2, 54), Decimal('82.94'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(367, '082a8e06d746642bac84a3c1163d36aa', 372000000000000, datetime.datetime(2020, 6, 22, 2, 54), Decimal('44.08'), 'fraud_Heller-Langosh', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(368, '6d4611f5d7acbfe2b8ee5600a1c3f976', 3540000000000000, datetime.datetime(2020, 6, 22, 2, 55), Decimal('174.40'), \"fraud_Deckow-O'Conner\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(369, '1aa40f6af7b1f444ed326869292c1aec', 378000000000000, datetime.datetime(2020, 6, 22, 2, 55), Decimal('3.92'), 'fraud_Douglas-White', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(370, 'c6e4e20ffd592dde658b68af18c97ffc', 38900000000000, datetime.datetime(2020, 6, 22, 2, 55), Decimal('102.23'), 'fraud_Kiehn Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(371, 'd2b1bf9ffed19fdbf547782e607a4a01', 36100000000000, datetime.datetime(2020, 6, 22, 2, 56), Decimal('168.40'), 'fraud_Heller, Gutmann and Zieme', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(372, 'c66d0cd053cd7d68403da38837840df3', 4990000000000000000, datetime.datetime(2020, 6, 22, 2, 56), Decimal('390.20'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(373, 'f64515dc33bb0c02d6029ccad1ac7356', 4470000000000, datetime.datetime(2020, 6, 22, 2, 56), Decimal('73.61'), 'fraud_Robel, Cummerata and Prosacco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(374, '06b1c1910bc0abaf79a85dd523f673ac', 5130000000000000, datetime.datetime(2020, 6, 22, 2, 57), Decimal('83.49'), 'fraud_Rowe, Batz and Goodwin', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(375, 'c85c313547d3a4a406d79daa345fc2ae', 584000000000, datetime.datetime(2020, 6, 22, 2, 57), Decimal('57.23'), 'fraud_Kuhn Group', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(376, '9f3b7dc44a162c08d422ca65ac772bad', 4960000000000000000, datetime.datetime(2020, 6, 22, 2, 57), Decimal('66.62'), 'fraud_Lind, Huel and McClure', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(377, 'e189f1841a6e0e2e8eb9b0741ee1485a', 3540000000000000, datetime.datetime(2020, 6, 22, 2, 57), Decimal('56.24'), 'fraud_Roob LLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(378, '9a778f9f07e235e7035124a63355c292', 3580000000000000, datetime.datetime(2020, 6, 22, 2, 58), Decimal('59.68'), 'fraud_Kilback LLC', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(379, '5da3dcc4aed391b5ae008d6763333b3a', 3510000000000000, datetime.datetime(2020, 6, 22, 2, 59), Decimal('92.54'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(380, 'd5955ae825ca830ab251ee4e3b536856', 4910000000000000, datetime.datetime(2020, 6, 22, 2, 59), Decimal('177.62'), 'fraud_Halvorson Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(381, '4abab172e87cc3dac400439de9f8b8b4', 4630000000000000, datetime.datetime(2020, 6, 22, 2, 59), Decimal('47.19'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(382, '7a51bde59ea3494a736858910fd748dd', 4710000000000000, datetime.datetime(2020, 6, 22, 3, 0), Decimal('116.59'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(383, '217336ad36387caf26d45f81e939ad44', 4180000000000000, datetime.datetime(2020, 6, 22, 3, 1), Decimal('45.89'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(384, '28783e525a260811546dcc2a5783683f', 502000000000, datetime.datetime(2020, 6, 22, 3, 1), Decimal('109.08'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(385, 'e4424508e0d5ff5eb0f95963904e237a', 3550000000000000, datetime.datetime(2020, 6, 22, 3, 2), Decimal('81.65'), 'fraud_VonRueden Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(386, 'e9052493347eed15177eddfdeea5ce59', 371000000000000, datetime.datetime(2020, 6, 22, 3, 2), Decimal('46.21'), 'fraud_Wolf Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(387, '3db388e171b3d0938f80203bf9790efb', 4750000000000, datetime.datetime(2020, 6, 22, 3, 3), Decimal('64.82'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(388, 'ce56d29a960d7032e2175519162a6502', 346000000000000, datetime.datetime(2020, 6, 22, 3, 4), Decimal('56.42'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(389, 'bf4e6676aeecde02ba15c1c9727f7740', 30400000000000, datetime.datetime(2020, 6, 22, 3, 5), Decimal('56.64'), 'fraud_Ferry, Reichel and DuBuque', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(390, 'b676422226da0e6dbffa7f5d8d509c67', 568000000000, datetime.datetime(2020, 6, 22, 3, 5), Decimal('60.29'), 'fraud_Boehm, Predovic and Reinger', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(391, 'edbc694b9a938bd211fb89511d5ed0f8', 60495593109, datetime.datetime(2020, 6, 22, 3, 5), Decimal('75.95'), 'fraud_Kutch and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(392, '2d399acc80233111da507523a0123adc', 30100000000000, datetime.datetime(2020, 6, 22, 3, 5), Decimal('57.26'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(393, 'fbdcabe1a8e0fe48e68ffa1a6a8a1318', 30300000000000, datetime.datetime(2020, 6, 22, 3, 5), Decimal('108.62'), 'fraud_Hackett-Lueilwitz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(394, '2ba9b468cffd02656a8efa9f31830f88', 2250000000000000, datetime.datetime(2020, 6, 22, 3, 6), Decimal('116.97'), 'fraud_McDermott-Weimann', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(395, '535a72c068afc0d0a1a5725e72ffa57d', 213000000000000, datetime.datetime(2020, 6, 22, 3, 6), Decimal('3.78'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(396, '92506577a1c3426eaae713db151e393e', 374000000000000, datetime.datetime(2020, 6, 22, 3, 6), Decimal('72.20'), 'fraud_Gutmann Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(397, '233a9042e9f05428ec0ecdd089f76f5f', 4990000000000, datetime.datetime(2020, 6, 22, 3, 7), Decimal('54.36'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(398, '09b70451b69367399cc9a5c9de346cca', 4980000000000, datetime.datetime(2020, 6, 22, 3, 7), Decimal('2.30'), 'fraud_Herman Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(399, '6993d0ecd27cd7ee8609473562f5f5d3', 3600000000000000, datetime.datetime(2020, 6, 22, 3, 7), Decimal('87.34'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(400, 'bb2090aa0c38cfa1ad76daa57cea4bdf', 3550000000000000, datetime.datetime(2020, 6, 22, 3, 8), Decimal('76.60'), 'fraud_Rau and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(401, '913ee98455379997bdf09244118c262c', 3530000000000000, datetime.datetime(2020, 6, 22, 3, 8), Decimal('52.58'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(402, '7d8e8436ad23cc2e67a952135c7ae116', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 8), Decimal('33.78'), 'fraud_Hintz-Bruen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(403, '32d5060c0d4626ed5c80fa8ad7a66d9a', 213000000000000, datetime.datetime(2020, 6, 22, 3, 9), Decimal('90.35'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(404, 'a664bc3000ff0155cc216b7447c93ada', 343000000000000, datetime.datetime(2020, 6, 22, 3, 9), Decimal('103.57'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(405, '4504c25566464eb4b279bc21d94689f5', 4770000000000000000, datetime.datetime(2020, 6, 22, 3, 9), Decimal('66.41'), 'fraud_Marks Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(406, '4028c74bb44760f93609d5fcb19954a9', 4390000000000000000, datetime.datetime(2020, 6, 22, 3, 10), Decimal('54.70'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(407, 'bc4870968658a61db7374f8d2977bcfe', 5290000000000000, datetime.datetime(2020, 6, 22, 3, 12), Decimal('64.99'), 'fraud_Brekke and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(408, '8d99c076569f62e022684d5018ef33e1', 30600000000000, datetime.datetime(2020, 6, 22, 3, 12), Decimal('46.15'), 'fraud_Adams, Kovacek and Kuhlman', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(409, '4559a12cf43466479d14193da3be3cea', 568000000000, datetime.datetime(2020, 6, 22, 3, 12), Decimal('200.89'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(410, '98a9af09952d441612d417937e4c72e5', 3580000000000000, datetime.datetime(2020, 6, 22, 3, 12), Decimal('60.27'), 'fraud_Kutch LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(411, 'd5f7c3aac072ce41ad37fc461690652a', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 13), Decimal('35.17'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(412, 'df7864185b9d029c610bf1f69e05ed0a', 4170000000000, datetime.datetime(2020, 6, 22, 3, 14), Decimal('104.84'), 'fraud_Lehner, Reichert and Mills', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(413, '74bff79e0ad9dbcc8e7bba875fe20521', 2280000000000000, datetime.datetime(2020, 6, 22, 3, 14), Decimal('63.67'), 'fraud_Tillman, Dickinson and Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(414, '715b8ad4084219e7ffcd8a1758012d18', 340000000000000, datetime.datetime(2020, 6, 22, 3, 14), Decimal('11.59'), 'fraud_Wilkinson Ltd', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(415, '0f721eb9293c17e21e1777463bd8b4fc', 3590000000000000, datetime.datetime(2020, 6, 22, 3, 14), Decimal('70.75'), 'fraud_Maggio-Fahey', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(416, '7d3bc58151082075c28eebf431e8ffac', 36700000000000, datetime.datetime(2020, 6, 22, 3, 15), Decimal('52.57'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(417, '9e5be12768f0e1337df14aa67fb3e482', 4250000000000, datetime.datetime(2020, 6, 22, 3, 17), Decimal('74.26'), 'fraud_Tillman, Dickinson and Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(418, '47fbe3f5492718bb6cfe6b1dea6c695e', 630000000000, datetime.datetime(2020, 6, 22, 3, 17), Decimal('91.75'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(419, '1cccf4c01047f0ce60809c4ee279beb9', 676000000000, datetime.datetime(2020, 6, 22, 3, 17), Decimal('89.46'), 'fraud_Raynor, Reinger and Hagenes', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(420, '095043dc312dadac9d27f26dbc61915c', 180000000000000, datetime.datetime(2020, 6, 22, 3, 17), Decimal('171.78'), 'fraud_Lockman, West and Runte', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(421, 'c5130be5b27cec594dd5fa579e36e42a', 30000000000000, datetime.datetime(2020, 6, 22, 3, 18), Decimal('132.25'), 'fraud_Nitzsche, Kessler and Wolff', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(422, '21b7a211f610dd71b33384bede4e9d93', 3560000000000000, datetime.datetime(2020, 6, 22, 3, 19), Decimal('121.71'), 'fraud_Heller, Gutmann and Zieme', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(423, '29c791b5e7799c38f2b132e903f2c2cb', 3510000000000000, datetime.datetime(2020, 6, 22, 3, 19), Decimal('12.84'), 'fraud_Herman Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(424, '0e71ff608d84980b7a33de33111d60b8', 2380000000000000, datetime.datetime(2020, 6, 22, 3, 19), Decimal('3.57'), 'fraud_Howe Ltd', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(425, '03da1263fd6259ebcdc53afbeb089594', 30500000000000, datetime.datetime(2020, 6, 22, 3, 19), Decimal('52.55'), 'fraud_Kling Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(426, '24117c9bb1099ff9d3a95a071c3297b6', 3600000000000000, datetime.datetime(2020, 6, 22, 3, 19), Decimal('64.29'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(427, '4b9be52ac26aa474e9060bdf7dd83571', 2710000000000000, datetime.datetime(2020, 6, 22, 3, 19), Decimal('22.25'), 'fraud_Schroeder, Hauck and Treutel', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(428, '3103645efe532d90b745e123515c6607', 2710000000000000, datetime.datetime(2020, 6, 22, 3, 19), Decimal('68.84'), 'fraud_Tromp, Kerluke and Glover', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(429, '76e17de8cabc341fabe3912fb21d2be0', 676000000000, datetime.datetime(2020, 6, 22, 3, 20), Decimal('95.62'), 'fraud_Collier Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(430, '818a7e10e0d42d216f6e5b8d27294c46', 341000000000000, datetime.datetime(2020, 6, 22, 3, 20), Decimal('8.61'), 'fraud_Spencer-Runolfsson', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(431, 'f9b14bbb407d2fe42864671e11f379a2', 373000000000000, datetime.datetime(2020, 6, 22, 3, 20), Decimal('60.70'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(432, '28e37675c68ca36fe1c279d651e7001c', 4430000000000, datetime.datetime(2020, 6, 22, 3, 21), Decimal('58.48'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(433, '5b0f6327129de1c595c2c83afcfd6539', 3510000000000000, datetime.datetime(2020, 6, 22, 3, 21), Decimal('875.04'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(434, '82aa51847507208a512f97e79421988a', 4820000000000000, datetime.datetime(2020, 6, 22, 3, 22), Decimal('50.77'), 'fraud_Greenholt, Jacobi and Gleason', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(435, '085228979de4fe9f1fdf0f4cbe66357c', 3580000000000000, datetime.datetime(2020, 6, 22, 3, 22), Decimal('64.04'), 'fraud_Mraz-Herzog', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(436, '7e6b5164e2d2877b723c568166469f50', 4260000000000000, datetime.datetime(2020, 6, 22, 3, 23), Decimal('46.14'), 'fraud_Kutch, Steuber and Gerhold', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(437, '3d44a04df6cfc436979b99cf1c3dbea5', 3540000000000000, datetime.datetime(2020, 6, 22, 3, 23), Decimal('9.32'), 'fraud_Stehr, Jewess and Schimmel', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(438, 'f5e607cb00ed9926334429a02c7ec212', 3530000000000000, datetime.datetime(2020, 6, 22, 3, 23), Decimal('88.67'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(439, '89a1f17c1d6510a7984e53fa137c0c8f', 4790000000000000000, datetime.datetime(2020, 6, 22, 3, 24), Decimal('48.85'), 'fraud_Ortiz Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(440, '5cb5e3f55f8138ce5c66c5ba7473f844', 4120000000000000, datetime.datetime(2020, 6, 22, 3, 25), Decimal('4.72'), 'fraud_Willms, Kris and Bergnaum', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(441, '976749837f34e587453fe05f5ee53307', 4220000000000000000, datetime.datetime(2020, 6, 22, 3, 26), Decimal('9.03'), 'fraud_Jacobi and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(442, 'f21f60bec6155eb5fbd2fcf004713d88', 4540000000000000000, datetime.datetime(2020, 6, 22, 3, 26), Decimal('66.47'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(443, '9017f75417296b260f0e3815a0dcda9b', 3550000000000000, datetime.datetime(2020, 6, 22, 3, 27), Decimal('7.03'), 'fraud_Mayert Group', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(444, 'd739c24f201e16c19861bcbddd68123b', 4510000000000000000, datetime.datetime(2020, 6, 22, 3, 27), Decimal('112.28'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(445, 'bb8729f5047f6edb193f2941674f243d', 4670000000000000, datetime.datetime(2020, 6, 22, 3, 27), Decimal('3.01'), 'fraud_Pfeffer and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(446, 'c61df3c6d1847c9b37427389daaf9ac8', 4910000000000000000, datetime.datetime(2020, 6, 22, 3, 28), Decimal('39.26'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(447, 'a48ba26a6e3a9f6dc306c6dd13b4c3a8', 4230000000000000000, datetime.datetime(2020, 6, 22, 3, 28), Decimal('71.60'), 'fraud_Cummings LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(448, '63a5928b85033168ab3fa40752d238c3', 3580000000000000, datetime.datetime(2020, 6, 22, 3, 28), Decimal('1.40'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(449, '741d47d53b8088152d40dc08df2f5743', 3520000000000000, datetime.datetime(2020, 6, 22, 3, 28), Decimal('195.12'), \"fraud_Deckow-O'Conner\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(450, '888bff00067d585656777e2d8bb64dab', 3550000000000000, datetime.datetime(2020, 6, 22, 3, 30), Decimal('68.36'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(451, 'c83930bbdae9f25725ec46043c1d6e0a', 30200000000000, datetime.datetime(2020, 6, 22, 3, 30), Decimal('46.74'), 'fraud_Wiegand-Lowe', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(452, '92d8159fb6bab7314e24e2185d972255', 213000000000000, datetime.datetime(2020, 6, 22, 3, 30), Decimal('91.92'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(453, '65123a82253b484381a0c4194c97134b', 213000000000000, datetime.datetime(2020, 6, 22, 3, 31), Decimal('134.86'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(454, 'b2665f1ada7ee5b0cfeb9bed2dbb4103', 3580000000000000, datetime.datetime(2020, 6, 22, 3, 31), Decimal('72.18'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(455, 'aad4e723e7560e08caa631aba8dfb189', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 31), Decimal('105.60'), 'fraud_Dickinson-Rempel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(456, 'c12a50a17690b3806bd208ac304d950e', 3580000000000000, datetime.datetime(2020, 6, 22, 3, 32), Decimal('4.72'), 'fraud_Welch Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(457, '1946b20bc02ad7da4ec6ea6fc603d772', 4200000000000, datetime.datetime(2020, 6, 22, 3, 32), Decimal('100.96'), 'fraud_Bailey-Morar', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(458, '41f3915fcc05643ccd1a6e2b67932e37', 2720000000000000, datetime.datetime(2020, 6, 22, 3, 33), Decimal('73.52'), 'fraud_Heidenreich PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(459, '589eac868a72f88a57adcfd7f1ed675a', 4510000000000000, datetime.datetime(2020, 6, 22, 3, 35), Decimal('76.75'), 'fraud_Paucek-Wiza', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(460, '03f2f499c289afbaa30b9b96b691a436', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 35), Decimal('61.26'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(461, 'bf07e45ea88cc491f6280c4795e68908', 30300000000000, datetime.datetime(2020, 6, 22, 3, 36), Decimal('47.58'), 'fraud_Conroy-Cruickshank', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(462, '276d1dc6a6345adfb0c318fc19e75c55', 4210000000000000000, datetime.datetime(2020, 6, 22, 3, 37), Decimal('60.29'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(463, '19a5b7a7979ae22b078553524c6f29b0', 346000000000000, datetime.datetime(2020, 6, 22, 3, 37), Decimal('226.66'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(464, 'a2f22817e6d362c8815e65a88095938a', 4730000000000000, datetime.datetime(2020, 6, 22, 3, 37), Decimal('3.94'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(465, 'a7ea51d482b267136a063dc8fa75b900', 630000000000, datetime.datetime(2020, 6, 22, 3, 38), Decimal('129.56'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(466, 'f57e9635b95cc3de0701d6827b80baca', 4810000000000000000, datetime.datetime(2020, 6, 22, 3, 38), Decimal('112.47'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(467, '255e6b408095d51d6c42130a2d1a080c', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 38), Decimal('60.74'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(468, '3d35eb2d02e753357450b025b96a69d7', 380000000000000, datetime.datetime(2020, 6, 22, 3, 39), Decimal('4.86'), 'fraud_Nader-Heller', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(469, '4f74d21c7d5aa073d715b2571015be7e', 4640000000000, datetime.datetime(2020, 6, 22, 3, 39), Decimal('136.19'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(470, 'f1f0a2421e547b7e2a79ab6e260a49bb', 3540000000000000, datetime.datetime(2020, 6, 22, 3, 39), Decimal('45.04'), 'fraud_Dach-Borer', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(471, '2438d19250b2501a4953517c72c14449', 371000000000000, datetime.datetime(2020, 6, 22, 3, 39), Decimal('64.60'), 'fraud_Robel, Cummerata and Prosacco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(472, 'b4459b90fb2995d89e5ee2808eff5397', 2290000000000000, datetime.datetime(2020, 6, 22, 3, 41), Decimal('59.50'), 'fraud_Kutch and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(473, '8332b84f03fb77a6263c4b140555a1ba', 180000000000000, datetime.datetime(2020, 6, 22, 3, 41), Decimal('114.67'), \"fraud_O'Hara-Wilderman\", 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(474, 'a4596d72223822f86224574583b8541f', 4170000000000000, datetime.datetime(2020, 6, 22, 3, 41), Decimal('65.91'), 'fraud_Wolf Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(475, 'da47e6a43d444c2954fa9368557682f9', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 41), Decimal('35.10'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(476, '350e9a97bc81cf48c2f1b1bfb3bd3ea6', 2300000000000000, datetime.datetime(2020, 6, 22, 3, 41), Decimal('56.75'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(477, '30a05d0a40b7af56913ad9b69dd7cb16', 3570000000000000, datetime.datetime(2020, 6, 22, 3, 41), Decimal('11.19'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(478, 'c78ff7c014350de3ff1d43f0874d72fc', 2360000000000000, datetime.datetime(2020, 6, 22, 3, 42), Decimal('88.48'), 'fraud_Roob LLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(479, '33f459d747d0728de9b22ec38806c85a', 6570000000000000, datetime.datetime(2020, 6, 22, 3, 42), Decimal('104.18'), 'fraud_Rau and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(480, '045356a9e1e61707c3e0c82e5bf181dd', 4430000000000000, datetime.datetime(2020, 6, 22, 3, 42), Decimal('98.91'), 'fraud_Monahan, Bogisich and Ledner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(481, '8b42fd0c25c1c75985e6eacca1848fa1', 4060000000000000000, datetime.datetime(2020, 6, 22, 3, 43), Decimal('38.80'), 'fraud_Mayert Group', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(482, 'b44b1f829123c464fc15c5deeb5cc6b6', 4310000000000000, datetime.datetime(2020, 6, 22, 3, 43), Decimal('40.60'), 'fraud_Eichmann-Russel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(483, 'c6be74cd0e59ff2c5984baca7ca5089a', 3570000000000000, datetime.datetime(2020, 6, 22, 3, 43), Decimal('64.21'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(484, 'a3049427c179868a250b2072201d0cd4', 345000000000000, datetime.datetime(2020, 6, 22, 3, 43), Decimal('5.55'), 'fraud_Flatley Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(485, 'cf4435ee3c65279d5d65d6cec5714fc3', 4690000000000000000, datetime.datetime(2020, 6, 22, 3, 44), Decimal('69.67'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(486, '5b6aff7166bf14fefc4067e4b42224f3', 373000000000000, datetime.datetime(2020, 6, 22, 3, 44), Decimal('42.11'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(487, '8a22da5f6f529e078ad42cefe5893b48', 5390000000000000, datetime.datetime(2020, 6, 22, 3, 45), Decimal('141.75'), 'fraud_Wolf Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(488, '1f268272eddb456f7bacfd0bb3cff14c', 213000000000000, datetime.datetime(2020, 6, 22, 3, 45), Decimal('7.79'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(489, '87c16596ccb480b404e5015e2f8f9cec', 3510000000000000, datetime.datetime(2020, 6, 22, 3, 45), Decimal('9.61'), 'fraud_Kuhn LLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(490, '397c191564df36b9ca1e42085702118c', 3530000000000000, datetime.datetime(2020, 6, 22, 3, 46), Decimal('64.06'), 'fraud_Conroy-Cruickshank', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(491, '3140374f4388ab1715f18633d2fdb253', 30600000000000, datetime.datetime(2020, 6, 22, 3, 47), Decimal('2.77'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(492, 'cf51bbb62584dae7522f8a06756ab2b5', 2700000000000000, datetime.datetime(2020, 6, 22, 3, 47), Decimal('59.08'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(493, '59241034ce31b0f1eb2850aa493e4267', 4480000000000, datetime.datetime(2020, 6, 22, 3, 47), Decimal('41.73'), 'fraud_Kutch and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(494, '97f6a5b869e944ea8f4a2fb52bd81295', 4230000000000000000, datetime.datetime(2020, 6, 22, 3, 49), Decimal('41.36'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(495, 'f09482b444ebfcea665f9bd1ef15beb5', 4910000000000000, datetime.datetime(2020, 6, 22, 3, 51), Decimal('198.98'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(496, '1f3d6e3c3fe8c1fc93123ebee6bd192f', 344000000000000, datetime.datetime(2020, 6, 22, 3, 52), Decimal('4.52'), 'fraud_Larkin, Stracke and Greenfelder', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(497, 'b7dd11d730b0b47c1f6b1202bdde5b77', 562000000000, datetime.datetime(2020, 6, 22, 3, 52), Decimal('23.66'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(498, '84da0eca834eda20bab694bf8f1106a2', 3580000000000000, datetime.datetime(2020, 6, 22, 3, 53), Decimal('53.66'), 'fraud_Kemmer-Buckridge', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(499, '200f696ac4330c33d75df3cbb172a445', 30200000000000, datetime.datetime(2020, 6, 22, 3, 53), Decimal('5.00'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(500, 'aa8f765c973b3d5b97cf26a756dc4ebe', 4790000000000, datetime.datetime(2020, 6, 22, 3, 54), Decimal('1.10'), 'fraud_Morissette LLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(501, 'f649aad269f9426ca09abcd2b96a4855', 4860000000000000000, datetime.datetime(2020, 6, 22, 3, 54), Decimal('62.47'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(502, 'f5f8b1c87f58787ad6f5b5419784aad7', 30300000000000, datetime.datetime(2020, 6, 22, 3, 54), Decimal('8.76'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(503, 'bdaca89b564c7e5dfcdcfe3b4ac4e2e0', 2300000000000000, datetime.datetime(2020, 6, 22, 3, 55), Decimal('57.81'), 'fraud_Lind, Huel and McClure', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(504, 'bdd6561bce29fefe2dd6ea354dbf383b', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 55), Decimal('74.25'), 'fraud_Raynor, Reinger and Hagenes', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(505, 'edaeab85b4bc3ac85c9fb17fa4f56e97', 6010000000000000, datetime.datetime(2020, 6, 22, 3, 56), Decimal('46.40'), 'fraud_Greenholt, Jacobi and Gleason', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(506, '30944fa5ef0c9362fc3f5f2963d33f71', 30100000000000, datetime.datetime(2020, 6, 22, 3, 57), Decimal('77.93'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(507, '5fd42924e958969529b5c4d0161236c2', 582000000000, datetime.datetime(2020, 6, 22, 3, 57), Decimal('76.29'), 'fraud_Schmitt Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(508, '909ed263241f37955c3548af167a8126', 374000000000000, datetime.datetime(2020, 6, 22, 3, 58), Decimal('136.10'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(509, 'e52c02c1ec7d88213f3a805e0405fd41', 4800000000000000000, datetime.datetime(2020, 6, 22, 3, 58), Decimal('6.53'), 'fraud_Bogisich-Homenick', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(510, '1df251f721c19eb9af98f2dca4eb02c0', 676000000000, datetime.datetime(2020, 6, 22, 3, 58), Decimal('95.90'), 'fraud_Kilback LLC', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(511, '137552948ab576d1851146de6d5d4553', 2270000000000000, datetime.datetime(2020, 6, 22, 3, 58), Decimal('3.69'), 'fraud_Friesen Inc', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(512, '4aced1c4f4a46454a379a1e935943486', 4710000000000000, datetime.datetime(2020, 6, 22, 3, 59), Decimal('139.26'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(513, '0304c4819ff9dde1154a7f31f5338c07', 4720000000000000, datetime.datetime(2020, 6, 22, 3, 59), Decimal('76.74'), 'fraud_Rowe, Batz and Goodwin', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(514, 'de14fa1644b6269c972b9d1e313dda8b', 2710000000000000, datetime.datetime(2020, 6, 22, 4, 0), Decimal('116.18'), 'fraud_Bauch-Raynor', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(515, 'fbdd4612ac61f69d03241e63eabce61b', 5580000000000000, datetime.datetime(2020, 6, 22, 4, 1), Decimal('41.41'), 'fraud_Halvorson Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(516, 'be7d3d460357280a44d801b25d80c204', 4340000000000000, datetime.datetime(2020, 6, 22, 4, 1), Decimal('24.53'), 'fraud_Paucek-Wiza', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(517, 'e62129cb51820439c716498726921714', 4410000000000000000, datetime.datetime(2020, 6, 22, 4, 1), Decimal('94.70'), 'fraud_Kiehn-Emmerich', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(518, 'd314c28cc7a9428a4ac215abbf4e0e74', 342000000000000, datetime.datetime(2020, 6, 22, 4, 2), Decimal('58.01'), 'fraud_Jenkins, Hauck and Friesen', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(519, '4a8563b2813acd44a1962603e0d47541', 371000000000000, datetime.datetime(2020, 6, 22, 4, 2), Decimal('47.28'), 'fraud_Emmerich-Luettgen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(520, '86341610b834ad446643305dc34a44b5', 213000000000000, datetime.datetime(2020, 6, 22, 4, 2), Decimal('157.85'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(521, 'c0b2cb014f4137c847b561f71c8b297d', 213000000000000, datetime.datetime(2020, 6, 22, 4, 3), Decimal('62.71'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(522, '98b1afb79c7975fe89ef10f77eae5cd9', 30300000000000, datetime.datetime(2020, 6, 22, 4, 3), Decimal('42.38'), 'fraud_Cassin-Harvey', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(523, '5b688fd33acd4306a787dbd3e6562463', 4650000000000000, datetime.datetime(2020, 6, 22, 4, 3), Decimal('27.86'), 'fraud_Pfeffer LLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(524, '6c45986fed73e497af546d01457b68ca', 4680000000000000, datetime.datetime(2020, 6, 22, 4, 3), Decimal('44.93'), 'fraud_Vandervort-Funk', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(525, 'a63ff53a7ede3d959c2b711dc1e2bf4d', 213000000000000, datetime.datetime(2020, 6, 22, 4, 5), Decimal('56.26'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(526, 'a784a6995c3a8330d23e4c954d537133', 4710000000000000, datetime.datetime(2020, 6, 22, 4, 5), Decimal('1.29'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(527, 'e36387ae0ad37af670724f32291b1e70', 2250000000000000, datetime.datetime(2020, 6, 22, 4, 5), Decimal('63.51'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(528, '5e46db578937c49736c46fa20e24f0bc', 4070000000000000, datetime.datetime(2020, 6, 22, 4, 6), Decimal('52.98'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(529, '0af1f4bc22cc8a8b41f3dfa71aa3c857', 4470000000000, datetime.datetime(2020, 6, 22, 4, 6), Decimal('92.74'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(530, 'c02e58b906950a8deb4aaf9874048b52', 3580000000000000, datetime.datetime(2020, 6, 22, 4, 6), Decimal('40.52'), 'fraud_Schaefer, Maggio and Daugherty', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(531, '452d9790d7f61b57cbc5148d9fb5dd4e', 4380000000000000, datetime.datetime(2020, 6, 22, 4, 6), Decimal('58.25'), 'fraud_Murray-Smitham', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(532, '684ec1b2d661f11b7b3b3a776acd8a42', 3500000000000000, datetime.datetime(2020, 6, 22, 4, 6), Decimal('22.38'), 'fraud_Kohler, Lindgren and Koelpin', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(533, 'ba33a2493c767ccad1056dbcc5e26d35', 3570000000000000, datetime.datetime(2020, 6, 22, 4, 6), Decimal('48.57'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(534, 'dd61a558a803b267bd3b6e1363f4d25f', 373000000000000, datetime.datetime(2020, 6, 22, 4, 6), Decimal('71.77'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(535, '377d5f75693ed691162249eb2c908d34', 3560000000000000, datetime.datetime(2020, 6, 22, 4, 7), Decimal('75.23'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(536, '204cb108d10a230fcd7ee456f26b0a8e', 5000000000000000, datetime.datetime(2020, 6, 22, 4, 7), Decimal('39.64'), 'fraud_Heller-Abshire', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(537, '9a2ab03a342e4bc8d2750da8f2944212', 4310000000000000000, datetime.datetime(2020, 6, 22, 4, 7), Decimal('37.27'), 'fraud_Lind, Huel and McClure', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(538, 'ad508d9417e694eebd68c5f7bc295e08', 4270000000000000, datetime.datetime(2020, 6, 22, 4, 7), Decimal('127.06'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(539, 'c89fd54ab961d98493a8462e23f71373', 4710000000000000, datetime.datetime(2020, 6, 22, 4, 8), Decimal('137.10'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(540, '4b53ecb912e92c3e64c220ed168f44a4', 6010000000000000, datetime.datetime(2020, 6, 22, 4, 9), Decimal('40.32'), 'fraud_Paucek-Wiza', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(541, '71b6beb9bec2312f9a61b9ce9a99ce28', 4200000000000, datetime.datetime(2020, 6, 22, 4, 9), Decimal('5.80'), 'fraud_McGlynn-Heathcote', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(542, 'bde8f067c71b53b7570f627da28e6933', 38100000000000, datetime.datetime(2020, 6, 22, 4, 11), Decimal('52.53'), 'fraud_Kuvalis Ltd', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(543, 'ec70b930a16e7251b5ef572b947f06e9', 4710000000000000000, datetime.datetime(2020, 6, 22, 4, 11), Decimal('2.50'), 'fraud_Mosciski, Ziemann and Farrell', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(544, '52fe43b4c4d08c23bb560ce4bc4d745a', 30200000000000, datetime.datetime(2020, 6, 22, 4, 11), Decimal('80.28'), 'fraud_Cummings Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(545, 'a0456fda07a97f6d6c992dac21259232', 344000000000000, datetime.datetime(2020, 6, 22, 4, 12), Decimal('27.51'), 'fraud_Ferry, Reichel and DuBuque', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(546, '82e9490224c0ee19f3db55f05e2b119d', 6010000000000000, datetime.datetime(2020, 6, 22, 4, 13), Decimal('61.50'), 'fraud_Stokes, Christiansen and Sipes', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(547, '7a0b4fa9db5b295654167dd6064a0cc9', 343000000000000, datetime.datetime(2020, 6, 22, 4, 13), Decimal('9.95'), 'fraud_Nienow PLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(548, 'a448124925d267e3bec829282cfe7483', 4650000000000000000, datetime.datetime(2020, 6, 22, 4, 13), Decimal('192.00'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(549, '09fd1d39a9f6e97367cb04f332f264ca', 639000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('99.44'), 'fraud_Heidenreich PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(550, 'bbb368f8e0f1c37b7a1b226a7a87f78d', 4150000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('40.04'), 'fraud_Cassin-Harvey', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(551, '725618eee32c1a9614da054ec0ab3fb3', 630000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('81.72'), 'fraud_Swaniawski, Bahringer and Ledner', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(552, '2f00ec5c074fa4f9bb39e40e8094207e', 4430000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('45.66'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(553, '9a52253df6d035c6e78e8f6adada969a', 5130000000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('31.10'), 'fraud_Boehm, Block and Jakubowski', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(554, 'fef65e8849adc46b89054c992d7fa4ba', 4030000000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('93.82'), 'fraud_McGlynn-Heathcote', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(555, 'cdd3f70744e7a2124886d23c5eaf3ba6', 2250000000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('52.40'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(556, 'f84b6d11c113ac7d67507a5e796ccc7d', 4380000000000000, datetime.datetime(2020, 6, 22, 4, 14), Decimal('19.53'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(557, '10e0075aaa78d1ff57f0347612605d0f', 3510000000000000, datetime.datetime(2020, 6, 22, 4, 15), Decimal('35.73'), 'fraud_Friesen-Stamm', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(558, '0b01bdbb5cbc608b2def32189d224044', 5390000000000000, datetime.datetime(2020, 6, 22, 4, 15), Decimal('176.60'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(559, 'a462366d5186c678c81e9b1b394e308d', 4270000000000000, datetime.datetime(2020, 6, 22, 4, 16), Decimal('43.48'), 'fraud_Mraz-Herzog', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(560, '7f1db591a4c71874bf133f3b47c78777', 3550000000000000, datetime.datetime(2020, 6, 22, 4, 17), Decimal('6.54'), 'fraud_McGlynn-Jaskolski', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(561, '269acc50b23a46e888471bad4411fb6f', 3590000000000000, datetime.datetime(2020, 6, 22, 4, 17), Decimal('72.29'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(562, 'a4709e93a96262e118b6813054ff45ad', 2450000000000000, datetime.datetime(2020, 6, 22, 4, 18), Decimal('56.83'), 'fraud_Raynor, Reinger and Hagenes', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(563, 'f5c45d00b9ea24ea9363695fb73a7484', 4450000000000000, datetime.datetime(2020, 6, 22, 4, 18), Decimal('8.04'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(564, '95f01385764d605fc6460113f39534d4', 4010000000000000, datetime.datetime(2020, 6, 22, 4, 19), Decimal('31.33'), 'fraud_Gislason Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(565, '3848d83f0118185a68ac6cbf86b21183', 4740000000000000000, datetime.datetime(2020, 6, 22, 4, 20), Decimal('1.93'), 'fraud_Schumm PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(566, 'c13d9a99ce3bb63066db80bfeafe60b1', 4560000000000, datetime.datetime(2020, 6, 22, 4, 20), Decimal('3.15'), 'fraud_Yost, Block and Koepp', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(567, '8efc78fe416e2380d9be2ab5769977ce', 4310000000000, datetime.datetime(2020, 6, 22, 4, 20), Decimal('6.46'), 'fraud_Cremin, Hamill and Reichel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(568, '6301cae8e0885372818550476a89bde2', 4330000000000000, datetime.datetime(2020, 6, 22, 4, 20), Decimal('316.17'), 'fraud_Block-Parisian', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(569, 'f261b2edc7a5289f44562aa0a6517cf7', 3580000000000000, datetime.datetime(2020, 6, 22, 4, 21), Decimal('409.89'), 'fraud_Wilkinson Ltd', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(570, '9a1a1322957ebfeeaa6f76a50857d742', 3600000000000000, datetime.datetime(2020, 6, 22, 4, 22), Decimal('4.21'), 'fraud_Maggio-Fahey', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(571, 'a453937d18db42a3c672d71bcdcfc9ec', 3590000000000000, datetime.datetime(2020, 6, 22, 4, 23), Decimal('21.84'), 'fraud_Herman Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(572, '8a6a5178f3d733ebe6c191c1363636ac', 378000000000000, datetime.datetime(2020, 6, 22, 4, 24), Decimal('67.87'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(573, '02266f2cc6c96a944d5ffcb57f89014c', 2220000000000000, datetime.datetime(2020, 6, 22, 4, 24), Decimal('7.24'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(574, '574601a640d36deefd1bfa622f62bf88', 3550000000000000, datetime.datetime(2020, 6, 22, 4, 25), Decimal('130.76'), 'fraud_Schulist Ltd', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(575, '902915b3466e80478aff58b59a5dddbe', 375000000000000, datetime.datetime(2020, 6, 22, 4, 25), Decimal('1.61'), 'fraud_Goyette, Howell and Collier', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(576, '8f7d535f5bdc896be1351bf72ece46f9', 378000000000000, datetime.datetime(2020, 6, 22, 4, 26), Decimal('8.24'), 'fraud_Hudson-Grady', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(577, '51cf8ce0e5b48df41cfa996a9ccbe1f5', 504000000000, datetime.datetime(2020, 6, 22, 4, 26), Decimal('48.25'), 'fraud_Raynor, Reinger and Hagenes', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(578, '5a385d48bb88f796305e67f81ed0e880', 213000000000000, datetime.datetime(2020, 6, 22, 4, 27), Decimal('49.45'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(579, '1e5dacbf4d333d5e1ad287fd2e5e9637', 4150000000000000, datetime.datetime(2020, 6, 22, 4, 28), Decimal('120.38'), 'fraud_Torphy-Goyette', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(580, '678fdb447bdcf287c8cd35c28022548e', 4910000000000000000, datetime.datetime(2020, 6, 22, 4, 28), Decimal('67.92'), 'fraud_Murray Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(581, '4113c6b9a506d340c6266b2c294b0806', 4980000000000, datetime.datetime(2020, 6, 22, 4, 29), Decimal('1.55'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(582, '36a776211a9106a5adfd093c964364c5', 213000000000000, datetime.datetime(2020, 6, 22, 4, 30), Decimal('7.99'), 'fraud_Miller-Harris', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(583, 'bfa18372ca3c611433f64d962c9922fb', 4120000000000000, datetime.datetime(2020, 6, 22, 4, 30), Decimal('49.90'), 'fraud_Konopelski, Schneider and Hartmann', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(584, '21c0a2c26b3fee0ed8d093c9031c921c', 6530000000000000, datetime.datetime(2020, 6, 22, 4, 30), Decimal('2.77'), 'fraud_Grimes LLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(585, '9727682fe6af2093ee11d40788559a73', 3550000000000000, datetime.datetime(2020, 6, 22, 4, 30), Decimal('62.05'), 'fraud_Christiansen, Goyette and Schamberger', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(586, '30224c031bc702c4da6ee1a948082d47', 6550000000000000, datetime.datetime(2020, 6, 22, 4, 31), Decimal('3.60'), 'fraud_Conroy Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(587, '0b5b64170b4fb4743622ced1c243485e', 2310000000000000, datetime.datetime(2020, 6, 22, 4, 31), Decimal('77.54'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(588, '64f8a77cfed45be9b9466d8ff78c855f', 2270000000000000, datetime.datetime(2020, 6, 22, 4, 31), Decimal('45.49'), 'fraud_Gislason Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(589, '623329a2a5b2ec747a83be868057ed64', 30400000000000, datetime.datetime(2020, 6, 22, 4, 32), Decimal('15.01'), 'fraud_Durgan-Auer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(590, '314c6eaaf846a8c459e8a9f3a7359a57', 4620000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('149.75'), 'fraud_Bradtke PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(591, '15e4611d535451a1816ae59043065483', 379000000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('38.50'), 'fraud_Tillman, Dickinson and Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(592, '566a53d1871570e767820471ea8af9d7', 3580000000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('97.83'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(593, 'f4d35230519ed93bf5249f343021fd24', 4970000000000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('52.42'), 'fraud_Cormier, Stracke and Thiel', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(594, '79dcd3107ac43ccceb40ab03653fb81b', 4860000000000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('98.02'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(595, 'cb2e1939d359f8dfe711ce1c8d15287e', 4820000000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('60.81'), 'fraud_Streich, Hansen and Veum', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(596, '5c335dcc542eadbf98e074459047bdd4', 6010000000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('231.95'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(597, 'e796d31c27c4ca0c64ae26e766ce10d5', 30200000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('9.07'), 'fraud_Turner and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(598, '1a4446abb4d5092ffa2bfadc0b4d4aca', 4510000000000000, datetime.datetime(2020, 6, 22, 4, 34), Decimal('50.45'), 'fraud_Greenholt, Jacobi and Gleason', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(599, '2a288e9001e3f57999852d0f1f37e8bf', 213000000000000, datetime.datetime(2020, 6, 22, 4, 35), Decimal('51.12'), 'fraud_Towne LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(600, 'fb11cf15719a680f138a5134f039a61b', 4020000000000000000, datetime.datetime(2020, 6, 22, 4, 35), Decimal('107.94'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(601, '7f156e57bf485fa2d14c581266c8c907', 6010000000000000, datetime.datetime(2020, 6, 22, 4, 35), Decimal('137.28'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(602, '8ae825a8fc8420c6d0bd3bc20a3a4428', 3550000000000000, datetime.datetime(2020, 6, 22, 4, 36), Decimal('112.01'), \"fraud_Pacocha-O'Reilly\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(603, '3f4a01c176470208419fcb3b48a7f811', 3530000000000000, datetime.datetime(2020, 6, 22, 4, 37), Decimal('65.72'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(604, 'd5b6ca84cf5c7907a906b703739c40f5', 180000000000000, datetime.datetime(2020, 6, 22, 4, 37), Decimal('2.69'), 'fraud_Kuhn LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(605, '565797128b11a97bbe1c54eef303ec78', 180000000000000, datetime.datetime(2020, 6, 22, 4, 37), Decimal('4.27'), 'fraud_Block Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(606, 'ef508441ce03c20d0c59b6a274bc20ba', 30100000000000, datetime.datetime(2020, 6, 22, 4, 39), Decimal('53.74'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(607, '6167126359b5db5c4199521e884b9dfc', 502000000000, datetime.datetime(2020, 6, 22, 4, 39), Decimal('119.65'), \"fraud_Pacocha-O'Reilly\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(608, '568e4d31d39436abd47cd91a047df644', 2280000000000000, datetime.datetime(2020, 6, 22, 4, 39), Decimal('46.29'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(609, 'e8df7495fb6c69fe937c5c2bc791a4e1', 4820000000000000, datetime.datetime(2020, 6, 22, 4, 40), Decimal('23.56'), 'fraud_Morar Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(610, 'cb46e1b24e6e48d1ec5133aafd2455ae', 4520000000000000, datetime.datetime(2020, 6, 22, 4, 40), Decimal('61.55'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(611, 'fc37ceef11423f98967607c16420b40f', 2480000000000000, datetime.datetime(2020, 6, 22, 4, 40), Decimal('72.63'), \"fraud_Pacocha-O'Reilly\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(612, 'fd02161d69fd599cdcd311004803685c', 3530000000000000, datetime.datetime(2020, 6, 22, 4, 42), Decimal('86.73'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(613, 'd596b1a8ef9fd80f5a52ff259ce127a9', 502000000000, datetime.datetime(2020, 6, 22, 4, 43), Decimal('91.47'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(614, '9dcf906c8c2b4e8d7598fdf639b6838a', 4500000000000000, datetime.datetime(2020, 6, 22, 4, 44), Decimal('110.05'), 'fraud_Cormier LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(615, '5c59d9b8deb871964bec1ea87ca76f42', 372000000000000, datetime.datetime(2020, 6, 22, 4, 44), Decimal('5.13'), 'fraud_Stehr, Jewess and Schimmel', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(616, '3b3786525cee6818bbaac76c1a7f0fa2', 4290000000000000000, datetime.datetime(2020, 6, 22, 4, 45), Decimal('48.36'), 'fraud_McDermott-Weimann', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(617, 'e9bb37442871e6f3421906c991e33f61', 4650000000000000, datetime.datetime(2020, 6, 22, 4, 46), Decimal('44.29'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(618, 'cc08e09aace8b10737fe6c550d2f73eb', 4890000000000000000, datetime.datetime(2020, 6, 22, 4, 46), Decimal('68.78'), 'fraud_Robel, Cummerata and Prosacco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(619, '333b46279583d6cc4fb1e2b67f64b363', 4420000000000000, datetime.datetime(2020, 6, 22, 4, 47), Decimal('77.47'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(620, '9b79a6f38eca854cd352f1735100de32', 377000000000000, datetime.datetime(2020, 6, 22, 4, 47), Decimal('1.41'), 'fraud_Nader-Heller', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(621, 'ace312e8ad9e998808d538cd53e56a05', 4810000000000, datetime.datetime(2020, 6, 22, 4, 48), Decimal('33.69'), 'fraud_Zemlak Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(622, 'e38d707279ca81bcef4aa21b8dae37e5', 3570000000000000, datetime.datetime(2020, 6, 22, 4, 48), Decimal('70.18'), 'fraud_Bailey-Morar', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(623, 'b661899f3ca16fce301b05849cb0d6a8', 372000000000000, datetime.datetime(2020, 6, 22, 4, 48), Decimal('105.52'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(624, '85f7101875fc221ba42ff74bafcd0eee', 36700000000000, datetime.datetime(2020, 6, 22, 4, 48), Decimal('133.55'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(625, '24d9edb606028d7e3e428cab340d3c77', 36900000000000, datetime.datetime(2020, 6, 22, 4, 48), Decimal('2.32'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(626, '6c56eb3f4fe570687d15d93e9141858e', 504000000000, datetime.datetime(2020, 6, 22, 4, 48), Decimal('66.59'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(627, '9a2649fe8657e7fa3e94c921fc5309f5', 3530000000000000, datetime.datetime(2020, 6, 22, 4, 49), Decimal('72.83'), 'fraud_Dach-Borer', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(628, 'f4484eb08b7fbea51d6180de8ff32632', 3570000000000000, datetime.datetime(2020, 6, 22, 4, 50), Decimal('88.50'), 'fraud_Streich, Hansen and Veum', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(629, 'e6e16b3f18ddc1b254fb28acf1953504', 30300000000000, datetime.datetime(2020, 6, 22, 4, 51), Decimal('52.03'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(630, '1d94a0b0d2053201376fa0c80e1b62c9', 4760000000000000000, datetime.datetime(2020, 6, 22, 4, 52), Decimal('54.32'), 'fraud_Schmitt Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(631, 'f9d3670312a097138f82e794c49039c7', 3570000000000000, datetime.datetime(2020, 6, 22, 4, 52), Decimal('75.30'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(632, '40ff2ea25bda1f0c64e8803cf7783b96', 180000000000000, datetime.datetime(2020, 6, 22, 4, 53), Decimal('49.32'), 'fraud_Swaniawski, Bahringer and Ledner', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(633, 'd5f2f6b246acf42b1112bf050a053a8c', 676000000000, datetime.datetime(2020, 6, 22, 4, 53), Decimal('35.55'), 'fraud_Thiel PLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(634, '485c94f9cfe3676e3dd0c6b31e4eb949', 4420000000000000, datetime.datetime(2020, 6, 22, 4, 54), Decimal('41.80'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(635, '301c0c250852530324f7455d94acf43c', 4740000000000000, datetime.datetime(2020, 6, 22, 4, 54), Decimal('24.76'), 'fraud_Kihn-Schuster', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(636, 'd9a4e9f1ae983eb3609627cbdc9dbf88', 571000000000, datetime.datetime(2020, 6, 22, 4, 54), Decimal('72.43'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(637, '48487ac4a1afd4088f69ebb581f155a4', 30200000000000, datetime.datetime(2020, 6, 22, 4, 54), Decimal('59.54'), 'fraud_Raynor, Reinger and Hagenes', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(638, 'a3dba3af01585a9fce30fae872ac6a2b', 4120000000000000, datetime.datetime(2020, 6, 22, 4, 54), Decimal('6.58'), 'fraud_Cremin, Hamill and Reichel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(639, '3328aacd6b661fde1263b1d9d8cd296a', 630000000000, datetime.datetime(2020, 6, 22, 4, 55), Decimal('35.66'), 'fraud_Torp-Lemke', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(640, '8643b781b280b1abc61abd2786361656', 3550000000000000, datetime.datetime(2020, 6, 22, 4, 55), Decimal('74.08'), 'fraud_Kling Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(641, '84f04090bbc5e8c354df47ff0c651681', 341000000000000, datetime.datetime(2020, 6, 22, 4, 56), Decimal('1.88'), 'fraud_Douglas, Schneider and Turner', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(642, 'fedc9043db9baeb55097d425e748fb55', 2580000000000000, datetime.datetime(2020, 6, 22, 4, 56), Decimal('85.97'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(643, 'e06327748da6373c4c6acf8e660ddd89', 3510000000000000, datetime.datetime(2020, 6, 22, 4, 56), Decimal('98.06'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(644, 'a59281ca7c84b8a1e5ce371a6d2ff206', 6590000000000000, datetime.datetime(2020, 6, 22, 4, 56), Decimal('99.47'), 'fraud_Auer-Mosciski', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(645, '033b9b681482cf3b1d1fab8edda5375c', 4800000000000000000, datetime.datetime(2020, 6, 22, 4, 57), Decimal('120.50'), 'fraud_Schoen, Kuphal and Nitzsche', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(646, '1bb72b7c03304c20e0d7df9325cc6bb9', 4990000000000000000, datetime.datetime(2020, 6, 22, 4, 58), Decimal('7.60'), 'fraud_Friesen Inc', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(647, 'a3f460bfb4ba92301c9c55d5d7870acc', 3510000000000000, datetime.datetime(2020, 6, 22, 4, 58), Decimal('46.13'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(648, '879effd04705f5f027dc6d51add3126e', 340000000000000, datetime.datetime(2020, 6, 22, 4, 59), Decimal('12.54'), 'fraud_Williamson LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(649, '9f08abf661603830539e8374e325408e', 2580000000000000, datetime.datetime(2020, 6, 22, 5, 0), Decimal('79.10'), 'fraud_Koss and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(650, '4221750dd05931b2ba49a008f68eb8af', 213000000000000, datetime.datetime(2020, 6, 22, 5, 0), Decimal('1.98'), 'fraud_Hills-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(651, '990aa54345497d7d94b0ac7576917bb9', 180000000000000, datetime.datetime(2020, 6, 22, 5, 0), Decimal('85.17'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(652, 'a69fc31082c6dd9aad2d94e43d321087', 4260000000000, datetime.datetime(2020, 6, 22, 5, 1), Decimal('423.37'), 'fraud_Wiza, Schaden and Stark', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(653, 'e3f892bb4a059e9f04eac4ee9c434e4b', 4050000000000000, datetime.datetime(2020, 6, 22, 5, 1), Decimal('110.49'), 'fraud_Heller, Gutmann and Zieme', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(654, '6c7af50231ce2f19dc9de6b9aa77ce77', 4190000000000, datetime.datetime(2020, 6, 22, 5, 1), Decimal('9.45'), 'fraud_Dickinson-Rempel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(655, '739b2b59adac83f3055cd25ea03e4be7', 4810000000000, datetime.datetime(2020, 6, 22, 5, 2), Decimal('138.09'), 'fraud_Welch Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(656, '179295089f9ff36d990783e763ad38cd', 36900000000000, datetime.datetime(2020, 6, 22, 5, 2), Decimal('107.80'), 'fraud_Spinka Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(657, 'cc982058093df48890d109c46d9194ea', 180000000000000, datetime.datetime(2020, 6, 22, 5, 2), Decimal('1.88'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(658, 'e0d136c28782d528efea215f0901f4c3', 502000000000, datetime.datetime(2020, 6, 22, 5, 2), Decimal('146.59'), \"fraud_O'Keefe-Hudson\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(659, '1e648f86aa31a5d4c0c4877c813d3528', 180000000000000, datetime.datetime(2020, 6, 22, 5, 2), Decimal('6.46'), 'fraud_Quitzon, Green and Bashirian', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(660, '6467a6e47784fa0dd04805e151a213b6', 30100000000000, datetime.datetime(2020, 6, 22, 5, 3), Decimal('8.95'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(661, 'fa0ecd489db215fc7d5af99dd5cab8cd', 4550000000000000, datetime.datetime(2020, 6, 22, 5, 4), Decimal('90.83'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(662, '5dd8978beba674fbd0f17879b368c291', 180000000000000, datetime.datetime(2020, 6, 22, 5, 4), Decimal('29.58'), 'fraud_Stoltenberg-Beatty', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(663, 'e334f76969795c9bb773767dcb0900b5', 562000000000, datetime.datetime(2020, 6, 22, 5, 4), Decimal('25.32'), 'fraud_Kuhn LLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(664, '0ea41be3c7b10f4a625ed1a15730de6e', 38600000000000, datetime.datetime(2020, 6, 22, 5, 4), Decimal('4.74'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(665, '35260de3354c2929aea856376cd37d37', 376000000000000, datetime.datetime(2020, 6, 22, 5, 4), Decimal('67.79'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(666, '75f45018d5867e150931e8e057325843', 676000000000, datetime.datetime(2020, 6, 22, 5, 5), Decimal('1.44'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(667, '11b0bb5ec27a782923ca9bf6bb1828f3', 3520000000000000, datetime.datetime(2020, 6, 22, 5, 5), Decimal('51.00'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(668, '63a685282f4001d88f1411fff7e30d3b', 3560000000000000, datetime.datetime(2020, 6, 22, 5, 5), Decimal('80.23'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(669, '0d92886ace4e344336596e51230245b9', 3560000000000000, datetime.datetime(2020, 6, 22, 5, 7), Decimal('47.96'), 'fraud_Cummings LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(670, '92f109268e0f6c8dd26b275d59a2933d', 346000000000000, datetime.datetime(2020, 6, 22, 5, 9), Decimal('56.75'), 'fraud_Bogisich Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(671, 'e4aec60f5392efcfa9894e29a9724260', 341000000000000, datetime.datetime(2020, 6, 22, 5, 10), Decimal('59.21'), 'fraud_Kling-Grant', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(672, '81b4deb9bbf4ba2cbe7af5608ce5973c', 30400000000000, datetime.datetime(2020, 6, 22, 5, 10), Decimal('2.47'), 'fraud_Nienow PLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(673, 'bac577440ef53fe240a5c1c370b61689', 4780000000000, datetime.datetime(2020, 6, 22, 5, 11), Decimal('6.41'), 'fraud_Lehner, Reichert and Mills', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(674, '5465e579c229cdb7d2ba5f6b63b7517a', 4710000000000000, datetime.datetime(2020, 6, 22, 5, 11), Decimal('46.61'), 'fraud_Robel, Cummerata and Prosacco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(675, 'ed02ea30ae38e47691ca91ab5a09e12a', 5580000000000000, datetime.datetime(2020, 6, 22, 5, 11), Decimal('104.26'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(676, 'dee7e7cfc590260d946a0cbfca4e5984', 4210000000000000000, datetime.datetime(2020, 6, 22, 5, 12), Decimal('65.62'), 'fraud_Heller-Langosh', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(677, 'fb20d90ea6559821337d9806491f40e9', 36700000000000, datetime.datetime(2020, 6, 22, 5, 13), Decimal('61.77'), 'fraud_Cremin, Hamill and Reichel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(678, 'f134629d35f07f45d480d1e137e9122f', 3530000000000000, datetime.datetime(2020, 6, 22, 5, 13), Decimal('104.00'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(679, '375d584ed88726682f6b62eb6fea8a2e', 3550000000000000, datetime.datetime(2020, 6, 22, 5, 14), Decimal('8.45'), 'fraud_Nienow, Ankunding and Collier', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(680, '6de6f10ae4c1c93c7e27a25876dc4ed7', 6010000000000000, datetime.datetime(2020, 6, 22, 5, 14), Decimal('53.02'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(681, 'f926288056ab0647dc5f2893754de000', 30000000000000, datetime.datetime(2020, 6, 22, 5, 14), Decimal('34.73'), 'fraud_Buckridge PLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(682, '76afecaee0062da9f3a55a666d3472ad', 3600000000000000, datetime.datetime(2020, 6, 22, 5, 14), Decimal('79.18'), 'fraud_Koss and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(683, 'fbb7fd8f956078ca35bfcf2ded077500', 4710000000000000, datetime.datetime(2020, 6, 22, 5, 14), Decimal('4.37'), 'fraud_Dickinson-Rempel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(684, 'e3f66291669bd4a96a5783f2c155ca20', 4280000000000000, datetime.datetime(2020, 6, 22, 5, 14), Decimal('1.20'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(685, '10825076cd6b5223d652e9379caf0c31', 373000000000000, datetime.datetime(2020, 6, 22, 5, 14), Decimal('63.23'), 'fraud_Goldner, Kovacek and Abbott', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(686, '286b29756d42e82b969a9aaa8a12dbaf', 4300000000000000, datetime.datetime(2020, 6, 22, 5, 15), Decimal('3.65'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(687, '2c4b422e47fa0039f746cf9833f7ca13', 6540000000000000, datetime.datetime(2020, 6, 22, 5, 15), Decimal('56.19'), 'fraud_Kutch Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(688, '913eec3d83d6e26ec5381e120d677e50', 4310000000000000000, datetime.datetime(2020, 6, 22, 5, 15), Decimal('5.45'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(689, 'eed089ffacd613a39d453f83389a0450', 376000000000000, datetime.datetime(2020, 6, 22, 5, 16), Decimal('14.29'), 'fraud_Effertz LLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(690, '053e7c7190eef7e317477b9ccf1f2ca4', 6010000000000000, datetime.datetime(2020, 6, 22, 5, 16), Decimal('199.40'), 'fraud_Schoen, Kuphal and Nitzsche', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(691, '779a517fa6526997ad0b5f30b2016ad9', 38500000000000, datetime.datetime(2020, 6, 22, 5, 18), Decimal('66.80'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(692, 'eb52d0a71a8b76d953791ff5954426ef', 5500000000000000, datetime.datetime(2020, 6, 22, 5, 18), Decimal('186.85'), 'fraud_Daugherty-Thompson', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(693, '3eb6472a1f9eb07f03b1907de4396b5d', 378000000000000, datetime.datetime(2020, 6, 22, 5, 19), Decimal('6.79'), 'fraud_Kerluke PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(694, 'a0148156e2d94a57595ec80116869747', 4370000000000000, datetime.datetime(2020, 6, 22, 5, 19), Decimal('119.30'), 'fraud_Murray-Smitham', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(695, '609380d38f84ada246f0d0a9e8068c99', 4560000000000, datetime.datetime(2020, 6, 22, 5, 20), Decimal('60.93'), 'fraud_Roob LLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(696, '4b66fb48a17737183e9c66e96416bc27', 38800000000000, datetime.datetime(2020, 6, 22, 5, 20), Decimal('95.38'), 'fraud_Kiehn Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(697, '50e882529f226de3d2e4e553203681ac', 4330000000000000, datetime.datetime(2020, 6, 22, 5, 21), Decimal('18.80'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(698, '2024f29a31126c6c580333282aedc268', 30100000000000, datetime.datetime(2020, 6, 22, 5, 21), Decimal('7.63'), 'fraud_Lebsack and Sons', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(699, '34a63edc40374ed88b0170807a47ee19', 3560000000000000, datetime.datetime(2020, 6, 22, 5, 22), Decimal('51.36'), 'fraud_Christiansen, Goyette and Schamberger', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(700, '6d932fda0c44bc40b12285fdf3193dae', 4400000000000, datetime.datetime(2020, 6, 22, 5, 23), Decimal('69.38'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(701, '64015c68fdf5b9df55171525f8b70c02', 3600000000000000, datetime.datetime(2020, 6, 22, 5, 23), Decimal('96.17'), 'fraud_McDermott-Rice', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(702, '9768d3213b02b2d928a6e8ae5688232c', 4960000000000000000, datetime.datetime(2020, 6, 22, 5, 23), Decimal('4.06'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(703, '39364d3b2f60827f885403f697e7363c', 3510000000000000, datetime.datetime(2020, 6, 22, 5, 23), Decimal('19.24'), 'fraud_Roob, Conn and Tremblay', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(704, '26dfeab7a08ed270868a069980f245b6', 4720000000000000, datetime.datetime(2020, 6, 22, 5, 23), Decimal('59.93'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(705, '3d412cd74d0713bc7f331949c41b8bd5', 4420000000000000, datetime.datetime(2020, 6, 22, 5, 24), Decimal('55.31'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(706, '024a4da262552c81e7e9594c9e07c732', 2230000000000000, datetime.datetime(2020, 6, 22, 5, 25), Decimal('7.74'), 'fraud_Kuphal-Predovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(707, '8b6c5be88ff9a520f0eb4b430dcf371b', 374000000000000, datetime.datetime(2020, 6, 22, 5, 27), Decimal('52.51'), 'fraud_Rodriguez Group', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(708, '6ee81bd702f54d893f1d79833635f63f', 2350000000000000, datetime.datetime(2020, 6, 22, 5, 28), Decimal('23.31'), 'fraud_Wisozk and Sons', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(709, 'dab34bf900fd71cafecd6399d68359e6', 3560000000000000, datetime.datetime(2020, 6, 22, 5, 28), Decimal('47.22'), 'fraud_Schaefer, Maggio and Daugherty', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(710, '188c1f4761094e63ab72060d1f97c0be', 630000000000, datetime.datetime(2020, 6, 22, 5, 28), Decimal('39.67'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(711, 'bf32e594704426181ac0099839bff936', 344000000000000, datetime.datetime(2020, 6, 22, 5, 29), Decimal('37.34'), 'fraud_Haag-Blanda', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(712, '2fe3586d74657b1a3a458745d32dc5c9', 4810000000000, datetime.datetime(2020, 6, 22, 5, 29), Decimal('270.17'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(713, '59c8126ba4445df31b5a4584642333b8', 213000000000000, datetime.datetime(2020, 6, 22, 5, 29), Decimal('94.66'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(714, '1470c7d6646a39bec82a761c504e777c', 2230000000000000, datetime.datetime(2020, 6, 22, 5, 31), Decimal('47.94'), 'fraud_Collier Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(715, 'fe3b49e5caa7e8caf4841ae5243fc307', 371000000000000, datetime.datetime(2020, 6, 22, 5, 32), Decimal('70.47'), 'fraud_Kutch Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(716, '92dda0bb4f39d6d624b83104232646a4', 6010000000000000, datetime.datetime(2020, 6, 22, 5, 33), Decimal('55.50'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(717, '5e50c03b18754f63e63db673f5a644fa', 6570000000000000, datetime.datetime(2020, 6, 22, 5, 33), Decimal('7.10'), 'fraud_Thiel-Thiel', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(718, 'bb0ad55b95d024aeedc459ba960de2f7', 6550000000000000, datetime.datetime(2020, 6, 22, 5, 36), Decimal('47.52'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(719, '789682896bfacf0cba11a7385460b4f9', 3550000000000000, datetime.datetime(2020, 6, 22, 5, 36), Decimal('62.48'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(720, '585b5667242306309ede483478362b44', 4130000000000000, datetime.datetime(2020, 6, 22, 5, 36), Decimal('133.55'), 'fraud_Moen, Reinger and Murphy', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(721, '4297e1ef9c77defea09b788a2c720efa', 180000000000000, datetime.datetime(2020, 6, 22, 5, 36), Decimal('65.35'), 'fraud_Bradtke PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(722, '8bfc105c734b07378da56bf3eb6e5072', 213000000000000, datetime.datetime(2020, 6, 22, 5, 37), Decimal('187.54'), 'fraud_Jakubowski Group', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(723, '36f8321aa3a49adfeb114464f83704be', 343000000000000, datetime.datetime(2020, 6, 22, 5, 37), Decimal('4.43'), 'fraud_Sawayn PLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(724, '8348ab52c313e764447b3eed2a4c0cfd', 676000000000, datetime.datetime(2020, 6, 22, 5, 37), Decimal('54.53'), 'fraud_Christiansen, Goyette and Schamberger', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(725, 'f464ed93b70034ce63515640d1110a6a', 30000000000000, datetime.datetime(2020, 6, 22, 5, 38), Decimal('102.87'), 'fraud_Bradtke PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(726, 'da693d7749c29ed2f3f491d88f2de02b', 2280000000000000, datetime.datetime(2020, 6, 22, 5, 38), Decimal('8.49'), 'fraud_Pouros-Conroy', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(727, 'caee1ab1944da87190ad00c6f9b191bc', 30300000000000, datetime.datetime(2020, 6, 22, 5, 39), Decimal('43.36'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(728, '6352e44984345a16d7460a1406d929dd', 180000000000000, datetime.datetime(2020, 6, 22, 5, 40), Decimal('59.49'), 'fraud_Swaniawski, Bahringer and Ledner', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(729, 'd8730ff84eb47c5cb466cbf8c723861a', 4560000000000, datetime.datetime(2020, 6, 22, 5, 41), Decimal('65.39'), 'fraud_Kuvalis Ltd', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(730, '76b5639ae9809dfdd2a3bd5001ec0297', 347000000000000, datetime.datetime(2020, 6, 22, 5, 41), Decimal('100.86'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(731, '120d322f5f67c9acffe133a1ed6b3956', 180000000000000, datetime.datetime(2020, 6, 22, 5, 42), Decimal('8.89'), 'fraud_Balistreri-Nader', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(732, '902e6debc8005e121d72cff6c04358d0', 30100000000000, datetime.datetime(2020, 6, 22, 5, 43), Decimal('5.28'), 'fraud_Jewess LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(733, '04d2aa4275970906645fdd1fcf2c310d', 3570000000000000, datetime.datetime(2020, 6, 22, 5, 43), Decimal('63.48'), 'fraud_Greenholt, Jacobi and Gleason', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(734, '7a71e5f98acb1168034f3cdbf52ef141', 4210000000000000000, datetime.datetime(2020, 6, 22, 5, 43), Decimal('80.77'), 'fraud_Harris Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(735, '2e69a0bc78114ebf5ac71a49a08afe94', 5600000000000000, datetime.datetime(2020, 6, 22, 5, 44), Decimal('139.44'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(736, '19c2a8286e21e49655d69e2f1475cc2f', 6010000000000000, datetime.datetime(2020, 6, 22, 5, 44), Decimal('1.32'), 'fraud_Stamm-Rodriguez', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(737, '91ea82da1e394f282c51a184b0978ca2', 502000000000, datetime.datetime(2020, 6, 22, 5, 44), Decimal('79.44'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(738, '2f30fb290c42a9ac44f93ea2c4d58f79', 2450000000000000, datetime.datetime(2020, 6, 22, 5, 44), Decimal('33.38'), 'fraud_Bernier, Streich and Jewess', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(739, '8e01dd017816fb34f55dba511f969dfd', 3560000000000000, datetime.datetime(2020, 6, 22, 5, 44), Decimal('97.36'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(740, '8537f987394cda50a0576d64e0cf2378', 4150000000000000, datetime.datetime(2020, 6, 22, 5, 46), Decimal('124.11'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(741, 'c61c3e547bb08a582d1b3f14929ea503', 30300000000000, datetime.datetime(2020, 6, 22, 5, 46), Decimal('9.20'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(742, '02c133d60bb3cc77d5b0c032deb1b610', 4830000000000000, datetime.datetime(2020, 6, 22, 5, 46), Decimal('6.19'), 'fraud_Hermann and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(743, '3d65ea39ea996df669e55938c9ca1fb7', 4980000000000000, datetime.datetime(2020, 6, 22, 5, 46), Decimal('67.20'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(744, '43f2319cbc8bf02d1e70d50710ef390f', 676000000000, datetime.datetime(2020, 6, 22, 5, 47), Decimal('50.94'), 'fraud_Friesen-Stamm', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(745, '910f08cd289146439834a7ab4990b309', 4810000000000000000, datetime.datetime(2020, 6, 22, 5, 48), Decimal('78.34'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(746, '263ad4e46cc79107a074fc2b81d359fb', 2700000000000000, datetime.datetime(2020, 6, 22, 5, 48), Decimal('90.77'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(747, '74700561152fc856c753365f1a139885', 3580000000000000, datetime.datetime(2020, 6, 22, 5, 49), Decimal('3.58'), 'fraud_Goyette Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(748, 'c62230e609570ffaa5a02ff173f29cb7', 213000000000000, datetime.datetime(2020, 6, 22, 5, 49), Decimal('54.80'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(749, '7084d07ad6e5c6eee478a5aa547c46f6', 213000000000000, datetime.datetime(2020, 6, 22, 5, 49), Decimal('9.08'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(750, 'b3a6d264c6b35e55f4bab78bd1785b37', 344000000000000, datetime.datetime(2020, 6, 22, 5, 49), Decimal('6.60'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(751, 'b6661d1d3ff96e00f1a8986197c54e95', 3540000000000000, datetime.datetime(2020, 6, 22, 5, 49), Decimal('54.06'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(752, '60638f6c251ff7146afeaa69c59d2432', 3510000000000000, datetime.datetime(2020, 6, 22, 5, 50), Decimal('72.68'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(753, '71150c87baf8e552d19081e53c8c3d9e', 4380000000000000, datetime.datetime(2020, 6, 22, 5, 50), Decimal('1.65'), 'fraud_Morissette PLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(754, '0554c68f35111fbed1e78a415e358f04', 213000000000000, datetime.datetime(2020, 6, 22, 5, 51), Decimal('7.56'), 'fraud_Baumbach, Hodkiewicz and Walsh', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(755, '6578655c3d05e08f42ed84c7444634eb', 3560000000000000, datetime.datetime(2020, 6, 22, 5, 51), Decimal('72.41'), 'fraud_Olson, Becker and Koch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(756, 'eb141e9f114b69ef164bdaba63680d2d', 3500000000000000, datetime.datetime(2020, 6, 22, 5, 51), Decimal('75.51'), \"fraud_Friesen-D'Amore\", 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(757, '2b752cb4113fd9c2df5aea034a072fb2', 4910000000000000, datetime.datetime(2020, 6, 22, 5, 51), Decimal('59.41'), 'fraud_Simonis-Prohaska', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(758, '8b466e34957ade6007953eae6e45cb8c', 2290000000000000, datetime.datetime(2020, 6, 22, 5, 52), Decimal('77.02'), 'fraud_Kutch LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(759, 'aecd97ef4463751e9bcc7523f8e038e4', 371000000000000, datetime.datetime(2020, 6, 22, 5, 52), Decimal('72.83'), 'fraud_Hackett-Lueilwitz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(760, '772a03745ac56dacd7b52e5876d598f3', 4340000000000000, datetime.datetime(2020, 6, 22, 5, 52), Decimal('117.43'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(761, 'bf6479ecf6fbc11602f4b1c6d848f206', 502000000000, datetime.datetime(2020, 6, 22, 5, 52), Decimal('1.93'), 'fraud_Dickinson-Rempel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(762, '13fc10f61e4282e48b218772357361ed', 2230000000000000, datetime.datetime(2020, 6, 22, 5, 53), Decimal('42.94'), 'fraud_Runolfsson and Sons', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(763, 'b67d290a557dfebc299e64164b38f0e8', 3590000000000000, datetime.datetime(2020, 6, 22, 5, 53), Decimal('108.94'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(764, '8b662a91204c69a22f13afc9c92296e7', 213000000000000, datetime.datetime(2020, 6, 22, 5, 54), Decimal('79.69'), 'fraud_Kunze Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(765, 'd414a152499518967cea9b441457797c', 4480000000000, datetime.datetime(2020, 6, 22, 5, 54), Decimal('37.47'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(766, 'd1be140a528f493e1708903453337ddb', 5000000000000000, datetime.datetime(2020, 6, 22, 5, 54), Decimal('70.44'), 'fraud_Maggio-Fahey', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(767, '58f9ab32a8e2c24241cfa4218de00985', 4220000000000000000, datetime.datetime(2020, 6, 22, 5, 55), Decimal('140.95'), 'fraud_Daugherty, Pouros and Beahan', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(768, 'f1cf92a12090550940a2d5ceedbb7171', 378000000000000, datetime.datetime(2020, 6, 22, 5, 58), Decimal('35.62'), 'fraud_Conroy-Emard', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(769, '6cbfd386b08feb65cb6fc15fbd437521', 3570000000000000, datetime.datetime(2020, 6, 22, 5, 58), Decimal('97.49'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(770, '507d6b26a10e23a0538fae93d380ee9d', 4450000000000000, datetime.datetime(2020, 6, 22, 5, 59), Decimal('100.20'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(771, '45261cb8a4dd17ed43fb9e101dee3576', 30500000000000, datetime.datetime(2020, 6, 22, 5, 59), Decimal('139.69'), 'fraud_Rau and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(772, '16606ad5a0826ce415d45c935c56789f', 2240000000000000, datetime.datetime(2020, 6, 22, 5, 59), Decimal('94.34'), 'fraud_Harris Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(773, 'a82c427805a1422d16d0a073ceb59a6a', 213000000000000, datetime.datetime(2020, 6, 22, 5, 59), Decimal('83.65'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(774, '7bb849ac372d0202a6d1d0846bf8b02f', 4340000000000000, datetime.datetime(2020, 6, 22, 5, 59), Decimal('67.33'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(775, '807f4d0fc641c8fea8146817141b3e6b', 4490000000000000000, datetime.datetime(2020, 6, 23, 0, 0), Decimal('79.03'), 'fraud_Kuvalis Ltd', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(776, '3360fc02c3161a49f59d315f99806e9e', 4220000000000000000, datetime.datetime(2020, 6, 23, 0, 0), Decimal('96.13'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(777, '8940eda2a50a09b0e6abc5dd5e907720', 4650000000000000000, datetime.datetime(2020, 6, 23, 0, 0), Decimal('75.83'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(778, '9ea4d267423edc5974b877f8193c869a', 213000000000000, datetime.datetime(2020, 6, 23, 0, 0), Decimal('68.93'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(779, '9ceafc6d2d04950c32ccec9fe0ab5086', 6010000000000000, datetime.datetime(2020, 6, 23, 0, 1), Decimal('71.35'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(780, '4b8f1588f020c9e74b39044a4a729624', 676000000000, datetime.datetime(2020, 6, 23, 0, 1), Decimal('1.17'), 'fraud_Miller-Harris', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(781, '9496431f77e035a3c39632df4a1f7905', 6010000000000000, datetime.datetime(2020, 6, 23, 0, 2), Decimal('2.37'), 'fraud_Macejkovic-Lesch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(782, '3dd6aacb60ae1cf90f5a694e8da0f3bc', 572000000000, datetime.datetime(2020, 6, 23, 0, 2), Decimal('1.55'), 'fraud_Bauch-Blanda', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(783, 'd404e1d10af10e227df82ec9207d3719', 585000000000, datetime.datetime(2020, 6, 23, 0, 3), Decimal('15.78'), 'fraud_Mohr Inc', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(784, '7969f6d8f4694d462132327815114f6a', 30200000000000, datetime.datetime(2020, 6, 23, 0, 3), Decimal('54.54'), 'fraud_Wiegand-Lowe', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(785, 'b48de5b79fe51385b58ee247386eb723', 4710000000000000, datetime.datetime(2020, 6, 23, 0, 4), Decimal('50.07'), 'fraud_Goodwin-Nitzsche', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(786, 'aeb35e18e407e7f7fe82fabba787d2c7', 3580000000000000, datetime.datetime(2020, 6, 23, 0, 5), Decimal('1.96'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(787, 'c8c8565f9e933e791712710a85876885', 4830000000000000, datetime.datetime(2020, 6, 23, 0, 6), Decimal('113.72'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(788, 'f4987c7b7ad61bb225978e49407583a0', 374000000000000, datetime.datetime(2020, 6, 23, 0, 6), Decimal('211.17'), 'fraud_Bogisich Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(789, 'bbecf72096c4451619fd74f254498105', 639000000000, datetime.datetime(2020, 6, 23, 0, 7), Decimal('139.08'), 'fraud_Denesik and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(790, 'e41a27f76482378ef1f4b7f3f5e00ac1', 4300000000000000000, datetime.datetime(2020, 6, 23, 0, 8), Decimal('29.94'), 'fraud_Yost, Block and Koepp', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(791, '2bf73fa8ee48c131d1704acb198d3dea', 3590000000000000, datetime.datetime(2020, 6, 23, 0, 8), Decimal('137.68'), 'fraud_Kihn Inc', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(792, 'a878c9d2c2df6b964940335911c84264', 213000000000000, datetime.datetime(2020, 6, 23, 0, 8), Decimal('54.73'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(793, 'cc354a12462e35fc292765827919bfbc', 4840000000000000, datetime.datetime(2020, 6, 23, 0, 8), Decimal('47.03'), 'fraud_Spinka Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(794, 'c256a27095eacb27cc3b9c7fd5b19257', 36700000000000, datetime.datetime(2020, 6, 23, 0, 9), Decimal('43.35'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(795, '9974f3ab6b677eeddb71fb05206e640c', 30600000000000, datetime.datetime(2020, 6, 23, 0, 9), Decimal('61.10'), 'fraud_Swaniawski, Bahringer and Ledner', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(796, '1f95176e5cdaa63231b231b785a9fa3a', 4740000000000000000, datetime.datetime(2020, 6, 23, 0, 10), Decimal('81.31'), 'fraud_Heller, Gutmann and Zieme', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(797, 'a668cd043f8c3023c981a94d0964531e', 347000000000000, datetime.datetime(2020, 6, 23, 0, 11), Decimal('113.96'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(798, '77d56085d05f6c105b45c4c9d997d2dd', 4990000000000, datetime.datetime(2020, 6, 23, 0, 11), Decimal('2.21'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(799, '049ccd065bf268724320ce83d96ea08c', 4720000000000000000, datetime.datetime(2020, 6, 23, 0, 11), Decimal('45.77'), 'fraud_Koss and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(800, '4aa29d707d85190fddb1c6139a454360', 630000000000, datetime.datetime(2020, 6, 23, 0, 12), Decimal('63.46'), 'fraud_Robel, Cummerata and Prosacco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(801, '7d78b00e8df447ccac64db14735f9e51', 4150000000000000, datetime.datetime(2020, 6, 23, 0, 12), Decimal('62.38'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(802, '4e62e484c10d8baf12aecf796b374150', 4170000000000000, datetime.datetime(2020, 6, 23, 0, 12), Decimal('37.33'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(803, '85a39fbc988864bba8805cfa545e5276', 4970000000000000, datetime.datetime(2020, 6, 23, 0, 12), Decimal('46.06'), 'fraud_Schuppe-Schuppe', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(804, 'd5fb957f969c1e1674f0449f8feef979', 4860000000000000, datetime.datetime(2020, 6, 23, 0, 14), Decimal('106.40'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(805, 'f3f5cfca085193be0d30a54a28d8c1f5', 6540000000000000, datetime.datetime(2020, 6, 23, 0, 15), Decimal('43.26'), 'fraud_Padberg-Welch', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(806, 'b7fee1394528bb73c31d9bdfeac7cc50', 3580000000000000, datetime.datetime(2020, 6, 23, 0, 15), Decimal('1.46'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(807, '64a92cc71ca5c753214d8f43a5469c19', 6010000000000000, datetime.datetime(2020, 6, 23, 0, 15), Decimal('20.45'), 'fraud_Herman Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(808, '96c487e90678978879660e5c88e1e389', 30100000000000, datetime.datetime(2020, 6, 23, 0, 17), Decimal('195.15'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(809, '2fa4b2d10777a95ae69bb667ae25d30e', 3590000000000000, datetime.datetime(2020, 6, 23, 0, 17), Decimal('62.93'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(810, '6c3800ac08709ec15f91aab005e2e13f', 4910000000000000, datetime.datetime(2020, 6, 23, 0, 18), Decimal('88.39'), 'fraud_Morar Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(811, '73803ae66b463a2234c8b097df19b2c9', 4840000000000000, datetime.datetime(2020, 6, 23, 0, 18), Decimal('26.83'), 'fraud_McDermott-Rice', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(812, '0e85f47de4fc7970ba5e43fe196672c3', 3600000000000000, datetime.datetime(2020, 6, 23, 0, 18), Decimal('461.23'), 'fraud_Zemlak Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(813, '538e5db6f07a3631fe6a4058fbfb4cf4', 2380000000000000, datetime.datetime(2020, 6, 23, 0, 18), Decimal('62.25'), 'fraud_Hills-Olson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(814, '5bbe3375704d882d58918b099a306cf1', 4230000000000000, datetime.datetime(2020, 6, 23, 0, 19), Decimal('57.84'), 'fraud_Rau and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(815, '556be51dbf0ad34d828df74a168e7074', 6010000000000000, datetime.datetime(2020, 6, 23, 0, 19), Decimal('8.96'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(816, '97b6b8ea6d38f42d34667064539a23ca', 3520000000000000, datetime.datetime(2020, 6, 23, 0, 19), Decimal('117.78'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(817, '28d5a5f8cdca1af6b56e0514fcc95172', 4370000000000000000, datetime.datetime(2020, 6, 23, 0, 19), Decimal('86.29'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(818, '93d42b8d91bba62487af10b0e86e63ec', 4900000000000000, datetime.datetime(2020, 6, 23, 0, 19), Decimal('110.54'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(819, '62e7efcc7a598648865d172e52814221', 30100000000000, datetime.datetime(2020, 6, 23, 0, 20), Decimal('197.08'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(820, '2be3a3dcfa3ff879a6a2050ed412153f', 4900000000000000, datetime.datetime(2020, 6, 23, 0, 20), Decimal('89.84'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(821, '45deb6dce8e0aae9c52b28db3261d675', 502000000000, datetime.datetime(2020, 6, 23, 0, 20), Decimal('137.37'), 'fraud_Lesch Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(822, '92420c9ccc03d4941fc7164157605ab6', 3530000000000000, datetime.datetime(2020, 6, 23, 0, 21), Decimal('160.03'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(823, 'a8a2732ff6c624f08145ebf90f123363', 676000000000, datetime.datetime(2020, 6, 23, 0, 21), Decimal('94.45'), \"fraud_Schamberger-O'Keefe\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(824, 'cfc5d7628e8aac3b22726b5ff6e406d3', 4090000000000000000, datetime.datetime(2020, 6, 23, 0, 21), Decimal('125.44'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(825, '94cfdca3682b1828237c566fb84f77c1', 4170000000000, datetime.datetime(2020, 6, 23, 0, 21), Decimal('4.75'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(826, '15673949529d8011903e8e0b3dc7ea43', 4830000000000000, datetime.datetime(2020, 6, 23, 0, 21), Decimal('114.73'), 'fraud_Heidenreich PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(827, 'e096984e89a27a5f97d68a499716f47a', 502000000000, datetime.datetime(2020, 6, 23, 0, 22), Decimal('66.28'), 'fraud_Schmitt Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(828, 'f8848e8c212ae76dc62a8b6078c4eceb', 4980000000000000, datetime.datetime(2020, 6, 23, 0, 22), Decimal('9.91'), 'fraud_Kerluke Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(829, 'cd178b8bf2c2140d470273357c1b1ea5', 3600000000000000, datetime.datetime(2020, 6, 23, 0, 22), Decimal('76.58'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(830, '806cf54402989fcab7374f1a348ee1cd', 4730000000000000, datetime.datetime(2020, 6, 23, 0, 23), Decimal('74.28'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(831, '90692508089172ceecb25bb289ab2f7d', 4180000000000000, datetime.datetime(2020, 6, 23, 0, 24), Decimal('49.00'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(832, '23810b0eafdac6e70e242262a6c233cd', 4900000000000, datetime.datetime(2020, 6, 23, 0, 25), Decimal('57.29'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(833, 'a7f06034cc9443d145632b7bdfed94f2', 4180000000000000, datetime.datetime(2020, 6, 23, 0, 26), Decimal('8.71'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(834, '38bbc73fbb46f12af42e4ded52d62222', 3590000000000000, datetime.datetime(2020, 6, 23, 0, 27), Decimal('74.01'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(835, 'aa46e6c4ddc6c7137b6943c5186040bb', 6540000000000000, datetime.datetime(2020, 6, 23, 0, 27), Decimal('81.34'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(836, '6c0d68e3cbc30252cbb9e0c7ad36d7d8', 4130000000000000, datetime.datetime(2020, 6, 23, 0, 27), Decimal('5.73'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(837, '8f089a2f6d7d292760da40e90eb59276', 180000000000000, datetime.datetime(2020, 6, 23, 0, 27), Decimal('84.93'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(838, '6f6a79b5c9aecf5f6cc0e230664da5cd', 3570000000000000, datetime.datetime(2020, 6, 23, 0, 27), Decimal('67.17'), 'fraud_Welch, Rath and Koepp', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(839, 'ce75dbe0f7b13280047cc958d422df95', 2240000000000000, datetime.datetime(2020, 6, 23, 0, 27), Decimal('49.13'), 'fraud_Huel, Hammes and Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(840, '1339214b1b2c9f2e57438014f9bb04cb', 4710000000000000000, datetime.datetime(2020, 6, 23, 0, 27), Decimal('78.85'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(841, '449263c95cf4c4efcde086848eab3516', 4920000000000000, datetime.datetime(2020, 6, 23, 0, 28), Decimal('121.24'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(842, '1ed0f2594afad5b07e0355888ee84632', 213000000000000, datetime.datetime(2020, 6, 23, 0, 29), Decimal('51.44'), 'fraud_Predovic Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(843, 'd52ff8ee2c648fe1da48ca0772f228a0', 3510000000000000, datetime.datetime(2020, 6, 23, 0, 30), Decimal('127.76'), 'fraud_Weber and Sons', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(844, 'c8cd388e2494de5e3e4891d3e082d974', 4120000000000000, datetime.datetime(2020, 6, 23, 0, 31), Decimal('3.27'), 'fraud_Pouros-Haag', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(845, 'd30f3f433f26d4a1d6451f2878c7f6d3', 584000000000, datetime.datetime(2020, 6, 23, 0, 31), Decimal('48.14'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(846, '95800bbbc6384f3581bd5ef92f4f867a', 4990000000000, datetime.datetime(2020, 6, 23, 0, 31), Decimal('103.15'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(847, 'c0f72f0d881d7b2fd7001e45be518eac', 180000000000000, datetime.datetime(2020, 6, 23, 0, 31), Decimal('82.06'), 'fraud_Halvorson Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(848, 'e9a96f74ae2b76b22a4561171811b524', 30200000000000, datetime.datetime(2020, 6, 23, 0, 32), Decimal('73.02'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(849, '0347f0559f8a7a684ec09507f2b72862', 6570000000000000, datetime.datetime(2020, 6, 23, 0, 33), Decimal('4.34'), 'fraud_Simonis-Prohaska', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(850, 'c7ba1a39010f4452e06ac10802aadfb2', 344000000000000, datetime.datetime(2020, 6, 23, 0, 33), Decimal('40.36'), 'fraud_Jast and Sons', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(851, '43feec1a098b50732bee403ceb1cf54c', 4180000000000000, datetime.datetime(2020, 6, 23, 0, 34), Decimal('12.29'), 'fraud_Flatley-Durgan', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(852, 'e46a4076e56b5574d5b7e540ab85e96f', 4430000000000000, datetime.datetime(2020, 6, 23, 0, 35), Decimal('37.69'), 'fraud_Padberg-Rogahn', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(853, '8f388b60643d99678f98e0de3732c4b0', 4060000000000000, datetime.datetime(2020, 6, 23, 0, 35), Decimal('8.67'), 'fraud_Sawayn PLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(854, 'e204e05c8cc73c830eb11309c4b0ce6e', 6540000000000000, datetime.datetime(2020, 6, 23, 0, 36), Decimal('1.41'), 'fraud_Hickle Group', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(855, '8f135e2fd55cacf53ea593690ebec962', 5130000000000000, datetime.datetime(2020, 6, 23, 0, 36), Decimal('96.07'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(856, '10b0348b2b173bc2e447233bcfb110e4', 2720000000000000, datetime.datetime(2020, 6, 23, 0, 37), Decimal('32.45'), 'fraud_Schmeler Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(857, 'a04b9fac5df3f3fa078ddf5491277289', 6530000000000000, datetime.datetime(2020, 6, 23, 0, 38), Decimal('96.04'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(858, '53324ce1b61c93f9b218f2d775105bc5', 5290000000000000, datetime.datetime(2020, 6, 23, 0, 38), Decimal('67.73'), 'fraud_Heller-Langosh', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(859, '54f167a4b4c1e81e618ea7c5944fb641', 5150000000000000, datetime.datetime(2020, 6, 23, 0, 39), Decimal('61.71'), 'fraud_Paucek-Wiza', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(860, '0116e6b01a7934a5c011b82483d9ffaa', 2250000000000000, datetime.datetime(2020, 6, 23, 0, 39), Decimal('44.26'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(861, 'aaf12c37bb22912371feb2e7d2e7e7a4', 30500000000000, datetime.datetime(2020, 6, 23, 0, 40), Decimal('81.29'), 'fraud_Schmitt Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(862, 'ac0304ae873cfe52c542e1ce805202e2', 4000000000000000, datetime.datetime(2020, 6, 23, 0, 40), Decimal('73.14'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(863, '9918b99b01a868d1d0720b3c0d0ac67b', 2240000000000000, datetime.datetime(2020, 6, 23, 0, 40), Decimal('75.07'), 'fraud_Schmitt Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(864, '5701db39f6ee51dbbcf268ed79964730', 4050000000000000, datetime.datetime(2020, 6, 23, 0, 41), Decimal('2.11'), 'fraud_Kerluke PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(865, 'a7a23bf8e3aed588ccd499ddba3aa647', 30400000000000, datetime.datetime(2020, 6, 23, 0, 41), Decimal('5.87'), 'fraud_Barrows PLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(866, '8a5db9afdff40938da1bf06158ebaf88', 4560000000000000000, datetime.datetime(2020, 6, 23, 0, 41), Decimal('67.07'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(867, 'a0cc4bc163b3604c3d62ab1a9ebfbddf', 2290000000000000, datetime.datetime(2020, 6, 23, 0, 41), Decimal('53.87'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(868, 'f911674742b9bf713454edb1ef19b57f', 561000000000, datetime.datetime(2020, 6, 23, 0, 42), Decimal('2.00'), 'fraud_Williamson LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(869, 'c07961b0a9a619567390c74f3fd8b8fa', 639000000000, datetime.datetime(2020, 6, 23, 0, 43), Decimal('112.41'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(870, '55b0b93a488ef20a25fe29806ba370b4', 676000000000, datetime.datetime(2020, 6, 23, 0, 43), Decimal('53.67'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(871, '6f5cd0fd032d58bed65656d4f4b3756f', 3510000000000000, datetime.datetime(2020, 6, 23, 0, 44), Decimal('6.20'), 'fraud_Fisher Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(872, 'e97e4e113a1a84a21eb0c660ceb5cee5', 5000000000000000, datetime.datetime(2020, 6, 23, 0, 45), Decimal('200.16'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(873, '196f28de1eccda6be65b573fc46b4901', 676000000000, datetime.datetime(2020, 6, 23, 0, 46), Decimal('63.33'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(874, '3fe549739b7ab38a5d939f7edf14e13b', 377000000000000, datetime.datetime(2020, 6, 23, 0, 48), Decimal('82.87'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(875, '93a656cd4970e9566b4865be00630ad0', 4860000000000000000, datetime.datetime(2020, 6, 23, 0, 48), Decimal('66.59'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(876, '78c897819063646c220c3adb3b34a473', 4960000000000, datetime.datetime(2020, 6, 23, 0, 48), Decimal('97.52'), 'fraud_Yost, Block and Koepp', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(877, '705aa9c339b4c8b2bbd4ab71d64be934', 6010000000000000, datetime.datetime(2020, 6, 23, 0, 48), Decimal('48.82'), 'fraud_Smitham-Schiller', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(878, '470b97fded90f3ab70bb65bf58b7de36', 345000000000000, datetime.datetime(2020, 6, 23, 0, 50), Decimal('1.88'), 'fraud_Hermann-Gaylord', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(879, '64381555013509e2efb721be580dd7cf', 4510000000000000, datetime.datetime(2020, 6, 23, 0, 50), Decimal('44.07'), 'fraud_Eichmann, Bogan and Rodriguez', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(880, 'fd38239026918bc9b00147758bfdf3e1', 6540000000000000, datetime.datetime(2020, 6, 23, 0, 50), Decimal('1.86'), 'fraud_Goldner-Lemke', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(881, '99860fd1317a473caeca12bd5c1a01fe', 630000000000, datetime.datetime(2020, 6, 23, 0, 50), Decimal('78.65'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(882, 'e51d1868b943a1ab2a9a19dc22385962', 585000000000, datetime.datetime(2020, 6, 23, 0, 51), Decimal('66.32'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(883, '40054951eff89dd38655e259f68b02ab', 4090000000000000000, datetime.datetime(2020, 6, 23, 0, 51), Decimal('395.08'), 'fraud_Eichmann-Russel', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(884, 'aa4750aff1843e43283b97a5697f6964', 2270000000000000, datetime.datetime(2020, 6, 23, 0, 52), Decimal('7.25'), 'fraud_Mohr Inc', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(885, 'a505e443bb339287bffd7f616e734fc8', 3580000000000000, datetime.datetime(2020, 6, 23, 0, 53), Decimal('25.12'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(886, '5cef25bfe67a82b176a5f62cbc1dfea4', 180000000000000, datetime.datetime(2020, 6, 23, 0, 53), Decimal('100.27'), 'fraud_Padberg-Welch', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(887, 'c75703bd0f78c298702a0eb5a9802ae5', 180000000000000, datetime.datetime(2020, 6, 23, 0, 54), Decimal('7.31'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(888, 'b25ca977d00499f7eb74dde52bf0eebd', 30500000000000, datetime.datetime(2020, 6, 23, 0, 54), Decimal('2.89'), 'fraud_Jast-McDermott', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(889, '73437b82b68342d80165b8ebbb54f558', 3560000000000000, datetime.datetime(2020, 6, 23, 0, 55), Decimal('1.75'), 'fraud_Baumbach, Hodkiewicz and Walsh', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(890, '9bfdf43dbb14c5438ac73050a33fd761', 5000000000000000, datetime.datetime(2020, 6, 23, 0, 55), Decimal('217.85'), 'fraud_Murray-Smitham', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(891, '183f8cecaa308a6f1ba19575933ba9d5', 213000000000000, datetime.datetime(2020, 6, 23, 0, 55), Decimal('81.47'), 'fraud_Harris Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(892, '8b6dd842506166536b381b68a41975ba', 676000000000, datetime.datetime(2020, 6, 23, 0, 55), Decimal('69.39'), 'fraud_Lind, Huel and McClure', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(893, 'd756d4794aa51957ee502c268af61272', 180000000000000, datetime.datetime(2020, 6, 23, 0, 55), Decimal('235.54'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(894, '4fd02352ea813d7c43801ebfadfa8985', 3530000000000000, datetime.datetime(2020, 6, 23, 0, 56), Decimal('133.57'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(895, 'e5c9ea7884968acc452ecee5dd521c8c', 6010000000000000, datetime.datetime(2020, 6, 23, 0, 57), Decimal('169.01'), 'fraud_Gutmann-Upton', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(896, '2f2b236f365d9ef2f69a6e6f4004a0e3', 4150000000000000, datetime.datetime(2020, 6, 23, 0, 58), Decimal('8.44'), 'fraud_Pouros-Haag', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(897, '16dceebf284104e4995b1abcb1260126', 3530000000000000, datetime.datetime(2020, 6, 23, 0, 59), Decimal('92.91'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(898, 'ec07660cb235d5d8aa04b71ec8f4562a', 2700000000000000, datetime.datetime(2020, 6, 23, 1, 2), Decimal('213.10'), 'fraud_Bailey-Morar', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(899, 'd6fc932bf9382fe67a7311ff93cdbb41', 344000000000000, datetime.datetime(2020, 6, 23, 1, 2), Decimal('8.34'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(900, '6f53b7b9ff53401b4456b5eb3ff1d2f6', 581000000000, datetime.datetime(2020, 6, 23, 1, 2), Decimal('128.71'), 'fraud_Schoen, Kuphal and Nitzsche', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(901, 'ef5b2a80dd647765178bffad0dd29ca0', 676000000000, datetime.datetime(2020, 6, 23, 1, 3), Decimal('62.65'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(902, 'fff80eacf2a31b5f26dab56908d8b485', 6010000000000000, datetime.datetime(2020, 6, 23, 1, 3), Decimal('369.61'), 'fraud_Stehr, Jewess and Schimmel', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(903, '2a4c98aa0f078ef95515585dd4e0bcbe', 4560000000000, datetime.datetime(2020, 6, 23, 1, 3), Decimal('47.44'), 'fraud_Kuphal-Predovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(904, 'a5636249bb015b0610df5a391c246b77', 4470000000000000, datetime.datetime(2020, 6, 23, 1, 3), Decimal('42.16'), 'fraud_Christiansen, Goyette and Schamberger', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(905, '532ea1f02a59e8f4fe89e7b8d8e5f015', 30600000000000, datetime.datetime(2020, 6, 23, 1, 3), Decimal('64.18'), 'fraud_Schaefer, Maggio and Daugherty', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(906, '30b1faa614ec52988cede4b60cf6756f', 213000000000000, datetime.datetime(2020, 6, 23, 1, 4), Decimal('19.94'), 'fraud_Auer-West', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(907, 'bc3268a8d63b8309de816ab87446315f', 38500000000000, datetime.datetime(2020, 6, 23, 1, 5), Decimal('136.30'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(908, 'fab20532edaed37da61ef507b4dd53a5', 345000000000000, datetime.datetime(2020, 6, 23, 1, 6), Decimal('98.22'), 'fraud_Greenholt, Jacobi and Gleason', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(909, '6b698f85c8eb633b982e709c072c18a4', 3600000000000000, datetime.datetime(2020, 6, 23, 1, 7), Decimal('84.74'), \"fraud_Lesch, D'Amore and Brown\", 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(910, '4c3e646d5b647481e618f7ad2fe2290c', 630000000000, datetime.datetime(2020, 6, 23, 1, 8), Decimal('108.19'), 'fraud_Huel, Hammes and Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(911, '3f45ac78f477d4c45ac2b0caac9da640', 4510000000000000000, datetime.datetime(2020, 6, 23, 1, 8), Decimal('134.32'), 'fraud_Kuhic Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(912, '7da73d8d0715bbebcd6977e009439eb3', 2270000000000000, datetime.datetime(2020, 6, 23, 1, 9), Decimal('4.51'), 'fraud_Bahringer, Schoen and Corkery', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(913, '066680e041e27ace196ed37c9b45534e', 371000000000000, datetime.datetime(2020, 6, 23, 1, 9), Decimal('28.06'), 'fraud_Pfeffer LLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(914, 'cf614564c44c6df85b17c9e4645b47a8', 4480000000000, datetime.datetime(2020, 6, 23, 1, 10), Decimal('39.78'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(915, '508cb3efb9a9b34b6fb73c0a86278069', 30000000000000, datetime.datetime(2020, 6, 23, 1, 10), Decimal('88.34'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(916, '2460a32b1b21db2be849c04e8112b3e0', 36700000000000, datetime.datetime(2020, 6, 23, 1, 10), Decimal('98.63'), 'fraud_Bahringer, Schoen and Corkery', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(917, 'aa2fc5a22e975b7c5dc69bf49058b4f4', 3520000000000000, datetime.datetime(2020, 6, 23, 1, 11), Decimal('83.87'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(918, '99a389b4c0394747ece2041bd4679900', 4990000000000, datetime.datetime(2020, 6, 23, 1, 11), Decimal('150.33'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(919, 'fc8783dcc1c458b413869f6b963e2a7a', 676000000000, datetime.datetime(2020, 6, 23, 1, 11), Decimal('102.41'), \"fraud_Deckow-O'Conner\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(920, '7dfd9317419fc4cfa53fc299e08369ac', 2250000000000000, datetime.datetime(2020, 6, 23, 1, 12), Decimal('6.98'), 'fraud_Haley Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(921, '4caf5fba928cb4fc5c4c0087fc69e9b5', 30200000000000, datetime.datetime(2020, 6, 23, 1, 12), Decimal('577.69'), 'fraud_Huel-Langworth', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(922, '9e641fb2c00f68dfe6a6332baa77515b', 60427851591, datetime.datetime(2020, 6, 23, 1, 12), Decimal('72.14'), 'fraud_Raynor, Reinger and Hagenes', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(923, '1c86a648583db9ac8f234fe87b6f11f6', 4330000000000000, datetime.datetime(2020, 6, 23, 1, 14), Decimal('18.23'), 'fraud_Turcotte, McKenzie and Koss', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(924, 'ae4a86fe4bccb21b998f5c28e71f4b99', 2240000000000000, datetime.datetime(2020, 6, 23, 1, 15), Decimal('74.99'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(925, '78a459660f679315de1f44932be5673d', 3520000000000000, datetime.datetime(2020, 6, 23, 1, 17), Decimal('6.54'), 'fraud_Rippin, Kub and Mann', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(926, '7df316ca8dbff3da35e1d61d1dfd7ee2', 4940000000000000, datetime.datetime(2020, 6, 23, 1, 18), Decimal('118.95'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(927, '4b74859f0674e17628a2fc1f78e3adc0', 4030000000000000, datetime.datetime(2020, 6, 23, 1, 19), Decimal('3.77'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(928, '89c8e3380f1b9064d646ceca288171a8', 4450000000000000, datetime.datetime(2020, 6, 23, 1, 20), Decimal('137.23'), 'fraud_Stehr, Jewess and Schimmel', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(929, '60c3651f49217f0ff92f033015a6b0e4', 6520000000000000, datetime.datetime(2020, 6, 23, 1, 20), Decimal('844.81'), 'fraud_Douglas, Schneider and Turner', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(930, '099fd31b9adf8737e51557d4652fcdb0', 6010000000000000, datetime.datetime(2020, 6, 23, 1, 20), Decimal('40.10'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(931, '115619b4313e94b92430251b533d6b38', 3560000000000000, datetime.datetime(2020, 6, 23, 1, 20), Decimal('67.71'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(932, '63a8fe5f18950bd2ff827b0cbde2a1de', 4710000000000000, datetime.datetime(2020, 6, 23, 1, 22), Decimal('6.19'), 'fraud_Pouros-Conroy', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(933, 'e4399676d88d5aca6cafe3c1c5092d06', 180000000000000, datetime.datetime(2020, 6, 23, 1, 22), Decimal('176.86'), 'fraud_Nitzsche, Kessler and Wolff', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(934, '6cf50380f537c7ec319c9c64609a4ccf', 4120000000000000, datetime.datetime(2020, 6, 23, 1, 23), Decimal('99.40'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(935, '328cb837d75313e55258f128bf6c5f0c', 676000000000, datetime.datetime(2020, 6, 23, 1, 24), Decimal('106.02'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(936, '71eed5e0e852c0491943011629b0f180', 30200000000000, datetime.datetime(2020, 6, 23, 1, 24), Decimal('2.45'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(937, 'dd19f6445928454280a16f56653779bf', 4250000000000, datetime.datetime(2020, 6, 23, 1, 25), Decimal('264.48'), 'fraud_Hermann-Gaylord', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(938, 'ca95756c22125ae2497ca1f4adf2f2f1', 4970000000000000, datetime.datetime(2020, 6, 23, 1, 26), Decimal('3.40'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(939, 'e62263660269e45460dacb840b00326f', 4430000000000000, datetime.datetime(2020, 6, 23, 1, 26), Decimal('64.80'), 'fraud_Schaefer, Maggio and Daugherty', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(940, '4a8175e8c5b5aef7766be2aa79d6c93e', 4010000000000000, datetime.datetime(2020, 6, 23, 1, 27), Decimal('20.18'), 'fraud_Tromp, Kerluke and Glover', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(941, 'a7f865dfd78d71f2a82304eb86b63e01', 3580000000000000, datetime.datetime(2020, 6, 23, 1, 28), Decimal('70.51'), 'fraud_Skiles-Ankunding', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(942, 'f992ac9c01cef3f7bb7e091d27eafe5d', 4150000000000000, datetime.datetime(2020, 6, 23, 1, 28), Decimal('4.15'), 'fraud_Watsica, Haag and Considine', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(943, 'c2912f31999b7b1ba83ac9815c7e2a93', 30000000000000, datetime.datetime(2020, 6, 23, 1, 29), Decimal('50.10'), 'fraud_Funk Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(944, '01fca6c221124537dd08300b4d491fe9', 2270000000000000, datetime.datetime(2020, 6, 23, 1, 30), Decimal('29.83'), 'fraud_Kling-Grant', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(945, 'c5cad330bbfaeeab6777bab33791b819', 3510000000000000, datetime.datetime(2020, 6, 23, 1, 30), Decimal('14.98'), 'fraud_Schuppe LLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(946, '5458bffb46b7ab9fb7846290afe4ebb1', 502000000000, datetime.datetime(2020, 6, 23, 1, 31), Decimal('40.57'), 'fraud_Reynolds-Schinner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(947, '43670635766bc4994dbd5d5dca26d5dc', 4220000000000000000, datetime.datetime(2020, 6, 23, 1, 31), Decimal('98.40'), 'fraud_DuBuque LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(948, '0e57a0e37ed1207db11fccc90244eeae', 502000000000, datetime.datetime(2020, 6, 23, 1, 31), Decimal('58.27'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(949, 'ac62858ecdc4f1c4ab91d1319d8a14ae', 30200000000000, datetime.datetime(2020, 6, 23, 1, 32), Decimal('4.36'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(950, 'a9c0882d30fa4a85f794709501ef5248', 60422928733, datetime.datetime(2020, 6, 23, 1, 32), Decimal('4.64'), 'fraud_Gibson-Deckow', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(951, '995516a4576fffb4d2274576a204f508', 4100000000000000, datetime.datetime(2020, 6, 23, 1, 32), Decimal('3.04'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(952, '2393c01232fea02195a37518550be661', 372000000000000, datetime.datetime(2020, 6, 23, 1, 32), Decimal('4.81'), 'fraud_McCullough LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(953, 'e765e4c4212186c5459ea39ebd509f44', 4490000000000000, datetime.datetime(2020, 6, 23, 1, 33), Decimal('235.79'), 'fraud_Auer-Mosciski', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(954, 'c2e91267c2f2b0df0f9b8e977b77bcc9', 4320000000000000000, datetime.datetime(2020, 6, 23, 1, 33), Decimal('127.04'), 'fraud_Heidenreich PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(955, '2478b88f5fd363367497b604724c36a8', 630000000000, datetime.datetime(2020, 6, 23, 1, 34), Decimal('5.15'), 'fraud_Lebsack and Sons', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(956, '916447241b0e3f4ac7198e30e33b24fa', 4660000000000000, datetime.datetime(2020, 6, 23, 1, 34), Decimal('11.97'), 'fraud_Lind-Buckridge', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(957, '72481d70425389a0ac8d2f3512242e90', 30400000000000, datetime.datetime(2020, 6, 23, 1, 35), Decimal('44.05'), 'fraud_Hills-Olson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(958, '4cb93473de72cba2f166ef614b4dcc41', 2250000000000000, datetime.datetime(2020, 6, 23, 1, 35), Decimal('40.80'), 'fraud_Lind, Huel and McClure', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(959, '070fe4d4ec2ddd2632c04d6f9afe3b48', 4640000000000000, datetime.datetime(2020, 6, 23, 1, 35), Decimal('72.11'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(960, '89494f50e044b797fe44a20ca5512790', 2660000000000000, datetime.datetime(2020, 6, 23, 1, 36), Decimal('114.57'), 'fraud_Heidenreich PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(961, '044d8b12811837fdea0318d2c1e3623e', 180000000000000, datetime.datetime(2020, 6, 23, 1, 36), Decimal('17.96'), 'fraud_McGlynn-Jaskolski', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(962, '042a35606a044cf96ed788be4cf6e293', 377000000000000, datetime.datetime(2020, 6, 23, 1, 37), Decimal('7.55'), 'fraud_Denesik and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(963, 'dd41d4db60f50b77356ddf6174d9f780', 343000000000000, datetime.datetime(2020, 6, 23, 1, 37), Decimal('58.76'), 'fraud_Brekke and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(964, '98f31524a68d652ea94ada5d680df7e9', 30500000000000, datetime.datetime(2020, 6, 23, 1, 38), Decimal('6.15'), 'fraud_Turcotte-Halvorson', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(965, '10e4d93c562eedcc349c6ba0a34b0d7c', 4480000000000, datetime.datetime(2020, 6, 23, 1, 38), Decimal('80.00'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(966, '4b1532f8e6e8ee281bd8208d50dd89cc', 344000000000000, datetime.datetime(2020, 6, 23, 1, 38), Decimal('1.15'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(967, '992ba54e85ed0690b703c95b7c90e7da', 2230000000000000, datetime.datetime(2020, 6, 23, 1, 39), Decimal('101.14'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(968, 'ce429cd07e0a3cddbd75bad35d102d3d', 38300000000000, datetime.datetime(2020, 6, 23, 1, 39), Decimal('6.93'), 'fraud_Durgan-Auer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(969, '52f6ea895d3f7508f376bd67cbfe7e42', 213000000000000, datetime.datetime(2020, 6, 23, 1, 40), Decimal('8.83'), 'fraud_Lynch Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(970, '02afee36c325cb4d5836138102e28e8b', 630000000000, datetime.datetime(2020, 6, 23, 1, 41), Decimal('9.17'), 'fraud_Reynolds-Schinner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(971, '38c5603ba6c3ea566bcc20b4942374aa', 342000000000000, datetime.datetime(2020, 6, 23, 1, 41), Decimal('39.05'), 'fraud_Stamm-Rodriguez', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(972, '7d46e1f53afeacb103b8c447ea70c6e5', 6590000000000000, datetime.datetime(2020, 6, 23, 1, 41), Decimal('74.26'), 'fraud_Huel, Hammes and Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(973, '7ef9f34cd012e418e155ba49dba646c3', 375000000000000, datetime.datetime(2020, 6, 23, 1, 42), Decimal('47.49'), 'fraud_Murray Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(974, '3c64b6cba15c4689ad0dcd51945dfc22', 4540000000000, datetime.datetime(2020, 6, 23, 1, 43), Decimal('65.04'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(975, '1e2f1c7eda8b69b0e621937ad70fbb9f', 3530000000000000, datetime.datetime(2020, 6, 23, 1, 43), Decimal('70.68'), 'fraud_Lockman, West and Runte', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(976, '751c9813132f98a0219b5d21338f6242', 4290000000000000000, datetime.datetime(2020, 6, 23, 1, 44), Decimal('74.33'), 'fraud_Cummings LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(977, 'f5bbb7c21dd309793bbc78274b6ff507', 213000000000000, datetime.datetime(2020, 6, 23, 1, 45), Decimal('2.22'), 'fraud_Jast Ltd', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(978, '0cd78bb71be5c6350069f16af5e85196', 3580000000000000, datetime.datetime(2020, 6, 23, 1, 45), Decimal('2.42'), 'fraud_McDermott-Rice', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(979, 'aa6a8a3b9413bccbd1dd0be84ac5d204', 60487002085, datetime.datetime(2020, 6, 23, 1, 46), Decimal('63.07'), 'fraud_Skiles-Ankunding', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(980, 'd826e5577325a0e767611cbd18217515', 4480000000000, datetime.datetime(2020, 6, 23, 1, 46), Decimal('45.37'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(981, 'd889b44342c02aca186e9827140da0ff', 4300000000000000, datetime.datetime(2020, 6, 23, 1, 46), Decimal('186.52'), 'fraud_Lind-Buckridge', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(982, 'd19c0c5c38b35de087e86f6831a2c274', 36200000000000, datetime.datetime(2020, 6, 23, 1, 47), Decimal('59.25'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(983, 'ab2547210b733954cd687ca9c5ff41c7', 4080000000000, datetime.datetime(2020, 6, 23, 1, 47), Decimal('154.53'), \"fraud_Schamberger-O'Keefe\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(984, '2d4fd074a360df22ab62af2c53fa8e00', 60487002085, datetime.datetime(2020, 6, 23, 1, 47), Decimal('50.52'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(985, '8372e114ae27b4d97a36eacb57a73fc6', 4170000000000000, datetime.datetime(2020, 6, 23, 1, 49), Decimal('69.40'), 'fraud_Wuckert-Walter', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(986, '8e8efba1077cac854d888dcc566fa24e', 3550000000000000, datetime.datetime(2020, 6, 23, 1, 49), Decimal('7.59'), 'fraud_Larson-Moen', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(987, '20f75b8bc49edadd7905fc13acbcc8e2', 371000000000000, datetime.datetime(2020, 6, 23, 1, 49), Decimal('35.40'), 'fraud_Hackett-Lueilwitz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(988, 'd69c7adae94f21a779627ff31daa7893', 213000000000000, datetime.datetime(2020, 6, 23, 1, 50), Decimal('5.70'), 'fraud_Rempel Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(989, '13b1d7343f1aaf5b5102f68a635bf8db', 347000000000000, datetime.datetime(2020, 6, 23, 1, 50), Decimal('98.87'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(990, 'a7d3f9a1573cf04723e3748fffe82bfb', 2270000000000000, datetime.datetime(2020, 6, 23, 1, 50), Decimal('61.75'), 'fraud_Howe PLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(991, '6fd9f6af24444642bae16b867fef093e', 213000000000000, datetime.datetime(2020, 6, 23, 1, 50), Decimal('48.85'), 'fraud_Streich, Hansen and Veum', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(992, '78e8b47dbd36c745d0c74496da63a54a', 4220000000000000000, datetime.datetime(2020, 6, 23, 1, 51), Decimal('54.56'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(993, '563a420b5d60e237056adf2a64a103b8', 4660000000000000, datetime.datetime(2020, 6, 23, 1, 51), Decimal('64.47'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(994, 'c898eb6861c70fb44111be5a7b948d59', 348000000000000, datetime.datetime(2020, 6, 23, 1, 52), Decimal('147.54'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(995, '586a0bf1af621ede012ad44cf872c125', 30000000000000, datetime.datetime(2020, 6, 23, 1, 55), Decimal('112.32'), 'fraud_Volkman Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(996, '1418a56bf1b86dd0b991802fc9e40394', 6590000000000000, datetime.datetime(2020, 6, 23, 1, 55), Decimal('63.09'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(997, '89b0de2cc2461e3db6caf6e1c2d00432', 3530000000000000, datetime.datetime(2020, 6, 23, 1, 56), Decimal('143.52'), 'fraud_Kutch and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(998, '5fa86c9f6dea969b2ea93b04afe0a72b', 180000000000000, datetime.datetime(2020, 6, 23, 1, 57), Decimal('102.05'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(999, '3c0a2da15335930646eb6f12e3c4e682', 342000000000000, datetime.datetime(2020, 6, 23, 1, 58), Decimal('1.62'), 'fraud_Dickinson Ltd', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1000, 'eda4b94b2e8eed158795c2a61799be8e', 30300000000000, datetime.datetime(2020, 6, 23, 1, 58), Decimal('75.95'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1001, '30e1af2b91d19555f334ad62de5a6aa8', 5390000000000000, datetime.datetime(2020, 6, 23, 1, 58), Decimal('20.88'), 'fraud_Boyer PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1002, '46dfe87514f4bbfa22cb3bb167d2d48e', 377000000000000, datetime.datetime(2020, 6, 23, 1, 58), Decimal('33.80'), 'fraud_Kihn-Schuster', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1003, '6ca8a3b2c825dad7e45e059520e164a2', 3530000000000000, datetime.datetime(2020, 6, 23, 1, 59), Decimal('79.92'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1004, 'd30d0691c7a6262eb64347187fa1abd5', 5360000000000000, datetime.datetime(2020, 6, 23, 1, 59), Decimal('57.41'), 'fraud_Collier Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1005, '0fd95cbeb60eec99ca47b30ff0b42948', 676000000000, datetime.datetime(2020, 6, 23, 2, 0), Decimal('5.69'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1006, '390c48f73999ced55c7ae9d15d9e4652', 30300000000000, datetime.datetime(2020, 6, 23, 2, 0), Decimal('7.04'), 'fraud_Cormier LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1007, '92843a891108530949721fb9b0bbec5f', 3550000000000000, datetime.datetime(2020, 6, 23, 2, 0), Decimal('79.77'), 'fraud_Morar Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1008, '1e33098da23a9bd54b43857d134642d0', 371000000000000, datetime.datetime(2020, 6, 23, 2, 0), Decimal('18.02'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1009, 'ec088645b9d6697ba42669720ddb228d', 4830000000000000, datetime.datetime(2020, 6, 23, 2, 0), Decimal('39.92'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1010, '2a7984148d315fde1709efb508c3b160', 2260000000000000, datetime.datetime(2020, 6, 23, 2, 1), Decimal('344.27'), 'fraud_Corwin-Gorczany', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1011, '99ded158b97f6779952135c99c0fd202', 378000000000000, datetime.datetime(2020, 6, 23, 2, 1), Decimal('9.33'), 'fraud_Tillman, Fritsch and Schmitt', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1012, '6907206bdfe9a0dab43528193d118e62', 2310000000000000, datetime.datetime(2020, 6, 23, 2, 2), Decimal('9.31'), 'fraud_Terry, Johns and Bins', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1013, '7c98e0d479cd4d1cd868ddf31281a75f', 3600000000000000, datetime.datetime(2020, 6, 23, 2, 2), Decimal('183.03'), 'fraud_Spencer-Runolfsson', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1014, 'bd2f24a94032170f92448d14003c00c8', 6010000000000000, datetime.datetime(2020, 6, 23, 2, 2), Decimal('4.21'), 'fraud_Rippin, Kub and Mann', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1015, 'a55ecd593a8435612ee0b837cc19c89e', 4600000000000000000, datetime.datetime(2020, 6, 23, 2, 2), Decimal('54.87'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1016, '989b14321f588bec830367d97064b277', 4450000000000000, datetime.datetime(2020, 6, 23, 2, 2), Decimal('34.98'), 'fraud_Boehm, Predovic and Reinger', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1017, '86f7ccb05d8fe898c0c86826fe649c87', 572000000000, datetime.datetime(2020, 6, 23, 2, 3), Decimal('19.67'), 'fraud_Dickinson Ltd', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1018, 'af42c655a699cd7efeea43a8bb991bf1', 371000000000000, datetime.datetime(2020, 6, 23, 2, 3), Decimal('219.60'), 'fraud_Donnelly PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1019, 'd531b4a4d4d1676d34d624428dc1eb7c', 3570000000000000, datetime.datetime(2020, 6, 23, 2, 3), Decimal('4.03'), 'fraud_Fadel, Mertz and Rippin', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1020, 'ceae41a06f60b317a7ea306929b5c941', 377000000000000, datetime.datetime(2020, 6, 23, 2, 3), Decimal('51.94'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1021, '2c6be0dc6299a0116df79d788b5913f6', 4820000000000000, datetime.datetime(2020, 6, 23, 2, 4), Decimal('67.66'), 'fraud_Kutch-Hegmann', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1022, 'a3ca4dbc5f161ed47a3f87fc700bac23', 582000000000, datetime.datetime(2020, 6, 23, 2, 4), Decimal('95.21'), 'fraud_Kiehn-Emmerich', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1023, '65727f75dc7c716336fd2a23730e6bcb', 6590000000000000, datetime.datetime(2020, 6, 23, 2, 4), Decimal('112.67'), 'fraud_Paucek-Wiza', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1024, 'b7a449ec9842449cfabcc973348f4053', 4290000000000000000, datetime.datetime(2020, 6, 23, 2, 5), Decimal('219.83'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1025, 'e8bd1065b1c193a0ee557b0ae63cfe0d', 4680000000000000, datetime.datetime(2020, 6, 23, 2, 6), Decimal('135.21'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1026, 'e54a39924191cec6fcec86c66a9cb557', 4620000000000, datetime.datetime(2020, 6, 23, 2, 6), Decimal('4.33'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1027, '4c44bd1dc762c5f6b9cd378570a2115a', 4120000000000000, datetime.datetime(2020, 6, 23, 2, 6), Decimal('427.23'), 'fraud_Mosciski, Ziemann and Farrell', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1028, 'aa3bd38b08f5b4232aeef05e385c9096', 3520000000000000, datetime.datetime(2020, 6, 23, 2, 6), Decimal('6.22'), 'fraud_Pouros-Conroy', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1029, '73ef52d45c37c5b3269a06bf5202a996', 30200000000000, datetime.datetime(2020, 6, 23, 2, 6), Decimal('7.52'), 'fraud_Douglas, Schneider and Turner', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1030, '70cf982de12b0cf81509f756477b4b6a', 3590000000000000, datetime.datetime(2020, 6, 23, 2, 6), Decimal('68.88'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1031, 'f488734859777d017f790c64b77753c9', 180000000000000, datetime.datetime(2020, 6, 23, 2, 7), Decimal('99.84'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1032, 'e33788c75ff4bd14b7deacfea4e0260d', 4210000000000000000, datetime.datetime(2020, 6, 23, 2, 7), Decimal('97.81'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1033, 'f489a369677a8169a0fd08d605e97781', 4970000000000000000, datetime.datetime(2020, 6, 23, 2, 7), Decimal('4.94'), 'fraud_Padberg-Rogahn', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1034, '60ace3074d8b299d04dccaafbc94341e', 30200000000000, datetime.datetime(2020, 6, 23, 2, 8), Decimal('64.73'), 'fraud_Brekke and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1035, '0997a6aa29f467c14691608192b08cb9', 4480000000000000, datetime.datetime(2020, 6, 23, 2, 9), Decimal('39.18'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1036, '010e2422ca3ed54b63fb1b0d9b9d8705', 213000000000000, datetime.datetime(2020, 6, 23, 2, 10), Decimal('2.92'), 'fraud_Hudson-Grady', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1037, 'e0fa473cf6df4a755aa1553eb8533cdd', 30100000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('82.64'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1038, '75b923ebe9d1c5f114852f5a13eed6e2', 378000000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('81.47'), 'fraud_Bashirian Group', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1039, '6105b44c3716d7ab9f2fa1c240467edb', 38900000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('7.26'), 'fraud_McGlynn-Heathcote', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1040, 'd763d4685350442b916dbfe2b3f1f30b', 4170000000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('46.99'), 'fraud_Hintz-Bruen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1041, '35589d53273f62e7bcfed7929af486b6', 376000000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('2.70'), 'fraud_Hills-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1042, '627fe56f897a04b7cf19a03b56074511', 2280000000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('69.20'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1043, '2ebb1024251d0ef968a98243bbf4bf2f', 370000000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('59.54'), 'fraud_Brekke and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1044, 'cc1212a3d18576ab9020dc88364402d0', 4220000000000, datetime.datetime(2020, 6, 23, 2, 13), Decimal('65.06'), 'fraud_Haag-Blanda', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1045, '31e11b3d2d74025ab7fccb00055ef824', 4450000000000000, datetime.datetime(2020, 6, 23, 2, 14), Decimal('47.75'), 'fraud_Cassin-Harvey', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1046, '8a4d98a9e23236075b837cfaa71101cf', 377000000000000, datetime.datetime(2020, 6, 23, 2, 14), Decimal('84.97'), 'fraud_Miller-Hauck', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1047, '0af823b160a2a5678d10648badc74542', 341000000000000, datetime.datetime(2020, 6, 23, 2, 15), Decimal('5.38'), 'fraud_Haley, Jewess and Bechtelar', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1048, 'd342d8ae6346f485d2fbe623978b5780', 3560000000000000, datetime.datetime(2020, 6, 23, 2, 15), Decimal('25.06'), 'fraud_Kilback and Sons', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1049, 'd5879610328d24c1fb67ed002011876b', 213000000000000, datetime.datetime(2020, 6, 23, 2, 16), Decimal('8.41'), 'fraud_Boyer PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1050, '9a337e5a9e7424f87942b5619ec82cd9', 4380000000000000000, datetime.datetime(2020, 6, 23, 2, 16), Decimal('66.25'), 'fraud_Heller, Gutmann and Zieme', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1051, '9637bcb650edc6e658f81e67ef3b5083', 676000000000, datetime.datetime(2020, 6, 23, 2, 17), Decimal('131.30'), 'fraud_Schmeler Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1052, 'b80e979a4aab0a77dc35b810a58c3360', 30500000000000, datetime.datetime(2020, 6, 23, 2, 17), Decimal('88.74'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1053, 'f6274292dc4ad92316cf5e53b99f1f6b', 3580000000000000, datetime.datetime(2020, 6, 23, 2, 17), Decimal('83.73'), 'fraud_Kiehn Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1054, '215e3a1f8cfddd7efd6fb384c1b2beeb', 4270000000000000, datetime.datetime(2020, 6, 23, 2, 17), Decimal('68.37'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1055, 'eb5a236e75a27a8d6775f00232bae526', 630000000000, datetime.datetime(2020, 6, 23, 2, 17), Decimal('64.18'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1056, '838be402808e4329500d65b3e3312b9d', 4510000000000000000, datetime.datetime(2020, 6, 23, 2, 18), Decimal('3.35'), 'fraud_Kerluke PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1057, '664531cf9fb32276a9d8a26f68a4f45b', 6510000000000000, datetime.datetime(2020, 6, 23, 2, 18), Decimal('156.58'), 'fraud_Wolf Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1058, '5223d6beb418daa68fae1696dad59cb9', 2710000000000000, datetime.datetime(2020, 6, 23, 2, 18), Decimal('3.99'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1059, 'ad3d818ae64930d8f9faf5fb649531d4', 676000000000, datetime.datetime(2020, 6, 23, 2, 19), Decimal('38.61'), 'fraud_Larson-Moen', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1060, 'c23177455ad0a067df71ad99a363e8a1', 4630000000000000, datetime.datetime(2020, 6, 23, 2, 20), Decimal('4.44'), 'fraud_Rippin, Kub and Mann', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1061, '81016c92ef977cadada83732e49c316a', 4960000000000000000, datetime.datetime(2020, 6, 23, 2, 21), Decimal('1.83'), 'fraud_Jast Ltd', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1062, 'ff05b6f6b6216b4032379c4b4feb9c48', 4070000000000, datetime.datetime(2020, 6, 23, 2, 22), Decimal('6.85'), 'fraud_Schuppe, Nolan and Hoeger', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1063, '9a8bbc5f53bb22cc59967282a94fb22d', 3580000000000000, datetime.datetime(2020, 6, 23, 2, 23), Decimal('10.38'), 'fraud_Flatley-Durgan', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1064, '5597eb8fd2c878d069bc651cfc5fee11', 30200000000000, datetime.datetime(2020, 6, 23, 2, 23), Decimal('63.52'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1065, '12f2bf4fdff224905afa16b7874535c3', 4090000000000000000, datetime.datetime(2020, 6, 23, 2, 25), Decimal('78.58'), 'fraud_Kohler, Lindgren and Koelpin', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1066, '29455ebcbcb70fad1d5536550826a39b', 3540000000000000, datetime.datetime(2020, 6, 23, 2, 25), Decimal('94.66'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1067, '3028c1a8208e72e13da5cc65344090ec', 3500000000000000, datetime.datetime(2020, 6, 23, 2, 26), Decimal('89.34'), \"fraud_Deckow-O'Conner\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1068, '3c4675c47913c1349bf6e5735eeeb6a1', 180000000000000, datetime.datetime(2020, 6, 23, 2, 26), Decimal('71.99'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1069, '94614ee8c3774cf62d25d1cd90c51f7f', 4790000000000, datetime.datetime(2020, 6, 23, 2, 27), Decimal('133.61'), 'fraud_Douglas-White', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1070, '7c3dfd359a63de19c9d7b3111122f707', 2720000000000000, datetime.datetime(2020, 6, 23, 2, 27), Decimal('79.97'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1071, '8b243517a0f093c2413cd7de1505638b', 4380000000000, datetime.datetime(2020, 6, 23, 2, 28), Decimal('89.76'), 'fraud_Greenholt, Jacobi and Gleason', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1072, 'b52f91b99f8d8565815d9ea103cd0d64', 4810000000000000000, datetime.datetime(2020, 6, 23, 2, 29), Decimal('65.44'), 'fraud_Robel, Cummerata and Prosacco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1073, '275380ffe49cc2d51b4daa1946df531f', 6540000000000000, datetime.datetime(2020, 6, 23, 2, 31), Decimal('63.24'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1074, 'edafe78f4db08715275f467f57972b37', 3510000000000000, datetime.datetime(2020, 6, 23, 2, 31), Decimal('4.43'), 'fraud_Wiza, Schaden and Stark', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1075, 'f97f8db904968b081d3818a0a39546cb', 502000000000, datetime.datetime(2020, 6, 23, 2, 31), Decimal('38.52'), 'fraud_Wisozk and Sons', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1076, '466b9a4af7451074ecccb8a3e90fc91a', 36700000000000, datetime.datetime(2020, 6, 23, 2, 32), Decimal('621.95'), 'fraud_Halvorson Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1077, '85de12ad5c0c44a4b636424f382c7779', 378000000000000, datetime.datetime(2020, 6, 23, 2, 33), Decimal('136.31'), 'fraud_Kihn-Schuster', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1078, '58aa59236e22616330ac38ef0ce8838d', 3570000000000000, datetime.datetime(2020, 6, 23, 2, 33), Decimal('81.49'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1079, 'eb160da5a6a5e7367838709ad96dcb39', 376000000000000, datetime.datetime(2020, 6, 23, 2, 33), Decimal('65.97'), 'fraud_Welch Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1080, '8fb65b7bec69f58d0d85327cc493557d', 4710000000000000000, datetime.datetime(2020, 6, 23, 2, 33), Decimal('8.75'), 'fraud_Bahringer, Schoen and Corkery', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1081, 'ad2f496785a001d78fa31973876f010c', 4650000000000000000, datetime.datetime(2020, 6, 23, 2, 33), Decimal('82.44'), 'fraud_Hackett-Lueilwitz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1082, '24b843b21809cc2df35a7d85b6b4b0ab', 676000000000, datetime.datetime(2020, 6, 23, 2, 34), Decimal('10.25'), 'fraud_Cormier, Stracke and Thiel', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1083, 'b009aeac7cd0e959bcd2cf25aa16799c', 4300000000000000, datetime.datetime(2020, 6, 23, 2, 34), Decimal('53.97'), 'fraud_Kuhic Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1084, '91011acc8a7c6302fcee3bbc2b564d62', 180000000000000, datetime.datetime(2020, 6, 23, 2, 34), Decimal('313.67'), 'fraud_Halvorson Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1085, 'be62140857a9a475d3e5b273ce12537b', 4970000000000000000, datetime.datetime(2020, 6, 23, 2, 34), Decimal('67.22'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1086, '60fdf377f3caa740edd8c4cc1e813215', 30400000000000, datetime.datetime(2020, 6, 23, 2, 35), Decimal('100.98'), 'fraud_Lockman Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1087, '92e16c92678411e7d6c63bcf483c3ed3', 2250000000000000, datetime.datetime(2020, 6, 23, 2, 36), Decimal('130.34'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1088, '2747d920f604332866bd78a4ff9fd927', 213000000000000, datetime.datetime(2020, 6, 23, 2, 36), Decimal('37.22'), 'fraud_Marks Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1089, 'd418d63cfb4b4bd0d14e0d371f42a85a', 4900000000000000, datetime.datetime(2020, 6, 23, 2, 36), Decimal('32.06'), 'fraud_Rowe-Vandervort', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1090, '228fee1727b19d1f508a77a2269225ca', 4910000000000000, datetime.datetime(2020, 6, 23, 2, 36), Decimal('62.49'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1091, 'e2a0da090b1b838b1ed5377e77c36c2d', 3500000000000000, datetime.datetime(2020, 6, 23, 2, 36), Decimal('28.88'), 'fraud_Padberg-Welch', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1092, 'e6bcde82bc2aac900f560df24bb0f56e', 4330000000000000, datetime.datetime(2020, 6, 23, 2, 38), Decimal('8.10'), 'fraud_Jast Ltd', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1093, '54d5f989e08c3c3f07b8ad618f13e71c', 2290000000000000, datetime.datetime(2020, 6, 23, 2, 38), Decimal('5.82'), 'fraud_Dickinson Ltd', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1094, 'b4d1c7a18950364a58dd241f6da81680', 4150000000000000, datetime.datetime(2020, 6, 23, 2, 38), Decimal('32.46'), 'fraud_Towne LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1095, 'a9b31bd1b7037897519ff944ddc4443f', 345000000000000, datetime.datetime(2020, 6, 23, 2, 39), Decimal('24.50'), 'fraud_Rempel PLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1096, '720d13fbcaffef9485469ccc09df8322', 4200000000000, datetime.datetime(2020, 6, 23, 2, 39), Decimal('79.02'), 'fraud_Berge LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1097, '637e775dd1c07125ee6253683807296a', 4150000000000000, datetime.datetime(2020, 6, 23, 2, 39), Decimal('54.57'), 'fraud_Emmerich-Luettgen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1098, '25e5eb3da0e95765dcb43bd2fe341da7', 4580000000000000000, datetime.datetime(2020, 6, 23, 2, 40), Decimal('57.92'), 'fraud_Smitham-Schiller', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1099, '28917c4934b33b4c7a8469747fc1daad', 180000000000000, datetime.datetime(2020, 6, 23, 2, 40), Decimal('194.47'), 'fraud_Vandervort-Funk', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1100, '433553f659a7a322568d6536bb5bb32f', 3540000000000000, datetime.datetime(2020, 6, 23, 2, 41), Decimal('51.32'), 'fraud_Moen, Reinger and Murphy', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1101, '454b43accc139a00e78fca112be69121', 4220000000000, datetime.datetime(2020, 6, 23, 2, 41), Decimal('4.00'), 'fraud_Cruickshank-Mills', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1102, '1d19bb6b899286db3a0b026eff1c3b02', 4610000000000, datetime.datetime(2020, 6, 23, 2, 43), Decimal('129.22'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1103, '1979379aae139c98b7244b5291efd038', 4560000000000, datetime.datetime(2020, 6, 23, 2, 44), Decimal('73.76'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1104, 'fd206a2110795038bab74d68e194dfec', 213000000000000, datetime.datetime(2020, 6, 23, 2, 44), Decimal('9.62'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1105, '8b2c405c071f949cfda54afe749ac142', 3590000000000000, datetime.datetime(2020, 6, 23, 2, 44), Decimal('1.66'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1106, '7c32c0205c992b1bc4414f1b70ed70d4', 342000000000000, datetime.datetime(2020, 6, 23, 2, 44), Decimal('74.99'), 'fraud_Tillman, Dickinson and Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1107, 'f5e541b8bec4077b615aec1669911283', 4510000000000000, datetime.datetime(2020, 6, 23, 2, 45), Decimal('6.26'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1108, 'b005d2430811289e0c409c80b2d623a7', 4100000000000000, datetime.datetime(2020, 6, 23, 2, 45), Decimal('56.38'), 'fraud_Harris Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1109, '535441cc6040b86343e9187c5c43fab2', 379000000000000, datetime.datetime(2020, 6, 23, 2, 45), Decimal('2.72'), 'fraud_Nitzsche, Kessler and Wolff', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1110, '90955100c72a293473707278c2f9d154', 180000000000000, datetime.datetime(2020, 6, 23, 2, 46), Decimal('6.82'), 'fraud_Torphy-Goyette', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1111, '4de1087e0fc7148ce7fa20d061bffa4b', 3590000000000000, datetime.datetime(2020, 6, 23, 2, 46), Decimal('63.81'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1112, 'f568e27fcb4d2c8b95a46fddd7a913a3', 4500000000000000000, datetime.datetime(2020, 6, 23, 2, 48), Decimal('87.44'), 'fraud_Padberg-Welch', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1113, '1f22a9590cbd200df9ab1c8fdc3d1323', 676000000000, datetime.datetime(2020, 6, 23, 2, 48), Decimal('202.62'), 'fraud_Johns-Hoeger', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1114, 'fe19f6cc50dde54f7bfdc373c396cc27', 2240000000000000, datetime.datetime(2020, 6, 23, 2, 48), Decimal('73.65'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1115, '046c82a88611702d4b6bbbb3fbe74250', 374000000000000, datetime.datetime(2020, 6, 23, 2, 49), Decimal('117.69'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1116, '93770d005291d7c1b1d371bcd92d2e36', 30200000000000, datetime.datetime(2020, 6, 23, 2, 49), Decimal('66.93'), 'fraud_Kutch LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1117, 'b394f92e4966d9b8ad4a4b39b22836cb', 3520000000000000, datetime.datetime(2020, 6, 23, 2, 50), Decimal('4.12'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1118, '022477161019dcd10f37c5dfee0ccd51', 2300000000000000, datetime.datetime(2020, 6, 23, 2, 50), Decimal('50.43'), 'fraud_Cummings LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1119, '6d19a157f9920accf7db0d1899478ece', 30400000000000, datetime.datetime(2020, 6, 23, 2, 51), Decimal('2.95'), 'fraud_Beier-Hyatt', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1120, '095906a3d1997a05d6153181d2e356a5', 3560000000000000, datetime.datetime(2020, 6, 23, 2, 51), Decimal('277.57'), 'fraud_Welch Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1121, 'd59c29408c02c89d796cbeff2adc8400', 4430000000000000, datetime.datetime(2020, 6, 23, 2, 52), Decimal('97.98'), 'fraud_Harris, Gusikowski and Heaney', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1122, '0c133087769677adb66bd24728ee5ab7', 4300000000000000, datetime.datetime(2020, 6, 23, 2, 52), Decimal('34.72'), 'fraud_Parker, Nolan and Trantow', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1123, 'bdbcda53e80b8382add1d82a2822d308', 3550000000000000, datetime.datetime(2020, 6, 23, 2, 52), Decimal('46.25'), 'fraud_Emard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1124, 'eaff05da55e3263b875107869b2c79f2', 3520000000000000, datetime.datetime(2020, 6, 23, 2, 53), Decimal('3.20'), 'fraud_Jast Ltd', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1125, '9748b28dc8a026145302359b14a4bfc0', 378000000000000, datetime.datetime(2020, 6, 23, 2, 53), Decimal('63.22'), 'fraud_Kutch, Steuber and Gerhold', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1126, 'b92ad22212d88a39d7c7a15b90aef98f', 6600000000000000, datetime.datetime(2020, 6, 23, 2, 53), Decimal('133.07'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1127, '4701a7c765795e063132e191ee70638e', 4770000000000000, datetime.datetime(2020, 6, 23, 2, 53), Decimal('148.88'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1128, 'c8dc324699b7cafa45704a48d5b7346d', 371000000000000, datetime.datetime(2020, 6, 23, 2, 53), Decimal('68.31'), 'fraud_Kutch-Hegmann', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1129, '67607be5217a553aaab563fc4f05d953', 584000000000, datetime.datetime(2020, 6, 23, 2, 54), Decimal('66.30'), 'fraud_Howe PLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1130, '73d772c3ee7bfa4e011ec57507211511', 4990000000000, datetime.datetime(2020, 6, 23, 2, 55), Decimal('106.40'), \"fraud_Schamberger-O'Keefe\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1131, '2af12d3e30fcceac319f1842cb9edd40', 4220000000000000000, datetime.datetime(2020, 6, 23, 2, 55), Decimal('122.20'), 'fraud_Turner and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1132, 'f642a27dac88564ec929a6b378791145', 3580000000000000, datetime.datetime(2020, 6, 23, 2, 55), Decimal('5.13'), 'fraud_Lind-Buckridge', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1133, '5f28e94ec2fe688ecc2352e4bc2b057c', 585000000000, datetime.datetime(2020, 6, 23, 2, 55), Decimal('22.07'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1134, '8eaf95adfa4fb1094d333750bde34d94', 374000000000000, datetime.datetime(2020, 6, 23, 2, 55), Decimal('51.45'), 'fraud_Trantow PLC', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1135, 'a806370ffbe891ba3eab999120ac5120', 4840000000000000, datetime.datetime(2020, 6, 23, 2, 55), Decimal('155.40'), 'fraud_Baumbach, Strosin and Nicolas', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1136, '29f2f8b5c721b8fb2eee5c411de83e18', 3550000000000000, datetime.datetime(2020, 6, 23, 2, 56), Decimal('89.76'), 'fraud_Spinka Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1137, '629841c6bafe4f286950abc57ed34b42', 3520000000000000, datetime.datetime(2020, 6, 23, 2, 56), Decimal('224.08'), 'fraud_Goldner, Kovacek and Abbott', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1138, '5e417e104c25977c35fe0bb9d4ebc057', 3540000000000000, datetime.datetime(2020, 6, 23, 2, 57), Decimal('115.03'), 'fraud_Ferry, Lynch and Kautzer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1139, '3f637ed6dd562388e184cadb1c594c87', 4550000000000000, datetime.datetime(2020, 6, 23, 2, 58), Decimal('189.90'), 'fraud_Friesen Inc', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1140, 'e7f0043808d468ac93cb7c54e1ee6e06', 213000000000000, datetime.datetime(2020, 6, 23, 2, 58), Decimal('72.24'), 'fraud_Heller-Langosh', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1141, '4803f2324618d0262266e57c755c3382', 6010000000000000, datetime.datetime(2020, 6, 23, 2, 59), Decimal('61.46'), 'fraud_Durgan-Auer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1142, '2155d0a2b489a2583821b4414ee41dc4', 3560000000000000, datetime.datetime(2020, 6, 23, 2, 59), Decimal('84.16'), 'fraud_Harris Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1143, '13bc6f7747160babb122db24517c815c', 4990000000000000000, datetime.datetime(2020, 6, 23, 3, 0), Decimal('136.22'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1144, '8660709d960c6ad0fde1ddd88d2a344d', 630000000000, datetime.datetime(2020, 6, 23, 3, 0), Decimal('121.91'), 'fraud_Beier-Hyatt', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1145, 'd47562755b2ac42253a885372423bd9e', 373000000000000, datetime.datetime(2020, 6, 23, 3, 1), Decimal('15.05'), 'fraud_Klocko LLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1146, 'b039084fa7b07edb1c1893608df6ed67', 3560000000000000, datetime.datetime(2020, 6, 23, 3, 1), Decimal('54.59'), 'fraud_Hintz-Bruen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1147, '88962b71330d1b8d6782f005d852ce18', 3560000000000000, datetime.datetime(2020, 6, 23, 3, 1), Decimal('1.18'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1148, '023c25802ef760098f8ae5ce69e95e61', 4940000000000000, datetime.datetime(2020, 6, 23, 3, 2), Decimal('32.86'), 'fraud_Monahan, Bogisich and Ledner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1149, '302224393bc437b6fd5faa8fee5161b4', 2220000000000000, datetime.datetime(2020, 6, 23, 3, 2), Decimal('92.49'), 'fraud_McDermott-Weimann', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1150, '284983af62598822dc9e9de6c94a6ab7', 4130000000000000000, datetime.datetime(2020, 6, 23, 3, 2), Decimal('58.95'), 'fraud_Torp-Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1151, '25e8ef99ac0f60598fdb33a3180ef234', 574000000000, datetime.datetime(2020, 6, 23, 3, 3), Decimal('60.66'), 'fraud_Wolf Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1152, 'a0df1f3cbf897299afeca9f072ba9bf9', 3560000000000000, datetime.datetime(2020, 6, 23, 3, 3), Decimal('7.82'), 'fraud_Kuhn LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1153, '3876337d6cef2f7454d79304d4439aae', 2360000000000000, datetime.datetime(2020, 6, 23, 3, 3), Decimal('2.50'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1154, '5118b23303875e1d83aa749d84d83538', 2510000000000000, datetime.datetime(2020, 6, 23, 3, 3), Decimal('6.46'), 'fraud_Cormier, Stracke and Thiel', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1155, 'e228d008f542d18fe09f1df49ef2ad07', 4300000000000000, datetime.datetime(2020, 6, 23, 3, 5), Decimal('8.25'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1156, '5fced974c68a40ccb5466bc78687c12e', 3570000000000000, datetime.datetime(2020, 6, 23, 3, 6), Decimal('120.37'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1157, 'ab5552bf157814136dd791ada41bb786', 4790000000000, datetime.datetime(2020, 6, 23, 3, 6), Decimal('7.36'), 'fraud_Hermann-Gaylord', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1158, '83eb9e7f39dd34b02848096f6e8e0faf', 3530000000000000, datetime.datetime(2020, 6, 23, 3, 6), Decimal('35.19'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1159, 'd1c188e2441b4525512f000ebe536caf', 374000000000000, datetime.datetime(2020, 6, 23, 3, 7), Decimal('220.35'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1160, '409a77f5c2129aec64b06ce02362b8d5', 213000000000000, datetime.datetime(2020, 6, 23, 3, 7), Decimal('66.30'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1161, 'cf6eb7083a285f73234c823afd237dd2', 3530000000000000, datetime.datetime(2020, 6, 23, 3, 8), Decimal('121.30'), 'fraud_Wolf Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1162, '0909e173ebd3cfcc6877a166f9664538', 3540000000000000, datetime.datetime(2020, 6, 23, 3, 8), Decimal('3.76'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1163, 'f66c379f4188b83bd6c21526473def68', 581000000000, datetime.datetime(2020, 6, 23, 3, 9), Decimal('3.63'), 'fraud_Mante Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1164, '51bfd4036fb44e95994787e4713bef78', 4870000000000000, datetime.datetime(2020, 6, 23, 3, 9), Decimal('62.13'), 'fraud_Yost, Block and Koepp', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1165, '3aef0c71e3cc16a6b39b7096bd81b42e', 2270000000000000, datetime.datetime(2020, 6, 23, 3, 10), Decimal('60.42'), 'fraud_Cummings LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1166, '374a04f65e967d7ddc1649d92bf1141f', 4270000000000000, datetime.datetime(2020, 6, 23, 3, 10), Decimal('85.59'), 'fraud_Schaefer, Maggio and Daugherty', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1167, '81a2600b87eadb9f2955512090139a88', 3530000000000000, datetime.datetime(2020, 6, 23, 3, 10), Decimal('2.41'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1168, '0b13798e1695846cf43b6bd2faa601aa', 4720000000000000, datetime.datetime(2020, 6, 23, 3, 10), Decimal('114.29'), \"fraud_O'Keefe-Hudson\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1169, 'a369dee7d524e503f602826716fb70a8', 2480000000000000, datetime.datetime(2020, 6, 23, 3, 10), Decimal('117.58'), 'fraud_Douglas, Schneider and Turner', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1170, '23c11dc3cf718816401593c82ce215ec', 4800000000000000000, datetime.datetime(2020, 6, 23, 3, 11), Decimal('70.61'), 'fraud_Kutch and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1171, '3cbf641a801cca51f9a13bcaff4fd1b0', 2710000000000000, datetime.datetime(2020, 6, 23, 3, 12), Decimal('9.20'), 'fraud_Roob, Conn and Tremblay', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1172, '9de9c8e00ad3886a3ac69a18d1a749f6', 3580000000000000, datetime.datetime(2020, 6, 23, 3, 12), Decimal('70.05'), 'fraud_Bernier, Streich and Jewess', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1173, '7b0303726613dd8e747d73c8357eaf0f', 4840000000000000, datetime.datetime(2020, 6, 23, 3, 13), Decimal('152.33'), 'fraud_Goldner, Kovacek and Abbott', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1174, '852de78e177d78a616d75aa8d603e0a3', 4950000000000000, datetime.datetime(2020, 6, 23, 3, 13), Decimal('1.91'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1175, '84d5f8611f14cb1f808cf1b576bd40dc', 3510000000000000, datetime.datetime(2020, 6, 23, 3, 14), Decimal('53.08'), 'fraud_Christiansen, Goyette and Schamberger', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1176, '69fcfb018d82b7dd3e7218a38f1dcca5', 343000000000000, datetime.datetime(2020, 6, 23, 3, 15), Decimal('120.25'), 'fraud_Heidenreich PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1177, 'f65797192c795b757b7207099ce66891', 4910000000000000, datetime.datetime(2020, 6, 23, 3, 15), Decimal('55.51'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1178, 'd9597bb04af3ce8647f96d937048241c', 3570000000000000, datetime.datetime(2020, 6, 23, 3, 16), Decimal('30.98'), 'fraud_Williamson LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1179, '544f21bee8f60c23f09547e5c196f2b2', 5540000000000000, datetime.datetime(2020, 6, 23, 3, 16), Decimal('107.63'), 'fraud_Emmerich-Luettgen', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1180, '025d5abd50a198be84bc41c7fda4eb08', 213000000000000, datetime.datetime(2020, 6, 23, 3, 16), Decimal('35.70'), 'fraud_Hermann and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1181, 'b77510c8f1febf6f7f7b750b41442d14', 4690000000000000000, datetime.datetime(2020, 6, 23, 3, 18), Decimal('52.24'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1182, '3559b5e997926d3aae37cc8622223d9a', 6010000000000000, datetime.datetime(2020, 6, 23, 3, 18), Decimal('25.95'), 'fraud_Hills-Olson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1183, '426dd51348044d187cfd4471d59e0019', 30300000000000, datetime.datetime(2020, 6, 23, 3, 19), Decimal('641.41'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1184, '728de130f89983526d78e0cf74bab784', 378000000000000, datetime.datetime(2020, 6, 23, 3, 20), Decimal('4.71'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1185, 'c47c9e27c9f9fe86f80bfea8cc3e0f1a', 30300000000000, datetime.datetime(2020, 6, 23, 3, 20), Decimal('97.16'), 'fraud_Christiansen, Goyette and Schamberger', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1186, 'adce33d44f727207aef8451649ac501c', 4860000000000, datetime.datetime(2020, 6, 23, 3, 20), Decimal('4.28'), 'fraud_Wisozk and Sons', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1187, '905ffd1bc88b4768f89eb1eca6fb0cb1', 341000000000000, datetime.datetime(2020, 6, 23, 3, 21), Decimal('59.10'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1188, '9e249a6024f2903985483330d074fabb', 377000000000000, datetime.datetime(2020, 6, 23, 3, 21), Decimal('1.04'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1189, '5e30a3ce2e76d44e8d161757d4741236', 4670000000000000, datetime.datetime(2020, 6, 23, 3, 22), Decimal('5.44'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1190, '89bfc5b551ee00c43eb87194a601303f', 376000000000000, datetime.datetime(2020, 6, 23, 3, 22), Decimal('132.29'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1191, 'a58af269feddebaaf77c93ad21a68eae', 4460000000000, datetime.datetime(2020, 6, 23, 3, 23), Decimal('27.42'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1192, '05a74b98b78093754a51fcb0d109cd56', 341000000000000, datetime.datetime(2020, 6, 23, 3, 23), Decimal('56.76'), 'fraud_Kohler, Lindgren and Koelpin', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1193, 'd5bebf038405c1b7f7f792f69ab93b0d', 346000000000000, datetime.datetime(2020, 6, 23, 3, 23), Decimal('32.92'), 'fraud_Reinger, Weissnat and Strosin', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1194, '10b351a204babcc8a7c7d8916a72bd6a', 342000000000000, datetime.datetime(2020, 6, 23, 3, 24), Decimal('103.27'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1195, 'fa88741366f9668ec57fba486e374301', 3510000000000000, datetime.datetime(2020, 6, 23, 3, 24), Decimal('62.04'), 'fraud_Fadel, Mertz and Rippin', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1196, 'a579b940b2eee80cf3c7bf1090adb998', 4920000000000000, datetime.datetime(2020, 6, 23, 3, 25), Decimal('137.67'), 'fraud_Bogisich Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1197, 'f4dd08befb46eb3c2399475c3e510a03', 2300000000000000, datetime.datetime(2020, 6, 23, 3, 26), Decimal('11.30'), 'fraud_Fadel, Mertz and Rippin', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1198, 'b8cae2dda01af15834ad78a62a0529e3', 374000000000000, datetime.datetime(2020, 6, 23, 3, 26), Decimal('42.02'), 'fraud_Koss and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1199, 'eaa5f845615ba5e92d4fee7b4e200bae', 4940000000000000, datetime.datetime(2020, 6, 23, 3, 26), Decimal('172.43'), \"fraud_Deckow-O'Conner\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1200, '4c61d40b8c5e492816f3b2f1f2596be9', 30200000000000, datetime.datetime(2020, 6, 23, 3, 27), Decimal('1.46'), 'fraud_Kerluke Inc', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1201, 'fdbc0265a3bb4b5c07379b0807a3e79b', 38200000000000, datetime.datetime(2020, 6, 23, 3, 27), Decimal('104.45'), 'fraud_Rau and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1202, '7db9f6a895c667e9275b19508fa6a4ec', 213000000000000, datetime.datetime(2020, 6, 23, 3, 27), Decimal('70.00'), 'fraud_Streich, Hansen and Veum', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1203, 'db6547f883cff57cb967732787479113', 4960000000000000, datetime.datetime(2020, 6, 23, 3, 28), Decimal('50.54'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1204, 'f6137a5d0a4684d6213592d51557f542', 30200000000000, datetime.datetime(2020, 6, 23, 3, 29), Decimal('187.00'), \"fraud_Schamberger-O'Keefe\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1205, '820fc38a99d7d9c49877ea0e5728fd7d', 180000000000000, datetime.datetime(2020, 6, 23, 3, 29), Decimal('112.32'), 'fraud_Bauch-Raynor', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1206, '71114ad901cffad44ec8dd0e3c4d1b3a', 6010000000000000, datetime.datetime(2020, 6, 23, 3, 29), Decimal('20.86'), 'fraud_Harris, Gusikowski and Heaney', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1207, 'ac844b1d01a20d2fa15c37595c3d889e', 213000000000000, datetime.datetime(2020, 6, 23, 3, 29), Decimal('23.89'), 'fraud_Jast and Sons', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1208, '5966d1dd8a3b27a3ca51e2e83f39d7da', 30400000000000, datetime.datetime(2020, 6, 23, 3, 30), Decimal('1084.13'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1209, '4b8c57b6e26373deb31efc284b573fbe', 4780000000000, datetime.datetime(2020, 6, 23, 3, 30), Decimal('62.76'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1210, 'c1ccdd0186b4274f85f25feb84783a7c', 6530000000000000, datetime.datetime(2020, 6, 23, 3, 31), Decimal('6.89'), 'fraud_Pacocha-Bauch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1211, '153376cd8ad3ca71e4830a550c5e1d98', 4380000000000000000, datetime.datetime(2020, 6, 23, 3, 31), Decimal('81.05'), 'fraud_Lind, Huel and McClure', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1212, '1c27d5dbd133b2ce9326fc5f9e45b591', 4280000000000000, datetime.datetime(2020, 6, 23, 3, 32), Decimal('60.15'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1213, '7e7e8a2236e788249caf3431f0a8c473', 3600000000000000, datetime.datetime(2020, 6, 23, 3, 34), Decimal('80.13'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1214, '839da75fa819c10c994e37b773e2f7cd', 6010000000000000, datetime.datetime(2020, 6, 23, 3, 35), Decimal('66.19'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1215, 'b9940090ed41234677870c6c7076b95f', 3550000000000000, datetime.datetime(2020, 6, 23, 3, 35), Decimal('885.07'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1216, '41aad666256d3198217fa74f2ac94c63', 4450000000000000, datetime.datetime(2020, 6, 23, 3, 35), Decimal('104.71'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1217, '6cae369a55963bb6a643472130cc3b17', 2290000000000000, datetime.datetime(2020, 6, 23, 3, 36), Decimal('93.47'), 'fraud_Bradtke PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1218, 'a271e9f63e29a1867110e7b6846218f8', 4610000000000, datetime.datetime(2020, 6, 23, 3, 37), Decimal('57.00'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1219, 'ae1b27da39da06deb29abc1629549c23', 4590000000000000, datetime.datetime(2020, 6, 23, 3, 37), Decimal('70.86'), 'fraud_Bartoletti-Wunsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1220, 'f9c203401e3b729579f1b2227121cd2d', 371000000000000, datetime.datetime(2020, 6, 23, 3, 37), Decimal('122.55'), 'fraud_Huel-Langworth', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1221, 'dfd34772adf24d2520e5c36d13221473', 4410000000000000000, datetime.datetime(2020, 6, 23, 3, 37), Decimal('120.47'), 'fraud_Goldner, Kovacek and Abbott', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1222, '63a5d3bcc27891a185d8becf32e0b70b', 2270000000000000, datetime.datetime(2020, 6, 23, 3, 38), Decimal('5.28'), 'fraud_Willms, Kris and Bergnaum', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1223, '485ec5e5749df02df25dfbad4286e5ab', 30400000000000, datetime.datetime(2020, 6, 23, 3, 38), Decimal('17.22'), 'fraud_Hermann-Gaylord', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1224, 'be2667bdded335c5371e66f00968f479', 502000000000, datetime.datetime(2020, 6, 23, 3, 39), Decimal('340.51'), 'fraud_Rempel Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1225, 'f31c4b945728b393147903384c9379a2', 36200000000000, datetime.datetime(2020, 6, 23, 3, 39), Decimal('3.24'), 'fraud_Pacocha-Bauch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1226, '12109acbffd7da366c027cff9bafd6eb', 4320000000000000000, datetime.datetime(2020, 6, 23, 3, 41), Decimal('11.72'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1227, 'e6c7a95700168b9422e7b638b4b4d8b9', 630000000000, datetime.datetime(2020, 6, 23, 3, 42), Decimal('43.55'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1228, 'ef5defce0e8f83f0165bd842137ce9c5', 4670000000000000, datetime.datetime(2020, 6, 23, 3, 42), Decimal('97.08'), 'fraud_Auer-Mosciski', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1229, 'fe15336bab1f1c9347e3675f7223a550', 3560000000000000, datetime.datetime(2020, 6, 23, 3, 44), Decimal('1.40'), 'fraud_Mohr Inc', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1230, '2eae73ec2c2619f21646d1d67bbea571', 3600000000000000, datetime.datetime(2020, 6, 23, 3, 44), Decimal('180.45'), 'fraud_Schoen, Kuphal and Nitzsche', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1231, 'f811b8c837a0b5bcc0d0eb0ddb8298cd', 4880000000000000, datetime.datetime(2020, 6, 23, 3, 45), Decimal('30.79'), 'fraud_Kemmer-Buckridge', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1232, '27b20a283edd026ec924d5a891c435ef', 3520000000000000, datetime.datetime(2020, 6, 23, 3, 46), Decimal('90.27'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1233, '0ab602d30fe320c41d431decaec54a5a', 340000000000000, datetime.datetime(2020, 6, 23, 3, 47), Decimal('68.16'), \"fraud_Friesen-D'Amore\", 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1234, '6346a7562b746106fe69e062bef4de74', 502000000000, datetime.datetime(2020, 6, 23, 3, 47), Decimal('5.48'), 'fraud_Dare-Marvin', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1235, '291660f7644e60efa1d17ee176d672db', 342000000000000, datetime.datetime(2020, 6, 23, 3, 47), Decimal('52.95'), 'fraud_Rowe, Batz and Goodwin', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1236, '5bbad43920161e7cc8e7622f60c0845e', 4790000000000000000, datetime.datetime(2020, 6, 23, 3, 47), Decimal('14.97'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1237, 'e0319f72ed22d5e2506d128358f77cfa', 504000000000, datetime.datetime(2020, 6, 23, 3, 49), Decimal('102.01'), 'fraud_Brekke and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1238, 'a555ad7414de3365c9394db9548b2460', 4450000000000000, datetime.datetime(2020, 6, 23, 3, 49), Decimal('120.55'), 'fraud_Kiehn Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1239, '505a668275cf26d58b1a60be3acbe87c', 36900000000000, datetime.datetime(2020, 6, 23, 3, 49), Decimal('143.78'), 'fraud_Torp-Lemke', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1240, '48466d464c4350a79ea8817a3ba339fa', 4130000000000000000, datetime.datetime(2020, 6, 23, 3, 50), Decimal('111.38'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1241, '1b008f68d3f13366fbdc656780b03b01', 30200000000000, datetime.datetime(2020, 6, 23, 3, 53), Decimal('77.68'), 'fraud_Berge LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1242, '15a51203234d86a88f370a80c95b1f38', 4660000000000000, datetime.datetime(2020, 6, 23, 3, 54), Decimal('9.65'), 'fraud_Lesch Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1243, 'e84c3030a22e7db5fd12867135b27d4f', 4980000000000000, datetime.datetime(2020, 6, 23, 3, 54), Decimal('7.52'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1244, '0b8f5d2e45c6d82fca30cd1c94bd9b60', 4290000000000, datetime.datetime(2020, 6, 23, 3, 55), Decimal('9.96'), 'fraud_Metz-Boehm', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1245, '5aef5d94287ee6604d2c032282dbe9bc', 3560000000000000, datetime.datetime(2020, 6, 23, 3, 56), Decimal('1.27'), 'fraud_Willms, Kris and Bergnaum', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1246, 'e4a96b088174c1d0114696ed592d3ccd', 370000000000000, datetime.datetime(2020, 6, 23, 3, 56), Decimal('21.68'), 'fraud_Bins-Tillman', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1247, '51e7ed1a888d550ed36a2e68c6ada2cd', 3570000000000000, datetime.datetime(2020, 6, 23, 3, 56), Decimal('1532.76'), 'fraud_Jast Ltd', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1248, 'd7deb1f85c59bee125cd21917c11e319', 630000000000, datetime.datetime(2020, 6, 23, 3, 57), Decimal('8.98'), 'fraud_Rempel Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1249, 'f96f4af637370a41cae5d2d5d11c914c', 213000000000000, datetime.datetime(2020, 6, 23, 3, 58), Decimal('1.55'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1250, 'fa2900e863c38883343476e8b76d0bfd', 4150000000000000, datetime.datetime(2020, 6, 23, 3, 59), Decimal('107.48'), 'fraud_Boyer PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1251, '4c03bfd21a41e27699f579a17a590ea8', 213000000000000, datetime.datetime(2020, 6, 23, 3, 59), Decimal('61.98'), 'fraud_Conroy-Cruickshank', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1252, '6979263be7a8796e0cac2437ca987a07', 6590000000000000, datetime.datetime(2020, 6, 23, 3, 59), Decimal('191.93'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1253, 'd68574d5257afda82d87f02d6818fd48', 3540000000000000, datetime.datetime(2020, 6, 23, 3, 59), Decimal('104.69'), \"fraud_Deckow-O'Conner\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1254, 'cff691d29ba32f4d63b1b252e862af71', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 0), Decimal('51.35'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1255, '293fcf6c48aae97c63f9db1c7e3a78a9', 4300000000000000, datetime.datetime(2020, 6, 23, 4, 0), Decimal('102.53'), 'fraud_Barton Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1256, 'b33a8acca613057053b579f1ee0549ed', 3570000000000000, datetime.datetime(2020, 6, 23, 4, 0), Decimal('66.45'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1257, '94408f5f5778db7a2d4dd211a789f54b', 30100000000000, datetime.datetime(2020, 6, 23, 4, 1), Decimal('203.82'), 'fraud_Vandervort-Funk', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1258, '1a3a31f9cdb8622f36eef78f43d1c066', 36500000000000, datetime.datetime(2020, 6, 23, 4, 1), Decimal('91.56'), 'fraud_Schaefer, Maggio and Daugherty', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1259, '775bbe89d2aa20f27e73c7cedce59730', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 2), Decimal('103.24'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1260, '8d0b952e3e429ea454278ce56aff8877', 4370000000000000, datetime.datetime(2020, 6, 23, 4, 2), Decimal('116.90'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1261, '225d8649eeef9c10411f2eb2130a088e', 377000000000000, datetime.datetime(2020, 6, 23, 4, 2), Decimal('149.09'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1262, '493ff77d9fd6fded0256d5975f094dce', 30500000000000, datetime.datetime(2020, 6, 23, 4, 3), Decimal('156.47'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1263, 'fe77652b14599e4376c02a7021fe0076', 30300000000000, datetime.datetime(2020, 6, 23, 4, 3), Decimal('64.02'), 'fraud_Schmitt Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1264, 'ad1a8cab272ac1ca8b2bec8d8314c3fa', 4750000000000, datetime.datetime(2020, 6, 23, 4, 3), Decimal('56.77'), 'fraud_Rodriguez Group', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1265, 'c59a21c54cba5f34f0e4e48aec0be447', 4590000000000, datetime.datetime(2020, 6, 23, 4, 3), Decimal('2.38'), 'fraud_Beier-Hyatt', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1266, 'db17a11191247db38f9f13b27784e443', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 3), Decimal('7.57'), 'fraud_Macejkovic-Lesch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1267, '34824f6f0749c717a5650dd8dcce0fdd', 377000000000000, datetime.datetime(2020, 6, 23, 4, 3), Decimal('46.46'), 'fraud_Cummings Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1268, '3a546b669bf2cdea3c355b760124b814', 345000000000000, datetime.datetime(2020, 6, 23, 4, 4), Decimal('2.20'), 'fraud_Hermann and Sons', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1269, '2b81ef608b3d5a1d2ecfd611a9a063aa', 60427851591, datetime.datetime(2020, 6, 23, 4, 4), Decimal('77.02'), 'fraud_Huel, Hammes and Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1270, '7a95f654add35ef0df6c806ae007766f', 2710000000000000, datetime.datetime(2020, 6, 23, 4, 5), Decimal('153.46'), 'fraud_Watsica, Haag and Considine', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1271, 'b887055379951ac1fed0f70b9e00808f', 639000000000, datetime.datetime(2020, 6, 23, 4, 6), Decimal('114.87'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1272, 'db7eb43118f9cbdbdaa71763157d99b3', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 6), Decimal('77.81'), 'fraud_Goodwin-Nitzsche', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1273, '5153ce31632dfe23f2077c29cfa880c1', 4370000000000000, datetime.datetime(2020, 6, 23, 4, 7), Decimal('96.86'), 'fraud_Kuhic Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1274, 'a4fdbe2bc80040e9c4e362a38f0d7c38', 213000000000000, datetime.datetime(2020, 6, 23, 4, 7), Decimal('5.05'), 'fraud_Mayert Group', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1275, '349baeb89023ea01109eb04abfab6da4', 213000000000000, datetime.datetime(2020, 6, 23, 4, 8), Decimal('16.64'), 'fraud_Spinka Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1276, 'd89fcbdd6c3ed64bde101588436886eb', 3520000000000000, datetime.datetime(2020, 6, 23, 4, 8), Decimal('198.66'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1277, '24693cc2a77b6060cb23eb5939ad64e1', 30400000000000, datetime.datetime(2020, 6, 23, 4, 8), Decimal('58.32'), 'fraud_Cummings LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1278, '0c4a9959b2b70adc2861c3eace80ac99', 3530000000000000, datetime.datetime(2020, 6, 23, 4, 8), Decimal('121.86'), 'fraud_Jast-McDermott', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1279, 'b936c2e7d9fdd17523d8c18056a93241', 639000000000, datetime.datetime(2020, 6, 23, 4, 9), Decimal('63.71'), 'fraud_Prohaska-Murray', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1280, 'b7bbceacbbc4ea7542aa5a8e7046893c', 3580000000000000, datetime.datetime(2020, 6, 23, 4, 10), Decimal('52.46'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1281, '41d73bf243bdd24e20d8ca028970ce40', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 10), Decimal('134.29'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1282, '752c38a52c6e130bc21916bcef8932b9', 4640000000000, datetime.datetime(2020, 6, 23, 4, 11), Decimal('48.55'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1283, 'a4644bc800ab21aadf76445840ce6a94', 4990000000000, datetime.datetime(2020, 6, 23, 4, 11), Decimal('55.01'), 'fraud_Bednar Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1284, '6877f6e5ac3530e9c2c9d9c573bff1e3', 4550000000000000, datetime.datetime(2020, 6, 23, 4, 11), Decimal('100.19'), 'fraud_Marks Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1285, '0bd3a159c0883b7dc4e31b058c516a1d', 639000000000, datetime.datetime(2020, 6, 23, 4, 11), Decimal('217.07'), 'fraud_Kuhn LLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1286, '81efab91e8ca55fe0e12c89736c77b54', 4810000000000000000, datetime.datetime(2020, 6, 23, 4, 12), Decimal('78.36'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1287, '76dd8b4d00e3981b1fd91d181ee4112c', 3540000000000000, datetime.datetime(2020, 6, 23, 4, 12), Decimal('107.07'), 'fraud_Rutherford-Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1288, 'c410e8c0b18261c24f4e72f7946b5427', 4070000000000000, datetime.datetime(2020, 6, 23, 4, 13), Decimal('147.96'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1289, '2a8cd7f617b309944c82165182eece05', 502000000000, datetime.datetime(2020, 6, 23, 4, 13), Decimal('72.33'), 'fraud_Runte-Mohr', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1290, '85409f96f66326ff5392a47ca7d0ce20', 4810000000000000000, datetime.datetime(2020, 6, 23, 4, 13), Decimal('37.41'), 'fraud_Heller-Abshire', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1291, 'e9024c57227037d6007a0d9e073945f3', 3500000000000000, datetime.datetime(2020, 6, 23, 4, 14), Decimal('57.50'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1292, '62675ce0974e8fa8375cf153d8ad3528', 180000000000000, datetime.datetime(2020, 6, 23, 4, 14), Decimal('209.02'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1293, 'eb4be9fc86bc0a668f2bed014628bfc8', 343000000000000, datetime.datetime(2020, 6, 23, 4, 14), Decimal('68.67'), 'fraud_Harris Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1294, 'f614aba8527b750804c5fb3fb37b9d04', 3500000000000000, datetime.datetime(2020, 6, 23, 4, 15), Decimal('76.65'), 'fraud_Osinski, Ledner and Leuschke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1295, '197f21d404e7edaa70eb7e3e57ec05f0', 3600000000000000, datetime.datetime(2020, 6, 23, 4, 15), Decimal('36.70'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1296, '68b859fd3aab55af55cf419dbf3f7b54', 4310000000000000000, datetime.datetime(2020, 6, 23, 4, 15), Decimal('8.58'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1297, '1732b162c13c57c7a721c00c268a99ab', 4790000000000, datetime.datetime(2020, 6, 23, 4, 16), Decimal('87.16'), 'fraud_McDermott-Weimann', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1298, 'a2edc5523d2dba3681aa5513441da264', 6520000000000000, datetime.datetime(2020, 6, 23, 4, 16), Decimal('98.39'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1299, '6e7f46d3889ae78de14926d0acc8b8c0', 4330000000000000, datetime.datetime(2020, 6, 23, 4, 17), Decimal('54.43'), 'fraud_Tillman, Dickinson and Labadie', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1300, '9df7e65d189687330ccbe0da2d9a369a', 3590000000000000, datetime.datetime(2020, 6, 23, 4, 17), Decimal('63.59'), 'fraud_Johnston, Nikolaus and Maggio', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1301, 'f04a604d77fc644ed3e538b24ab9723e', 4430000000000000, datetime.datetime(2020, 6, 23, 4, 17), Decimal('74.79'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1302, 'c7e14d680a6c1aec5acd8d9d1019f3f9', 639000000000, datetime.datetime(2020, 6, 23, 4, 18), Decimal('88.03'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1303, 'fd5603098333b5778329cacbb39d12f6', 2710000000000000, datetime.datetime(2020, 6, 23, 4, 19), Decimal('65.32'), 'fraud_Rau and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1304, '0e8fca81dcf1982ebcd382727329c813', 213000000000000, datetime.datetime(2020, 6, 23, 4, 19), Decimal('89.55'), 'fraud_Koepp-Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1305, '6c4600f14bb88f776ee1d74f85da26a3', 180000000000000, datetime.datetime(2020, 6, 23, 4, 20), Decimal('88.54'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1306, '5b95f933bd6c61dc2722de95e124dab4', 30500000000000, datetime.datetime(2020, 6, 23, 4, 22), Decimal('390.83'), 'fraud_Huel-Langworth', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1307, '21608c787894324ff2f94065e27e6b15', 4860000000000000000, datetime.datetime(2020, 6, 23, 4, 23), Decimal('138.18'), 'fraud_Bahringer, Schoen and Corkery', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1308, '63b9112fc3cd0e785cf74ae9d429bc8f', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 23), Decimal('269.25'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1309, '9b8c47e4f9b4df1960cc3a9eb2cd3b1d', 676000000000, datetime.datetime(2020, 6, 23, 4, 23), Decimal('58.60'), 'fraud_Jenkins, Hauck and Friesen', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1310, 'db9e37be12748eb65c9d930a5986ba57', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 24), Decimal('56.10'), 'fraud_VonRueden Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1311, '601124a4fc42518c0f3baebf260050a8', 342000000000000, datetime.datetime(2020, 6, 23, 4, 24), Decimal('67.31'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1312, 'ed0fe58e3719b72368358700367b2985', 3600000000000000, datetime.datetime(2020, 6, 23, 4, 24), Decimal('46.10'), 'fraud_Kutch LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1313, '73494940c6e3c5036ad9ff32652f4f3f', 4070000000000000, datetime.datetime(2020, 6, 23, 4, 24), Decimal('742.94'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1314, 'b318a05d9b466d4405cc28408a22c294', 4450000000000000, datetime.datetime(2020, 6, 23, 4, 25), Decimal('51.12'), 'fraud_Mraz-Herzog', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1315, 'b618a439c8fa880b3333459df8bd9e4c', 2240000000000000, datetime.datetime(2020, 6, 23, 4, 25), Decimal('66.05'), 'fraud_Luettgen PLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1316, '62f539f20baae60c03e2c326f1202519', 30000000000000, datetime.datetime(2020, 6, 23, 4, 25), Decimal('86.53'), 'fraud_Swaniawski, Bahringer and Ledner', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1317, 'ad2e820d81b8261c23145c3a67ed002b', 213000000000000, datetime.datetime(2020, 6, 23, 4, 25), Decimal('131.89'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1318, '685666b6a647feb817653e467476aa50', 30600000000000, datetime.datetime(2020, 6, 23, 4, 25), Decimal('499.90'), 'fraud_Kerluke PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1319, 'f2405e132a750613e4e274d7fccf5233', 4170000000000000, datetime.datetime(2020, 6, 23, 4, 26), Decimal('9.66'), 'fraud_Gibson-Deckow', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1320, '59cef45b27089b8a341de2aceeddbe5f', 584000000000, datetime.datetime(2020, 6, 23, 4, 26), Decimal('110.15'), 'fraud_Abshire PLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1321, '2ccbf8194ad0579734c706437a160baf', 6010000000000000, datetime.datetime(2020, 6, 23, 4, 29), Decimal('9.36'), 'fraud_Pagac LLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1322, 'b7cfe3d3051081e8a572967fa9b78aee', 3550000000000000, datetime.datetime(2020, 6, 23, 4, 30), Decimal('45.89'), 'fraud_Smitham-Boehm', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1323, 'a6b43a9309e210615d76fd78dc008905', 180000000000000, datetime.datetime(2020, 6, 23, 4, 30), Decimal('4.45'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1324, 'add1d584f712adb585f65e0d7897cb80', 180000000000000, datetime.datetime(2020, 6, 23, 4, 31), Decimal('201.77'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1325, '6bfbc4d2b8e9a98c37445bd7bf697fff', 581000000000, datetime.datetime(2020, 6, 23, 4, 31), Decimal('33.66'), 'fraud_Gislason Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1326, '0dcdbf8586e0d268ed06e741333ead7f', 6590000000000000, datetime.datetime(2020, 6, 23, 4, 31), Decimal('36.43'), 'fraud_Tillman, Fritsch and Schmitt', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1327, '1996970ffc6bbfcd0b52d423bd62fdb4', 375000000000000, datetime.datetime(2020, 6, 23, 4, 31), Decimal('102.22'), 'fraud_Kling Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1328, '9027ca6ff1e145f72f96b513b8eef488', 3570000000000000, datetime.datetime(2020, 6, 23, 4, 32), Decimal('14.10'), 'fraud_Ferry, Reichel and DuBuque', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1329, '7fc604f65064eab891220203d4df892e', 3510000000000000, datetime.datetime(2020, 6, 23, 4, 32), Decimal('68.96'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1330, 'cc17f76174217b05f319dcb861ef1ae3', 4180000000000000, datetime.datetime(2020, 6, 23, 4, 33), Decimal('153.16'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1331, '8407baf6bb7e0e0dcb20ab81cec4eabc', 30000000000000, datetime.datetime(2020, 6, 23, 4, 33), Decimal('52.57'), 'fraud_Funk Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1332, '57eeb7e693864e1538e1db0134d4bc6f', 4940000000000000, datetime.datetime(2020, 6, 23, 4, 33), Decimal('35.55'), 'fraud_Skiles-Ankunding', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1333, '0c5a04ccb3a04514bd80e61b18ed069f', 2720000000000000, datetime.datetime(2020, 6, 23, 4, 34), Decimal('86.14'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1334, '03a75e508c96cb1f3c7fa80911f8c4b3', 213000000000000, datetime.datetime(2020, 6, 23, 4, 36), Decimal('2.66'), 'fraud_Hills-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1335, '29ff9c412a535f72ad83a436ca41b7e5', 3500000000000000, datetime.datetime(2020, 6, 23, 4, 37), Decimal('170.42'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1336, '6430a346ed2692c567f8cfcd16811379', 346000000000000, datetime.datetime(2020, 6, 23, 4, 37), Decimal('149.42'), 'fraud_Larson-Moen', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1337, 'a0d43bbaf960d7853e2b285e25cf4fa2', 4290000000000000, datetime.datetime(2020, 6, 23, 4, 38), Decimal('75.34'), 'fraud_Rodriguez Group', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1338, '91f856f59112cef33312708e8156a00b', 38000000000000, datetime.datetime(2020, 6, 23, 4, 38), Decimal('9.34'), 'fraud_Monahan, Bogisich and Ledner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1339, '46866be196f63f5a32b378adaa0c4747', 3570000000000000, datetime.datetime(2020, 6, 23, 4, 38), Decimal('45.78'), 'fraud_Bernhard Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1340, 'a65d6e56a25abc5ac8b18f958a810d43', 378000000000000, datetime.datetime(2020, 6, 23, 4, 38), Decimal('55.56'), 'fraud_Schumm, Bauch and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1341, '849a48d14aac9be266e17ecd7cc8ed20', 180000000000000, datetime.datetime(2020, 6, 23, 4, 38), Decimal('14.51'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1342, '74e2c8bf224d5725967b9cbf614927df', 630000000000, datetime.datetime(2020, 6, 23, 4, 39), Decimal('5.58'), 'fraud_Wisozk and Sons', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1343, '06b5a8847c88a45455ba64e77b570781', 6590000000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('51.92'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1344, 'dac0f4f9f0be7861bab9657a7b057e5b', 4590000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('6.07'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1345, 'd48ccce22de4c76a26838d3765484bb4', 376000000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('30.90'), 'fraud_Christiansen-Gusikowski', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1346, '2af71dc05d23b502524d0c674fe96ecb', 3570000000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('24.35'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1347, '17a52a7e2c06be0fb4be46c1c9476d81', 6550000000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('49.44'), 'fraud_Cormier LLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1348, '6628f224ded7caa98c56ac1c8582ec7a', 2260000000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('5.05'), 'fraud_Metz-Boehm', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1349, '9c6f40911ad4cb8f1c79225491e3f3a0', 4230000000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('44.33'), 'fraud_Collier Inc', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1350, '14a788bdfe0d286d69044011cafd8f1b', 213000000000000, datetime.datetime(2020, 6, 23, 4, 40), Decimal('101.07'), 'fraud_Bailey-Morar', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1351, '2c4189eaaf91ef8920eb025802894b7e', 36200000000000, datetime.datetime(2020, 6, 23, 4, 42), Decimal('180.11'), 'fraud_McCullough, Hudson and Schuster', 'food_dining', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1352, '631b0a3824ade68c9b3b03c6ae0c7109', 4080000000000, datetime.datetime(2020, 6, 23, 4, 43), Decimal('303.70'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1353, '277c29d65f37c056c06615f494ed266d', 4400000000000000000, datetime.datetime(2020, 6, 23, 4, 43), Decimal('60.41'), 'fraud_Eichmann, Bogan and Rodriguez', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1354, 'a3dd48611ac9f01fed4a94c5463ac14f', 376000000000000, datetime.datetime(2020, 6, 23, 4, 44), Decimal('88.14'), \"fraud_Schamberger-O'Keefe\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1355, '1c972d4582a8419f568e5410c7544e06', 346000000000000, datetime.datetime(2020, 6, 23, 4, 45), Decimal('6.72'), 'fraud_Mante Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1356, '204b92a459a1fc091e981469f895e58b', 4170000000000000, datetime.datetime(2020, 6, 23, 4, 45), Decimal('34.11'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1357, '47148cfcd374ef3c77157cb1c5c1a716', 4100000000000000, datetime.datetime(2020, 6, 23, 4, 45), Decimal('42.48'), 'fraud_Wolf Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1358, 'd9aaee771735763e95743895c67ed2b0', 4680000000000, datetime.datetime(2020, 6, 23, 4, 46), Decimal('54.06'), 'fraud_Cartwright-Harris', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1359, '0e269e78433e3ed6cfc564c629a17b40', 3560000000000000, datetime.datetime(2020, 6, 23, 4, 46), Decimal('1.62'), 'fraud_Kerluke PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1360, '9323f30993e5a5c0fc6e907199a99f37', 36900000000000, datetime.datetime(2020, 6, 23, 4, 47), Decimal('57.19'), 'fraud_Wuckert-Walter', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1361, 'c76f1020b208de2f5ee2480b677d1009', 4470000000000000000, datetime.datetime(2020, 6, 23, 4, 47), Decimal('7.02'), 'fraud_Herman Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1362, '4032adb8668347aeeeb17136b54149e2', 4590000000000000, datetime.datetime(2020, 6, 23, 4, 47), Decimal('85.18'), 'fraud_Kutch and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1363, '51ee55bf6e2313118ec563ae5c1d7474', 4980000000000, datetime.datetime(2020, 6, 23, 4, 48), Decimal('9.74'), 'fraud_Beier-Hyatt', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1364, '2f1f165fdb4f765f78da8868100cd7e8', 4640000000000, datetime.datetime(2020, 6, 23, 4, 48), Decimal('9.25'), 'fraud_Botsford Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1365, 'd7253c3133c24ed9b8802126dfade80d', 3570000000000000, datetime.datetime(2020, 6, 23, 4, 48), Decimal('84.52'), 'fraud_Stroman, Hudson and Erdman', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1366, '7265cd41844d368e4e8e3ae92d97e48b', 30300000000000, datetime.datetime(2020, 6, 23, 4, 48), Decimal('9.26'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1367, 'd448d687f28c3fd2880e53ff436d2d6c', 2290000000000000, datetime.datetime(2020, 6, 23, 4, 49), Decimal('4.04'), 'fraud_Beier-Hyatt', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1368, 'b40f48bd4f986a862400a827815ab8ae', 3510000000000000, datetime.datetime(2020, 6, 23, 4, 50), Decimal('7.56'), 'fraud_Macejkovic-Lesch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1369, 'f4ae59892fb1822ba43e8c6722213223', 30400000000000, datetime.datetime(2020, 6, 23, 4, 51), Decimal('83.58'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1370, '55e667325fed28eda106da7f955a3d45', 4240000000000000, datetime.datetime(2020, 6, 23, 4, 51), Decimal('47.67'), 'fraud_Dibbert and Sons', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1371, '58dcd1c66b8d1dc38b317b39214d8e6a', 3550000000000000, datetime.datetime(2020, 6, 23, 4, 52), Decimal('40.89'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1372, 'e10ce58eeb3daad5be84313eccfc026d', 30400000000000, datetime.datetime(2020, 6, 23, 4, 53), Decimal('6.30'), 'fraud_Yost, Block and Koepp', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1373, '303015a0792bc429667decae750d2c82', 3530000000000000, datetime.datetime(2020, 6, 23, 4, 54), Decimal('95.52'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1374, '85e98e0c7d179596baa042f3c3bd2280', 4900000000000, datetime.datetime(2020, 6, 23, 4, 54), Decimal('108.82'), 'fraud_Cassin-Harvey', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1375, 'c4dec1de7cd41d157008e53829c69428', 30200000000000, datetime.datetime(2020, 6, 23, 4, 55), Decimal('43.23'), 'fraud_Stiedemann Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1376, 'ac4a97092dfb3e50dbab6b5fbb0cef35', 3530000000000000, datetime.datetime(2020, 6, 23, 4, 56), Decimal('53.95'), 'fraud_Wuckert-Walter', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1377, '75b55168aefa7d2a22d988c08f449493', 4250000000000, datetime.datetime(2020, 6, 23, 4, 56), Decimal('74.81'), 'fraud_Robel, Cummerata and Prosacco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1378, 'e3e529aef46a56af650dfe2d06fc3b6f', 3550000000000000, datetime.datetime(2020, 6, 23, 4, 56), Decimal('67.21'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1379, '0ede37de90f3526d0b9137dc40460c49', 630000000000, datetime.datetime(2020, 6, 23, 4, 58), Decimal('55.54'), 'fraud_Berge LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1380, '8b28191627024285f8b976a42bc4e163', 5460000000000000, datetime.datetime(2020, 6, 23, 4, 58), Decimal('208.49'), 'fraud_Boyer PLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1381, '84249d634706018174380a82effc72c8', 374000000000000, datetime.datetime(2020, 6, 23, 4, 58), Decimal('51.12'), 'fraud_Corwin-Collins', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1382, 'cf04333a95b3496a3a07ad07d823d3df', 180000000000000, datetime.datetime(2020, 6, 23, 4, 58), Decimal('4.97'), 'fraud_Beier-Hyatt', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1383, '6ce0ecb36ad6c870c3d2d5332dda28d2', 4010000000000000, datetime.datetime(2020, 6, 23, 4, 59), Decimal('191.66'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1384, '3b00268e0f4c6081fb1c637a7d410cb1', 60427851591, datetime.datetime(2020, 6, 23, 4, 59), Decimal('105.14'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1385, 'f256e8a512d5057acf441b2606376e18', 630000000000, datetime.datetime(2020, 6, 23, 4, 59), Decimal('121.76'), \"fraud_Pacocha-O'Reilly\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1386, '3f73af7bd24301964dc595338cf039aa', 6010000000000000, datetime.datetime(2020, 6, 23, 5, 1), Decimal('211.72'), 'fraud_Kilback LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1387, '61f7bd81ce2ea1481c976fd5cdd280c1', 2250000000000000, datetime.datetime(2020, 6, 23, 5, 2), Decimal('184.73'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1388, '81aad3be6947221e7e491c66b776ee6e', 376000000000000, datetime.datetime(2020, 6, 23, 5, 2), Decimal('5.03'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1389, '943a4c94ae4d1ff77d91cca9b99aaa64', 3500000000000000, datetime.datetime(2020, 6, 23, 5, 2), Decimal('4.86'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1390, '4e1b3d0b066cfacacfe5288db2ec4bbc', 6590000000000000, datetime.datetime(2020, 6, 23, 5, 2), Decimal('58.66'), 'fraud_Funk Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1391, 'b50bcf4a48b46f36cb1359d5e9ec3d54', 30000000000000, datetime.datetime(2020, 6, 23, 5, 3), Decimal('102.53'), 'fraud_Huel, Hammes and Witting', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1392, '65621dffb12822c6c57c611f8bc248e1', 38100000000000, datetime.datetime(2020, 6, 23, 5, 3), Decimal('58.89'), 'fraud_Murray Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1393, 'ba4eae9afde80de0a774de82efc8c1db', 4750000000000, datetime.datetime(2020, 6, 23, 5, 3), Decimal('69.10'), 'fraud_Sporer Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1394, '49c2e928f1fb84a4ddb01a84f98fd5f9', 2270000000000000, datetime.datetime(2020, 6, 23, 5, 5), Decimal('6.86'), 'fraud_Baumbach, Strosin and Nicolas', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1395, '559548bc33af8afbc7d8df411dd64476', 2710000000000000, datetime.datetime(2020, 6, 23, 5, 5), Decimal('62.93'), 'fraud_Runolfsson and Sons', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1396, 'e66c1e1d50e5c378bbe2fa5002c87c79', 60490596305, datetime.datetime(2020, 6, 23, 5, 5), Decimal('58.38'), 'fraud_Rodriguez Group', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1397, '47f54ff59b39aba1320a0611149f00c3', 639000000000, datetime.datetime(2020, 6, 23, 5, 6), Decimal('70.00'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1398, '32ffc5265be45862c326c219a59da820', 376000000000000, datetime.datetime(2020, 6, 23, 5, 6), Decimal('47.14'), 'fraud_Terry, Johns and Bins', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1399, 'b815e583c6c907bde0d55aebf7d04080', 372000000000000, datetime.datetime(2020, 6, 23, 5, 6), Decimal('1743.19'), 'fraud_Boehm, Predovic and Reinger', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1400, 'bfa89ddbece36e7e1a8485a7007bf232', 3540000000000000, datetime.datetime(2020, 6, 23, 5, 6), Decimal('4.71'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1401, 'f08e20d5e90d45a1923a4b56d42cf56f', 2220000000000000, datetime.datetime(2020, 6, 23, 5, 7), Decimal('324.12'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1402, '8a56a9821617f6fb7f3acff158c02d09', 371000000000000, datetime.datetime(2020, 6, 23, 5, 7), Decimal('5.07'), 'fraud_Terry, Johns and Bins', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1403, 'bb51ddea9285a725c8b17bb99542eca9', 30300000000000, datetime.datetime(2020, 6, 23, 5, 7), Decimal('71.37'), 'fraud_Parisian and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1404, '94efd33a4c428ad5fec46ada43ab7455', 3530000000000000, datetime.datetime(2020, 6, 23, 5, 8), Decimal('76.07'), 'fraud_Kutch, Hermiston and Farrell', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1405, '38110b41720ef5320ec13780c472074b', 4470000000000000, datetime.datetime(2020, 6, 23, 5, 9), Decimal('23.67'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1406, '1559126b28a270a18721facc8a3fef4c', 377000000000000, datetime.datetime(2020, 6, 23, 5, 9), Decimal('72.86'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1407, '72f808ee4f944c4709501ae84ee411e1', 4050000000000000, datetime.datetime(2020, 6, 23, 5, 11), Decimal('110.50'), 'fraud_Kovacek, Dibbert and Ondricka', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1408, '6f9ab11e79ad5e64b26706213d16c03a', 6600000000000000, datetime.datetime(2020, 6, 23, 5, 11), Decimal('69.58'), 'fraud_Jenkins, Hauck and Friesen', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1409, '7eb8bc7107361fa5e234660c10e5cb2b', 2250000000000000, datetime.datetime(2020, 6, 23, 5, 11), Decimal('139.10'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1410, 'ad4f326bb708ba6a8d767f651c88acb1', 676000000000, datetime.datetime(2020, 6, 23, 5, 11), Decimal('281.57'), 'fraud_Brown PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1411, 'c425a7977a3ec3ebfbe12abbec05270f', 344000000000000, datetime.datetime(2020, 6, 23, 5, 11), Decimal('6.94'), 'fraud_Metz-Boehm', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1412, '1c46b408611f7e5d1a6d844419fdf0d1', 2240000000000000, datetime.datetime(2020, 6, 23, 5, 12), Decimal('45.56'), 'fraud_Conroy-Cruickshank', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1413, '5767cdc0715d6bc2264c6376f21e52fa', 376000000000000, datetime.datetime(2020, 6, 23, 5, 13), Decimal('53.85'), 'fraud_Stokes, Christiansen and Sipes', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1414, '990f7a0701141fb646d897d292b64743', 4900000000000000, datetime.datetime(2020, 6, 23, 5, 13), Decimal('49.31'), 'fraud_Kutch LLC', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1415, 'e399ce701583527db40a51ef1ba005b6', 6010000000000000, datetime.datetime(2020, 6, 23, 5, 14), Decimal('56.18'), 'fraud_Huels-Nolan', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1416, '770bb9b5d5f8e6c9172173f41a749791', 3530000000000000, datetime.datetime(2020, 6, 23, 5, 14), Decimal('9.03'), 'fraud_Mante Group', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1417, 'e73ca8a2785d1731d0983b92f12f09ce', 4940000000000000, datetime.datetime(2020, 6, 23, 5, 15), Decimal('186.65'), 'fraud_Doyle Ltd', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1418, 'd20fc5e334c8859985a72ada9a8ff52a', 676000000000, datetime.datetime(2020, 6, 23, 5, 15), Decimal('47.06'), 'fraud_Kutch-Hegmann', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1419, 'eda2a60ecc72cf6ecda2c5d6406b62a5', 60422928733, datetime.datetime(2020, 6, 23, 5, 16), Decimal('2.97'), 'fraud_Daugherty, Pouros and Beahan', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1420, '127575d9ed77c51ff18e8cf5b3d75b04', 3500000000000000, datetime.datetime(2020, 6, 23, 5, 17), Decimal('45.92'), 'fraud_Marks Inc', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1421, '5bfa4ed1248c0cbaf32bb00a5f5f90f4', 30400000000000, datetime.datetime(2020, 6, 23, 5, 17), Decimal('3.22'), 'fraud_Schmeler Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1422, '4f82f648830b214b828a0c3598cd56fd', 4760000000000, datetime.datetime(2020, 6, 23, 5, 19), Decimal('59.24'), 'fraud_Bins-Rice', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1423, '2d43f4d1cc733a26628e62c505b33f56', 4670000000000000, datetime.datetime(2020, 6, 23, 5, 19), Decimal('139.18'), 'fraud_Bogisich Inc', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1424, 'd0ebd7584f593f0062dcc9c433500da8', 180000000000000, datetime.datetime(2020, 6, 23, 5, 19), Decimal('9.70'), 'fraud_Macejkovic-Lesch', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1425, '90bcc30b4ed4de39ed3263af2f8d8fa0', 4720000000000000, datetime.datetime(2020, 6, 23, 5, 19), Decimal('57.98'), 'fraud_Friesen-Stamm', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1426, '32da74277762e4f481912f2797735ddd', 676000000000, datetime.datetime(2020, 6, 23, 5, 20), Decimal('55.78'), 'fraud_Kutch-Hegmann', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1427, '406b8db850a1efa7e971be6839ce254f', 6010000000000000, datetime.datetime(2020, 6, 23, 5, 20), Decimal('186.41'), 'fraud_Goldner, Kovacek and Abbott', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1428, '65b312a6550a850827d25396382f99fa', 4300000000000000000, datetime.datetime(2020, 6, 23, 5, 21), Decimal('70.16'), 'fraud_Erdman-Kertzmann', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1429, '16e8e0aeea5d350bacea63eabfc2d5e0', 4650000000000000, datetime.datetime(2020, 6, 23, 5, 21), Decimal('119.55'), 'fraud_Kiehn-Emmerich', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1430, '7fe510bfd906aab9fd4b8aa05233a1df', 3560000000000000, datetime.datetime(2020, 6, 23, 5, 21), Decimal('975.81'), 'fraud_Kunde-Sanford', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1431, '79a4ec578b4b4e4b2ad62cf55142d5a1', 30300000000000, datetime.datetime(2020, 6, 23, 5, 21), Decimal('143.78'), 'fraud_Kutch and Sons', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1432, '6313ab04da4a905034506c3d297b02f1', 4940000000000000, datetime.datetime(2020, 6, 23, 5, 22), Decimal('99.00'), 'fraud_Strosin-Cruickshank', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1433, '6698dc04ceb8b93490c1f8d5c7ba0444', 6010000000000000, datetime.datetime(2020, 6, 23, 5, 22), Decimal('83.30'), 'fraud_Reilly, Heaney and Cole', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1434, '0bf1579bfc337e85c8f7ee0c08eabebf', 4790000000000, datetime.datetime(2020, 6, 23, 5, 23), Decimal('76.08'), 'fraud_Gutmann Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1435, '47c1d3bbfd19d5de496a1f0ab9b14c2d', 180000000000000, datetime.datetime(2020, 6, 23, 5, 23), Decimal('70.09'), 'fraud_Huels-Hahn', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1436, '957d50ed936aff3818a07bae00d195db', 374000000000000, datetime.datetime(2020, 6, 23, 5, 23), Decimal('91.53'), 'fraud_Turcotte-Halvorson', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1437, '9f3558a05cfb8e5293963c70c35a2f03', 630000000000, datetime.datetime(2020, 6, 23, 5, 24), Decimal('64.25'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1438, '6a54eb3500b0e01d6b691fc6d733aaee', 2250000000000000, datetime.datetime(2020, 6, 23, 5, 25), Decimal('125.28'), 'fraud_Sawayn PLC', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1439, '2c1433122a29c523a3454784c683d88b', 38600000000000, datetime.datetime(2020, 6, 23, 5, 25), Decimal('142.09'), 'fraud_Bashirian Group', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1440, '02fa965c3faf0ab4d5dbbe7e7ffc915e', 4220000000000, datetime.datetime(2020, 6, 23, 5, 26), Decimal('77.27'), 'fraud_Schultz, Simonis and Little', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1441, '03152a4bfe67f364ae0b428ae9cc2069', 3540000000000000, datetime.datetime(2020, 6, 23, 5, 28), Decimal('54.14'), 'fraud_Towne, Walker and Borer', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1442, '0f6c0e21081d7a7d55402e43820a07aa', 350000000000000, datetime.datetime(2020, 6, 23, 5, 28), Decimal('98.42'), 'fraud_Hudson-Ratke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1443, 'f01aea9b167dbf1229d078eb55fc951e', 376000000000000, datetime.datetime(2020, 6, 23, 5, 28), Decimal('122.57'), 'fraud_VonRueden Group', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1444, '3f55a6517ed7a16e855d6535d139f6c7', 676000000000, datetime.datetime(2020, 6, 23, 5, 30), Decimal('63.16'), 'fraud_Connelly, Reichert and Fritsch', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1445, '4f0b2c58fa619624a23fea32926fb9ba', 582000000000, datetime.datetime(2020, 6, 23, 5, 30), Decimal('321.61'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1446, 'fb5e0a12be04c3e32f118e63010fd137', 4770000000000000000, datetime.datetime(2020, 6, 23, 5, 30), Decimal('7.95'), 'fraud_Kerluke PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1447, '35f7fa4daf17074bb5f285c627695cb9', 2710000000000000, datetime.datetime(2020, 6, 23, 5, 30), Decimal('3.80'), 'fraud_Bauch-Blanda', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1448, '9408798248d688b85ce1af1bfb889b33', 180000000000000, datetime.datetime(2020, 6, 23, 5, 31), Decimal('7.28'), 'fraud_Stoltenberg-Beatty', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1449, '05bfcddfad6aa67bda5cab9e9cb84dff', 2710000000000000, datetime.datetime(2020, 6, 23, 5, 31), Decimal('3.59'), 'fraud_Huel Ltd', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1450, '636228d29b5a2d5ee437614c83bcf508', 30200000000000, datetime.datetime(2020, 6, 23, 5, 32), Decimal('313.64'), 'fraud_Goyette Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1451, 'a208d12a899586a5eb2fb3a4ed9f4fcc', 4640000000000000, datetime.datetime(2020, 6, 23, 5, 32), Decimal('48.42'), 'fraud_Kuhn LLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1452, '04154bf5c0f40724787b06c4504db5d5', 4860000000000000, datetime.datetime(2020, 6, 23, 5, 32), Decimal('71.18'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1453, '93825ecaf114115d83f909e230bc68f2', 2480000000000000, datetime.datetime(2020, 6, 23, 5, 33), Decimal('65.81'), 'fraud_Raynor, Feest and Miller', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1454, '5998ccae677718cd47eb5fe16a22a5c0', 3540000000000000, datetime.datetime(2020, 6, 23, 5, 33), Decimal('62.82'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1455, '57b8a790fc9072748441dcec29e22ee6', 3600000000000000, datetime.datetime(2020, 6, 23, 5, 34), Decimal('82.57'), 'fraud_Koss and Sons', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1456, '11b9ff0b8f385fc792aca08f54a85555', 6590000000000000, datetime.datetime(2020, 6, 23, 5, 34), Decimal('62.54'), 'fraud_Rutherford, Homenick and Bergstrom', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1457, '1b18db4f1c97835290d15711b17d56e2', 373000000000000, datetime.datetime(2020, 6, 23, 5, 35), Decimal('55.36'), 'fraud_Casper, Hand and Zulauf', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1458, '386924dd34ce88f6c5124b1833f6531a', 30400000000000, datetime.datetime(2020, 6, 23, 5, 36), Decimal('7.80'), 'fraud_Fisher Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1459, '8431fa1fdbda57835e2eb3cfec180efc', 4740000000000000, datetime.datetime(2020, 6, 23, 5, 36), Decimal('9.81'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1460, 'eaf4c46928792d8ef897a62dc53b7805', 6010000000000000, datetime.datetime(2020, 6, 23, 5, 36), Decimal('97.13'), 'fraud_Flatley-Durgan', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1461, '68e8807ce6d4e074b983e0b42734a7d9', 180000000000000, datetime.datetime(2020, 6, 23, 5, 36), Decimal('80.25'), 'fraud_Ferry, Reichel and DuBuque', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1462, '1996963aef2ae6d3d36be3fbc613ff4c', 4360000000000000000, datetime.datetime(2020, 6, 23, 5, 36), Decimal('3.68'), 'fraud_Lebsack and Sons', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1463, '35142fd33c6af54707bed050e34f727a', 4860000000000000000, datetime.datetime(2020, 6, 23, 5, 37), Decimal('38.86'), 'fraud_Wiza LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1464, '79695c032994b34d988faab172f9faae', 676000000000, datetime.datetime(2020, 6, 23, 5, 38), Decimal('43.81'), 'fraud_Streich, Hansen and Veum', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1465, '62acac26327567302faa7649f4638fed', 4130000000000000, datetime.datetime(2020, 6, 23, 5, 38), Decimal('7.35'), 'fraud_Turner, Ruecker and Parisian', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1466, '63b12fc0a5d96635c786ea0e10c1900c', 4510000000000000000, datetime.datetime(2020, 6, 23, 5, 38), Decimal('47.45'), 'fraud_Rowe, Batz and Goodwin', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1467, '7ec5a0a0262855c07c2add9fd8bbc619', 6010000000000000, datetime.datetime(2020, 6, 23, 5, 38), Decimal('44.60'), 'fraud_Kuvalis Ltd', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1468, 'df29906cb30a5eeda8d13e8d5e1f2524', 4290000000000, datetime.datetime(2020, 6, 23, 5, 39), Decimal('6.23'), 'fraud_Boyer PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1469, '5a86ab6384cee02f1dc2c90a03be0626', 4590000000000000000, datetime.datetime(2020, 6, 23, 5, 39), Decimal('102.46'), 'fraud_Jenkins, Hauck and Friesen', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1470, 'cb3bca5fed3413ea14bc67e67747cf76', 3560000000000000, datetime.datetime(2020, 6, 23, 5, 40), Decimal('72.27'), 'fraud_Kuvalis Ltd', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1471, 'db1e1efeda31f62de85ce4a7a45f9772', 3560000000000000, datetime.datetime(2020, 6, 23, 5, 40), Decimal('63.11'), 'fraud_Wilkinson Ltd', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1472, 'c310ee3dbef02f110f193df5edf96ae7', 4790000000000, datetime.datetime(2020, 6, 23, 5, 41), Decimal('3.21'), 'fraud_Brown PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1473, '2a1fcac2fd9be89c8e61789242b7a0e5', 4800000000000000000, datetime.datetime(2020, 6, 23, 5, 41), Decimal('104.18'), 'fraud_Padberg-Welch', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1474, 'cdd989e5c41c31265477cd4bfdb754a9', 180000000000000, datetime.datetime(2020, 6, 23, 5, 41), Decimal('70.83'), 'fraud_Zieme, Bode and Dooley', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1475, 'e773b6bc1221c9a5fa77119e8f27830e', 5540000000000000, datetime.datetime(2020, 6, 23, 5, 42), Decimal('40.80'), 'fraud_Mosciski, Gislason and Mertz', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1476, '70403111171cd03114954221f546c69b', 573000000000, datetime.datetime(2020, 6, 23, 5, 43), Decimal('7.22'), 'fraud_Morissette LLC', 'entertainment', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1477, '25680adab2a34120568efadf32470c9e', 30400000000000, datetime.datetime(2020, 6, 23, 5, 43), Decimal('8.44'), 'fraud_Williamson LLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1478, '577856a3b37975e38132e51bf7109828', 30100000000000, datetime.datetime(2020, 6, 23, 5, 44), Decimal('71.86'), 'fraud_Bahringer-Larson', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1479, '72c2ad5374be97b634a1d834c6a11a9b', 4450000000000000, datetime.datetime(2020, 6, 23, 5, 45), Decimal('92.32'), 'fraud_Goodwin-Nitzsche', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1480, '9493350e2ef52eb6240c0eb97ae855a4', 6600000000000000, datetime.datetime(2020, 6, 23, 5, 45), Decimal('3.50'), 'fraud_Mayert Group', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1481, 'ecaa41fbba09992845086ef15d7398fb', 4430000000000000, datetime.datetime(2020, 6, 23, 5, 45), Decimal('23.54'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1482, '2a0cb1fa8f51fcb1bae0017a50c15115', 4300000000000000, datetime.datetime(2020, 6, 23, 5, 46), Decimal('60.82'), 'fraud_Stracke-Lemke', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1483, '772a63696752f51a85b8e501f1af7138', 180000000000000, datetime.datetime(2020, 6, 23, 5, 46), Decimal('80.84'), 'fraud_Rodriguez Group', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1484, '93255d10af4ea98731a0004fe3b8f276', 4660000000000000, datetime.datetime(2020, 6, 23, 5, 46), Decimal('126.60'), \"fraud_O'Keefe-Hudson\", 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1485, '0d878f6e44514bee9edd630e0afa1b96', 3560000000000000, datetime.datetime(2020, 6, 23, 5, 46), Decimal('36.68'), 'fraud_Flatley Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1486, 'd3435bf4af9a573b8befa6b4d6c0577d', 3540000000000000, datetime.datetime(2020, 6, 23, 5, 47), Decimal('161.22'), 'fraud_Conroy Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1487, 'e4f00eba13c648d8c32a7123fc65f86e', 4490000000000000000, datetime.datetime(2020, 6, 23, 5, 48), Decimal('6.82'), 'fraud_Quitzon, Green and Bashirian', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1488, '3e73a6ecee1ffd341ae5f20e597378eb', 676000000000, datetime.datetime(2020, 6, 23, 5, 48), Decimal('53.06'), 'fraud_Murray Ltd', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1489, '9e3a65d388cdb8ffc5d82533636d988b', 4840000000000000, datetime.datetime(2020, 6, 23, 5, 49), Decimal('30.89'), 'fraud_Monahan, Bogisich and Ledner', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1490, '19d8f1a40b2feb23c01f4d5e95454701', 213000000000000, datetime.datetime(2020, 6, 23, 5, 49), Decimal('57.48'), 'fraud_Rodriguez Group', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1491, '50602c45e6c36d7c96af334f6c1670c5', 3570000000000000, datetime.datetime(2020, 6, 23, 5, 49), Decimal('1.62'), 'fraud_Botsford Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1492, 'd25ff5b7a9eefb1900405a4bee54e28f', 30400000000000, datetime.datetime(2020, 6, 23, 5, 50), Decimal('47.60'), 'fraud_Stiedemann Inc', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1493, '15c2a8d0ea25082621f7f91c3742cb49', 30200000000000, datetime.datetime(2020, 6, 23, 5, 51), Decimal('194.22'), 'fraud_Thiel PLC', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1494, '8028ad999bf05960f38617ac32690ed3', 4240000000000000, datetime.datetime(2020, 6, 23, 5, 52), Decimal('2077.77'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1495, '2987f3b4c609f4fc460714f20c8adde1', 568000000000, datetime.datetime(2020, 6, 23, 5, 53), Decimal('204.70'), 'fraud_Murray-Smitham', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1496, 'd90fd911055be25063a6cfa77ca22362', 6600000000000000, datetime.datetime(2020, 6, 23, 5, 53), Decimal('133.39'), 'fraud_Koepp-Parker', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1497, '471e2030bb2ff33a81dbe7381dde8ef0', 180000000000000, datetime.datetime(2020, 6, 23, 5, 54), Decimal('70.32'), 'fraud_Ledner-Pfannerstill', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1498, '6ce6f0d5888c09ef32652c04a5a63b78', 571000000000, datetime.datetime(2020, 6, 23, 5, 54), Decimal('47.77'), 'fraud_Kutch-Hegmann', 'grocery_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1499, 'e10956018d6c1267cd19e6e55bf18f3d', 4310000000000000, datetime.datetime(2020, 6, 23, 5, 54), Decimal('3.72'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1500, '53f0b0889a8a6849730c9cca6803e8da', 6550000000000000, datetime.datetime(2020, 6, 23, 5, 55), Decimal('9.12'), 'fraud_Terry, Johns and Bins', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1501, '3c1f647ce60bd5f842619179791c2551', 38200000000000, datetime.datetime(2020, 6, 23, 5, 55), Decimal('102.12'), 'fraud_DuBuque LLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1502, '19e4db2c66d4108ab912655ad238a9a4', 3530000000000000, datetime.datetime(2020, 6, 23, 5, 56), Decimal('9.36'), 'fraud_Brown PLC', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1503, '8881f46a13686a2df6a01d690ea3cdad', 5360000000000000, datetime.datetime(2020, 6, 23, 5, 56), Decimal('70.59'), 'fraud_Schaefer, McGlynn and Bosco', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1504, '8f14b0c5fe41f7753b7a503a371a6f55', 2220000000000000, datetime.datetime(2020, 6, 23, 5, 56), Decimal('43.54'), 'fraud_Streich, Hansen and Veum', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1505, '7e47a45b71626d7cbea8f0fe9a27888a', 4870000000000000, datetime.datetime(2020, 6, 23, 5, 56), Decimal('189.62'), 'fraud_Cole PLC', 'grocery_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1506, '01f68dd31ebbc5bf8e20a8849e1acc48', 3550000000000000, datetime.datetime(2020, 6, 23, 5, 56), Decimal('36.10'), 'fraud_Botsford Ltd', 'shopping_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1507, '9c41d0c735fee6c59fd21ff2de006941', 4640000000000, datetime.datetime(2020, 6, 23, 5, 57), Decimal('75.44'), 'fraud_Christiansen, Goyette and Schamberger', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1508, 'd4e9542309021e2497a8cf1f3a7f2a2d', 4500000000000000000, datetime.datetime(2020, 6, 23, 5, 58), Decimal('146.93'), 'fraud_Torp-Lemke', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1509, 'b1709929e94ce7dfe0f7592411dea519', 6600000000000000, datetime.datetime(2020, 6, 23, 5, 58), Decimal('65.47'), 'fraud_Cummerata-Jones', 'gas_transport', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1510, '2471d477106027d14949ec1fdabda583', 4130000000000000000, datetime.datetime(2020, 6, 23, 5, 58), Decimal('6.05'), 'fraud_Hills-Witting', 'shopping_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1511, 'a18ae1a2695179657dca90d5641e840f', 3510000000000000, datetime.datetime(2020, 6, 23, 5, 59), Decimal('39.40'), 'fraud_Gislason Group', 'misc_pos', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(1512, '76f7b98e822f628e3588432c779fc8e6', 180000000000000, datetime.datetime(2020, 6, 23, 5, 59), Decimal('27.84'), 'fraud_Kuphal-Predovic', 'misc_net', 0, 'Odd transaction hour', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2079, '6c2b797c1729405a26268c665c4e5c8d', 2300000000000000, datetime.datetime(2020, 6, 21, 12, 32), Decimal('9.23'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2080, 'b75478a228cd12239ac8ec796664c665', 4760000000000, datetime.datetime(2020, 6, 21, 12, 37), Decimal('5.37'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2081, '7402f469a73cf016d793d3111306017b', 180000000000000, datetime.datetime(2020, 6, 21, 12, 38), Decimal('4.94'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2082, 'cc4cbdd981c4168207c152552049c6c4', 3520000000000000, datetime.datetime(2020, 6, 21, 12, 47), Decimal('9.17'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2083, 'd538564d5f10e27d085d28a729d2d712', 4650000000000000, datetime.datetime(2020, 6, 21, 13, 1), Decimal('7.01'), 'fraud_Nader-Heller', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2084, '29e429a9aa6b648608808cf528acce73', 6590000000000000, datetime.datetime(2020, 6, 21, 13, 1), Decimal('32.82'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2085, '0a4e8eb858470184696ba2026a105361', 6010000000000000, datetime.datetime(2020, 6, 21, 13, 7), Decimal('118.21'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2086, '249ecb7b44d6d42a8eb155833fe23c53', 6010000000000000, datetime.datetime(2020, 6, 21, 13, 8), Decimal('1199.45'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2087, '88c4b3f91b1381005e54ecf64d47074c', 6540000000000000, datetime.datetime(2020, 6, 21, 13, 9), Decimal('28.94'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2088, 'e1766317e6eb58ae76cdc01a47c63584', 2300000000000000, datetime.datetime(2020, 6, 21, 13, 10), Decimal('4.74'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2089, '0fd4fa5c06708220488c6f6e195d75db', 3500000000000000, datetime.datetime(2020, 6, 21, 13, 30), Decimal('119.15'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2090, '77a6ff12eeeeac93b866afaacfb3a62c', 4000000000000000, datetime.datetime(2020, 6, 21, 13, 30), Decimal('7.81'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2091, 'd8188cc764b76befb9196b2d137b6e16', 4480000000000, datetime.datetime(2020, 6, 21, 13, 36), Decimal('236.15'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2092, '971adb58ea4add884f030ffffef16cfe', 30300000000000, datetime.datetime(2020, 6, 21, 13, 39), Decimal('34.11'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2093, '695059cc77e6924bf4ce161cbc17f017', 3530000000000000, datetime.datetime(2020, 6, 21, 13, 43), Decimal('59.08'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2094, '8c3f3b2b91f1a39b5c6e44b38fb3986e', 3580000000000000, datetime.datetime(2020, 6, 21, 13, 47), Decimal('9.80'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2095, 'd79d56be64e59e029760dc6efe2c3ab8', 4840000000000000, datetime.datetime(2020, 6, 21, 13, 48), Decimal('6.82'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2096, 'c92da601dbc38b95ab31be0febc3bf23', 3530000000000000, datetime.datetime(2020, 6, 21, 13, 56), Decimal('7.06'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2097, '45b4ec6713f9460b70895b366353523e', 4170000000000000, datetime.datetime(2020, 6, 21, 13, 58), Decimal('127.60'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2098, 'ad39f44b505f6088077315842e12005a', 3530000000000000, datetime.datetime(2020, 6, 21, 14, 3), Decimal('63.97'), 'fraud_Lehner, Mosciski and King', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2099, '7f37eb5e8b32669666bb9f607a3a4696', 4240000000000, datetime.datetime(2020, 6, 21, 14, 9), Decimal('8.54'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2100, '968365c9f566a3a9f20d5a45162d6ab7', 180000000000000, datetime.datetime(2020, 6, 21, 14, 9), Decimal('3.11'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2101, 'dccc50d067404415f5546ce81c6ee9e4', 6010000000000000, datetime.datetime(2020, 6, 21, 14, 12), Decimal('5.48'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2102, '9d8f0eae36c3d3075215e445bd676608', 373000000000000, datetime.datetime(2020, 6, 21, 14, 16), Decimal('141.75'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2103, '8cb7da180ebe2bc0af441ff0039b5fec', 2720000000000000, datetime.datetime(2020, 6, 21, 14, 18), Decimal('9.77'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2104, 'e97a7450c20f36dea493d8702f47f8dc', 2240000000000000, datetime.datetime(2020, 6, 21, 14, 21), Decimal('92.44'), 'fraud_Welch Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2105, 'd6fc2038a4e43f2fa4e7951f28538337', 180000000000000, datetime.datetime(2020, 6, 21, 14, 22), Decimal('3.12'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2106, '51fac230026fb45f8c92c2dc49a58ffc', 180000000000000, datetime.datetime(2020, 6, 21, 14, 24), Decimal('98.67'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2107, '172c9b3576b1fb30e7782397c2688978', 4680000000000000, datetime.datetime(2020, 6, 21, 14, 30), Decimal('156.72'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2108, 'b723deda481fac40afc6fde947cf9033', 180000000000000, datetime.datetime(2020, 6, 21, 14, 30), Decimal('456.22'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2109, '9d80986daa16adf45d0fd18d576dbb03', 4640000000000, datetime.datetime(2020, 6, 21, 14, 34), Decimal('4.49'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2110, 'e836f0b755271bb391376c8747de5732', 6010000000000000, datetime.datetime(2020, 6, 21, 14, 38), Decimal('31.66'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2111, '09a7e44e3074e4231e38003d2bee5569', 30100000000000, datetime.datetime(2020, 6, 21, 14, 39), Decimal('62.44'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2112, '05f8f3d9bd0d70ed2f59131c35c58be8', 4650000000000000, datetime.datetime(2020, 6, 21, 15, 6), Decimal('4.68'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2113, '55c0eb89932359d67e268708fb6a846d', 3530000000000000, datetime.datetime(2020, 6, 21, 15, 8), Decimal('4.54'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2114, '12712f97e095829371d6aa1537bf1aa1', 30400000000000, datetime.datetime(2020, 6, 21, 15, 24), Decimal('4.69'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2115, '8f566427ab7c38d254851fd276f72b24', 4910000000000000, datetime.datetime(2020, 6, 21, 15, 25), Decimal('2.84'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2116, '541011cd8872de2459a68cb2518c8791', 4190000000000000, datetime.datetime(2020, 6, 21, 15, 30), Decimal('8.10'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2117, 'e24f72c3bf3e1e90f2280d6357115d29', 6530000000000000, datetime.datetime(2020, 6, 21, 15, 37), Decimal('9.79'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2118, '8c4df8b92b40506609b81e416c52923d', 346000000000000, datetime.datetime(2020, 6, 21, 15, 45), Decimal('16.83'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2119, '861add81caf368fc2845fe1902d4db22', 4610000000000000, datetime.datetime(2020, 6, 21, 15, 45), Decimal('3.53'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2120, '6d33c76bb39771ba696f008959183ee8', 3570000000000000, datetime.datetime(2020, 6, 21, 15, 50), Decimal('5.72'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2121, '56e470f0c95c734d2892d6dab6a67b3b', 4510000000000000000, datetime.datetime(2020, 6, 21, 15, 50), Decimal('4.97'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2122, '42b117ba7af17060e39ff638aa88cb29', 4720000000000000, datetime.datetime(2020, 6, 21, 16, 0), Decimal('9.23'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2123, 'd51f9b2a5af74f37937cf1114e5ed6ae', 3590000000000000, datetime.datetime(2020, 6, 21, 16, 0), Decimal('120.30'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2124, '13c73fa5343e4e38d2e03c4e9ff1cf6e', 4840000000000000, datetime.datetime(2020, 6, 21, 16, 3), Decimal('1.44'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2125, '0bef86fb6b7841de6b3a1f03e6a46a59', 4380000000000, datetime.datetime(2020, 6, 21, 16, 7), Decimal('9.39'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2126, '3ae8fcba01dcce1addf38d431709a27a', 6010000000000000, datetime.datetime(2020, 6, 21, 16, 7), Decimal('410.26'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2127, 'f5c250b45b8efc2bedaae8c73dc33a1c', 376000000000000, datetime.datetime(2020, 6, 21, 16, 10), Decimal('7.22'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2128, '9405b7d7f0ee09dc4b30318749055343', 4360000000000000, datetime.datetime(2020, 6, 21, 16, 18), Decimal('7.75'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2129, '695c74c63765b5b49f8cd03a0f71969f', 343000000000000, datetime.datetime(2020, 6, 21, 16, 18), Decimal('705.59'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2130, 'e1d1723770f702944afd2ec020fd9df0', 3520000000000000, datetime.datetime(2020, 6, 21, 16, 22), Decimal('724.14'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2131, 'e7b63c0b78bee168e9a3420f8ae91b14', 4210000000000000000, datetime.datetime(2020, 6, 21, 16, 23), Decimal('8.97'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2132, 'fcc876ab03df7f3fb56e2556f395e2f9', 2450000000000000, datetime.datetime(2020, 6, 21, 16, 24), Decimal('5.48'), 'fraud_Lebsack and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2133, '02279c6f93081047a2141171076a2c6c', 6010000000000000, datetime.datetime(2020, 6, 21, 16, 24), Decimal('6.11'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2134, '9494a3f97b837dccdccbfca029b48d0f', 3500000000000000, datetime.datetime(2020, 6, 21, 16, 36), Decimal('59.46'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2135, 'f9ab9557fdff6ead341cd51fd038a8cf', 3580000000000000, datetime.datetime(2020, 6, 21, 16, 36), Decimal('3.28'), 'fraud_Durgan-Auer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2136, '5cfac103da510f91b67debbefbcd4a9c', 4900000000000000, datetime.datetime(2020, 6, 21, 16, 42), Decimal('9.59'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2137, '6fadc8942bf7bc986fdc3f199c95bbc4', 30400000000000, datetime.datetime(2020, 6, 21, 16, 47), Decimal('2.65'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2138, '1ea9c7f1b096a9a343be7fb375a85a68', 3580000000000000, datetime.datetime(2020, 6, 21, 16, 52), Decimal('65.11'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2139, 'ee69e3d6cdcfed7d77d6f701c53219d6', 3580000000000000, datetime.datetime(2020, 6, 21, 17, 7), Decimal('376.28'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2140, 'e76fed346feb28196ceeefc92c508f7b', 4200000000000, datetime.datetime(2020, 6, 21, 17, 9), Decimal('3.58'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2141, 'd2694c9d5be2b3ed6b9437d2e940f335', 341000000000000, datetime.datetime(2020, 6, 21, 17, 11), Decimal('1.70'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2142, '5a48ada474f037a7cb63e8161349338e', 3580000000000000, datetime.datetime(2020, 6, 21, 17, 13), Decimal('644.64'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2143, '359c91628d5814974c0059d14841e5b5', 2240000000000000, datetime.datetime(2020, 6, 21, 17, 13), Decimal('9.79'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2144, 'b7548a0a1118da38a38fd2faf929cef8', 3550000000000000, datetime.datetime(2020, 6, 21, 17, 18), Decimal('3.04'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2145, '4b8a9903ad7cdf6ffb369d07efbc6e7c', 6010000000000000, datetime.datetime(2020, 6, 21, 17, 24), Decimal('14.04'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2146, 'b9f7c65200fdd37eed690cb19d099408', 3550000000000000, datetime.datetime(2020, 6, 21, 17, 24), Decimal('19.81'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2147, '57123263a84f35756406e214cecdb930', 2710000000000000, datetime.datetime(2020, 6, 21, 17, 24), Decimal('120.06'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2148, 'a95d68cd73b69e6f3b5172d01c727c0f', 345000000000000, datetime.datetime(2020, 6, 21, 17, 25), Decimal('72.23'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2149, 'bdc54ee2b661d76774203955d0c35c26', 4290000000000000000, datetime.datetime(2020, 6, 21, 17, 27), Decimal('1.34'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2150, '29574c817ee6a057fe2579fdf8acd41c', 180000000000000, datetime.datetime(2020, 6, 21, 17, 32), Decimal('2.84'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2151, 'e6cc225cb09c98e1d48b89cdebc29c73', 4450000000000000, datetime.datetime(2020, 6, 21, 17, 36), Decimal('21.02'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2152, '7da55d2907e1605043d82d42b637d029', 4380000000000000, datetime.datetime(2020, 6, 21, 17, 37), Decimal('2.21'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2153, 'db64f0c38997cebe5f0d05777add59bc', 6010000000000000, datetime.datetime(2020, 6, 21, 17, 38), Decimal('9.20'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2154, 'e3f14db177ab8c75da3188712fcbfd9b', 4500000000000000000, datetime.datetime(2020, 6, 21, 17, 57), Decimal('115.32'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2155, 'b1d6857f31e2db467a39c8118bbfaf94', 3500000000000000, datetime.datetime(2020, 6, 21, 18, 1), Decimal('3.10'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2156, '80a20e8638b23c65672e67b1d7feeef7', 574000000000, datetime.datetime(2020, 6, 21, 18, 2), Decimal('8.80'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2157, 'ae91b0291ac72991b8c9ee45eeb66643', 373000000000000, datetime.datetime(2020, 6, 21, 18, 4), Decimal('17.19'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2158, '5ec4f0723bf9f23ad674a98961541958', 373000000000000, datetime.datetime(2020, 6, 21, 18, 6), Decimal('1.16'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2159, '3b1e799de5fa593a74b851b9d5f8bbe1', 4300000000000000, datetime.datetime(2020, 6, 21, 18, 8), Decimal('981.92'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2160, '0d96598cdbd016ba0bd6dc0e4da148b4', 6510000000000000, datetime.datetime(2020, 6, 21, 18, 9), Decimal('86.65'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2161, '1814cdf0b0ea3ed5d872eae29556c28b', 345000000000000, datetime.datetime(2020, 6, 21, 18, 10), Decimal('1.22'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2162, '9d0083f94a84e84987b42e0523d49b25', 4650000000000000000, datetime.datetime(2020, 6, 21, 18, 10), Decimal('17.59'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2163, '427fd3556ca432bcba014519ab8f75d2', 4180000000000000000, datetime.datetime(2020, 6, 21, 18, 14), Decimal('6.69'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2164, 'f41793cc129b0a64083740b92cefced5', 4260000000000, datetime.datetime(2020, 6, 21, 18, 18), Decimal('70.11'), 'fraud_Nader-Heller', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2165, 'b969cde10e97e23f2c767c6afc330f04', 378000000000000, datetime.datetime(2020, 6, 21, 18, 25), Decimal('2.99'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2166, 'f291a345979168c5ce516a16d09169f6', 345000000000000, datetime.datetime(2020, 6, 21, 18, 27), Decimal('5.63'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2167, '88ddc6672baa4979ad08a0f6cf0a702b', 3540000000000000, datetime.datetime(2020, 6, 21, 18, 29), Decimal('3.66'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2168, '4450330f7aa908312ab3fd43cc7deee3', 3580000000000000, datetime.datetime(2020, 6, 21, 18, 29), Decimal('4.81'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2169, '3c6beda1859bd8b6cd542672a44cbe9c', 213000000000000, datetime.datetime(2020, 6, 21, 18, 31), Decimal('80.26'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2170, '2837df0589b5763b1d4e5a9f6a43fb1c', 213000000000000, datetime.datetime(2020, 6, 21, 18, 42), Decimal('5.11'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2171, 'dce6f551014086390abd25b8218b12ef', 3590000000000000, datetime.datetime(2020, 6, 21, 18, 49), Decimal('19.87'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2172, '6d779cc52c835278667b9d1df2fb7309', 4190000000000, datetime.datetime(2020, 6, 21, 19, 2), Decimal('5.02'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2173, '51a6fed4f07fb8b4c597b7879359394c', 376000000000000, datetime.datetime(2020, 6, 21, 19, 7), Decimal('6.64'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2174, 'babcdd3079834a77b88e67771e871a18', 4800000000000000000, datetime.datetime(2020, 6, 21, 19, 8), Decimal('4.40'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2175, 'c5a8edfdb42167319d38fa70af8b8ecd', 3550000000000000, datetime.datetime(2020, 6, 21, 19, 11), Decimal('3.66'), 'fraud_Block-Parisian', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2176, '84c15baf638dea702f8287b8c74bcf3f', 3580000000000000, datetime.datetime(2020, 6, 21, 19, 14), Decimal('19.46'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2177, 'af9a41437a9045da96aa40ec3d85218f', 6010000000000000, datetime.datetime(2020, 6, 21, 19, 16), Decimal('6.38'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2178, '591e9e879f9dee84673fe9987cb1beb3', 30200000000000, datetime.datetime(2020, 6, 21, 19, 21), Decimal('9.57'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2179, 'c85afa83baac7c52879fb9ee30af78e4', 3590000000000000, datetime.datetime(2020, 6, 21, 19, 23), Decimal('480.56'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2180, '82f73b75a79794ab9c9181982f86a96a', 30100000000000, datetime.datetime(2020, 6, 21, 19, 26), Decimal('13.99'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2181, '254132b60308e8a78fd1e8af0fa9aa92', 4940000000000000, datetime.datetime(2020, 6, 21, 19, 28), Decimal('2.14'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2182, 'f762466823759f2587383260179a032d', 3560000000000000, datetime.datetime(2020, 6, 21, 19, 32), Decimal('9.68'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2183, '85189f3c6c99a767a9a9541a07347360', 4640000000000, datetime.datetime(2020, 6, 21, 19, 41), Decimal('1.04'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2184, 'f9ba7461a8b2bb4ed43a80c367c46c7c', 630000000000, datetime.datetime(2020, 6, 21, 19, 41), Decimal('5.76'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2185, 'e2da8cd0d06d808240040c584d9d651d', 180000000000000, datetime.datetime(2020, 6, 21, 19, 44), Decimal('3.32'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2186, 'e8d5a72abe6e43e18557beffcecc451a', 4170000000000000, datetime.datetime(2020, 6, 21, 19, 46), Decimal('9.35'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2187, '1cbf254e563fe85c6fc34a1cbda2256a', 3540000000000000, datetime.datetime(2020, 6, 21, 19, 48), Decimal('244.88'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2188, 'a3328119a813e1fe9c448b11af33012c', 38500000000000, datetime.datetime(2020, 6, 21, 19, 48), Decimal('4.49'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2189, 'e14f22aa15e35aa5ea0e5253d7b39fcd', 6010000000000000, datetime.datetime(2020, 6, 21, 20, 4), Decimal('122.82'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2190, '4bd56dee1f6fdcf69c24dc6922813c0d', 374000000000000, datetime.datetime(2020, 6, 21, 20, 5), Decimal('2.43'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2191, '8ec633b149a63e9fcf4313dea7bfb1eb', 630000000000, datetime.datetime(2020, 6, 21, 20, 6), Decimal('1.74'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2192, '0af045d8a5b4ae876b90f72ea496a6b6', 3520000000000000, datetime.datetime(2020, 6, 21, 20, 7), Decimal('376.65'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2193, '2bfd18c7e674475d7d34263f2cf587da', 4590000000000000, datetime.datetime(2020, 6, 21, 20, 11), Decimal('156.40'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2194, '6228a57f008628933ac25b0c67c7c43a', 4960000000000000000, datetime.datetime(2020, 6, 21, 20, 15), Decimal('1420.90'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2195, 'c0e5d0589f126b2d549b942e89b97c45', 4900000000000, datetime.datetime(2020, 6, 21, 20, 19), Decimal('2.56'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2196, 'e812db46ec13231bc1b8df91239ee036', 38100000000000, datetime.datetime(2020, 6, 21, 20, 21), Decimal('5.34'), 'fraud_Koelpin and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2197, 'f0c428ca5e8084b0753eca7828a74f67', 5540000000000000, datetime.datetime(2020, 6, 21, 20, 31), Decimal('2271.66'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2198, '556ade6d5c0585f5e34e7ebb28bf6365', 38100000000000, datetime.datetime(2020, 6, 21, 20, 31), Decimal('6.49'), 'fraud_Bednar Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2199, '2f9ecd098e8e4e2a4da20ebbdd40c255', 30200000000000, datetime.datetime(2020, 6, 21, 20, 33), Decimal('23.38'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2200, '60b005439292152a94a97e63ba90dbe2', 4910000000000000, datetime.datetime(2020, 6, 21, 20, 35), Decimal('1.62'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2201, '6eee22b6680f911592f38d218c9221e9', 4200000000000, datetime.datetime(2020, 6, 21, 20, 37), Decimal('5.29'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2202, '5715fe5210e43b7e216fd079cbd97a51', 30500000000000, datetime.datetime(2020, 6, 21, 20, 39), Decimal('1.16'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2203, '92624f43391e32278f2fd55509f3d819', 4240000000000, datetime.datetime(2020, 6, 21, 20, 54), Decimal('3.14'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2204, '741c4f656e74d8d83982ee6c82f51197', 30400000000000, datetime.datetime(2020, 6, 21, 20, 55), Decimal('7.62'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2205, 'e6dab26483c08e98841d141b4de2dd11', 4640000000000000, datetime.datetime(2020, 6, 21, 20, 56), Decimal('122.55'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2206, 'a189fec5bd2946652dcc8ea9b4e4afe0', 639000000000, datetime.datetime(2020, 6, 21, 21, 15), Decimal('1.68'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2207, '320ef5f90f07843f4f19ad54584dae89', 3590000000000000, datetime.datetime(2020, 6, 21, 21, 19), Decimal('28.33'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2208, '164c74c308e19a11e30e86b87fea531c', 4500000000000000000, datetime.datetime(2020, 6, 21, 21, 20), Decimal('1.53'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2209, '083526a9703281bb6a001c7b028328e7', 630000000000, datetime.datetime(2020, 6, 21, 21, 21), Decimal('4.09'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2210, 'f69a1b0f26e92e50c2f6b22567435cef', 373000000000000, datetime.datetime(2020, 6, 21, 21, 23), Decimal('4.27'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2211, '9786f32e04e98027662126db7f3a4b85', 4280000000000, datetime.datetime(2020, 6, 21, 21, 25), Decimal('3.46'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2212, '20cf5662dd072c880f523b483b7b4662', 3530000000000000, datetime.datetime(2020, 6, 21, 21, 34), Decimal('1.15'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2213, '2f301342c23a2ceca3d927514d9cbade', 6500000000000000, datetime.datetime(2020, 6, 21, 21, 34), Decimal('15.50'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2214, '03305dbbfe76f3d76830152309cd51bc', 4560000000000000000, datetime.datetime(2020, 6, 21, 21, 49), Decimal('1.31'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2215, '91864193d2003804c85a6de311492fe4', 6010000000000000, datetime.datetime(2020, 6, 21, 22, 2), Decimal('5.72'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2216, '52d1fa842d250d10af510992171b868c', 2240000000000000, datetime.datetime(2020, 6, 21, 22, 3), Decimal('165.40'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2217, 'bf8eff4315e3c20d5c44197f7bffeac9', 676000000000, datetime.datetime(2020, 6, 21, 22, 9), Decimal('3.27'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2218, '670e9fd071e3745d6d90b5ee5f29c64c', 4430000000000, datetime.datetime(2020, 6, 21, 22, 9), Decimal('890.22'), 'fraud_Lebsack and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2219, '9928d5e985d94eeb27939656a341e655', 3520000000000000, datetime.datetime(2020, 6, 21, 22, 10), Decimal('9.20'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2220, '0f4c6e13ef74458af5878daf250b369e', 180000000000000, datetime.datetime(2020, 6, 21, 22, 13), Decimal('3.50'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2221, 'ec85b6400c186dd02355f2950205a3b1', 4500000000000000000, datetime.datetime(2020, 6, 21, 22, 29), Decimal('124.13'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2222, 'b6c66e688e393a7f8add92d47387b50d', 4560000000000000000, datetime.datetime(2020, 6, 21, 22, 35), Decimal('15.56'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2223, '19d89cf5ea32c11bed1d37d61ad5f365', 3530000000000000, datetime.datetime(2020, 6, 21, 22, 40), Decimal('8.36'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2224, '6eb234a75064ae1836913103c1b951d2', 375000000000000, datetime.datetime(2020, 6, 21, 22, 44), Decimal('3.97'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2225, 'ceaf1e34dfa1dd030e5652d842c868d8', 2290000000000000, datetime.datetime(2020, 6, 21, 22, 46), Decimal('1.06'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2226, 'bdec7bb7d450d30f932e43b7e4753378', 376000000000000, datetime.datetime(2020, 6, 21, 22, 47), Decimal('6.87'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2227, '2e9712c3bfefea0b58c7af9d90e9c7bb', 6010000000000000, datetime.datetime(2020, 6, 21, 22, 52), Decimal('1.57'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2228, '91a82539f0f334c5d80af020699961e1', 2720000000000000, datetime.datetime(2020, 6, 21, 22, 55), Decimal('4.05'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2229, '6bb98f910dafd45887cd90ea780f83f7', 373000000000000, datetime.datetime(2020, 6, 21, 23, 0), Decimal('3.11'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2230, '164cd816689a142683493a3ce321852c', 676000000000, datetime.datetime(2020, 6, 21, 23, 12), Decimal('2.29'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2231, '85c30ef71e6988f4c9078ae7a0f32b66', 30100000000000, datetime.datetime(2020, 6, 21, 23, 15), Decimal('6.05'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2232, '363715929263614f8ec8274b9cc7ee95', 3550000000000000, datetime.datetime(2020, 6, 21, 23, 17), Decimal('55.98'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2233, '65e27da5c3e9243fa00d22dc246226bc', 4610000000000000, datetime.datetime(2020, 6, 21, 23, 21), Decimal('104.11'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2234, 'd4cc0b8ea9f729c529955cad46bc1145', 378000000000000, datetime.datetime(2020, 6, 21, 23, 26), Decimal('2.83'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2235, 'f55e08b9e6f3ad688e95e9a79703174c', 3530000000000000, datetime.datetime(2020, 6, 21, 23, 28), Decimal('9.81'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2236, '439be8723c7a5a69a16b5e2402689b49', 3570000000000000, datetime.datetime(2020, 6, 21, 23, 30), Decimal('1.87'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2237, 'b74982562f29fb01c256db6d3476913c', 2280000000000000, datetime.datetime(2020, 6, 21, 23, 30), Decimal('3.10'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2238, 'c6a1e30dbe9c9c55f89fe1b73d2e903e', 568000000000, datetime.datetime(2020, 6, 21, 23, 31), Decimal('3.32'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2239, '00a1dc32838eb12735babaa2e8cf5251', 4540000000000000000, datetime.datetime(2020, 6, 21, 23, 34), Decimal('1.62'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2240, '8465b9b2d61e369fbf825874d8c0aa2b', 6010000000000000, datetime.datetime(2020, 6, 21, 23, 38), Decimal('7.84'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2241, '12a9f8a0d63ab67b5878004d14c7c0f1', 574000000000, datetime.datetime(2020, 6, 21, 23, 41), Decimal('5.18'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2242, '1355f30c674c3853f23bfb1484c3fa7c', 373000000000000, datetime.datetime(2020, 6, 21, 23, 42), Decimal('1.75'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2243, 'f7cc0f7ad459bc9b1d1eeeef8a04be49', 3580000000000000, datetime.datetime(2020, 6, 21, 23, 45), Decimal('2.40'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2244, '3c84e87ddca9efc9c7e94255ed256dcf', 3600000000000000, datetime.datetime(2020, 6, 21, 23, 50), Decimal('2.88'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2245, '01fae8334273099d90589ae47454e476', 213000000000000, datetime.datetime(2020, 6, 21, 23, 57), Decimal('6.63'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2246, 'c03e77ab1072caaf1cd414cc7e148d55', 4380000000000000, datetime.datetime(2020, 6, 21, 23, 57), Decimal('4.12'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2247, '175a1722ccf1cec706fd2b16d6e439ba', 213000000000000, datetime.datetime(2020, 6, 22, 6, 0), Decimal('3.97'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2248, 'b7161ea83c24c750469173e7cd8a162a', 213000000000000, datetime.datetime(2020, 6, 22, 6, 7), Decimal('2.55'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2249, '7259ab5907cab36eb38d280b4b91641a', 4540000000000, datetime.datetime(2020, 6, 22, 6, 8), Decimal('520.22'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2250, 'de9965e567059cae98540898f5ce0f05', 3590000000000000, datetime.datetime(2020, 6, 22, 6, 14), Decimal('2.09'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2251, '6173d3910f0b3f1a02437eb9f34a127d', 4280000000000, datetime.datetime(2020, 6, 22, 6, 15), Decimal('12.97'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2252, '8853477181b5c821d95e4b93613448d0', 3560000000000000, datetime.datetime(2020, 6, 22, 6, 16), Decimal('8.80'), 'fraud_Durgan-Auer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2253, 'd3c143b57976c0184dc97160d6550f70', 3500000000000000, datetime.datetime(2020, 6, 22, 6, 20), Decimal('9.27'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2254, 'f0f1dc29733c72cef68ed32281573a26', 376000000000000, datetime.datetime(2020, 6, 22, 6, 21), Decimal('43.76'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2255, '65e727dd1c723403f566b2c53953c184', 4160000000000000, datetime.datetime(2020, 6, 22, 6, 21), Decimal('6.75'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2256, '320311412461ce6241537b05add5e768', 3560000000000000, datetime.datetime(2020, 6, 22, 6, 22), Decimal('9.94'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2257, 'f54a13e0b395a4068eb1122158995635', 30300000000000, datetime.datetime(2020, 6, 22, 6, 24), Decimal('150.25'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2258, 'a831f8f00e6767ddbaf5783c380bf4d2', 3570000000000000, datetime.datetime(2020, 6, 22, 6, 26), Decimal('2.34'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2259, 'd0a5e2e562a415adf168a84d4984914d', 180000000000000, datetime.datetime(2020, 6, 22, 6, 27), Decimal('1.94'), 'fraud_Welch Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2260, '0ef42ab738b1c4a36b87a8e4fdaf5f00', 4120000000000000, datetime.datetime(2020, 6, 22, 6, 30), Decimal('2.01'), 'fraud_Kerluke Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2261, '9aae50ff562ea6ff7a0578017d9e3c88', 3520000000000000, datetime.datetime(2020, 6, 22, 6, 30), Decimal('1.80'), 'fraud_Kris-Weimann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2262, '29c3e99c074d3958a279139d3f33f0e2', 5560000000000000, datetime.datetime(2020, 6, 22, 6, 39), Decimal('1.37'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2263, '0fe3f787b2db37bc5f620e41324accce', 6530000000000000, datetime.datetime(2020, 6, 22, 6, 41), Decimal('4.02'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2264, 'daf5d554cbd81be5cacb1a14b3051148', 180000000000000, datetime.datetime(2020, 6, 22, 6, 42), Decimal('109.18'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2265, '3c0d3019da3557623cb5d486fcb71905', 342000000000000, datetime.datetime(2020, 6, 22, 6, 46), Decimal('119.49'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2266, '3f9066e5cc26f7a442ef08f2657c2deb', 2250000000000000, datetime.datetime(2020, 6, 22, 6, 47), Decimal('10.11'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2267, '95922f337ddeebd03e4ef019b16b87a3', 180000000000000, datetime.datetime(2020, 6, 22, 6, 51), Decimal('426.68'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2268, 'def77da65cacf48ffb4105f63a1b8e13', 3590000000000000, datetime.datetime(2020, 6, 22, 6, 52), Decimal('320.13'), 'fraud_McGlynn-Heathcote', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2269, '49cb8d8a7f696dccd89aa6f562c2a9f7', 343000000000000, datetime.datetime(2020, 6, 22, 6, 53), Decimal('21.11'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2270, '689cc8569e63dbe57ecdceb2ab3f815c', 213000000000000, datetime.datetime(2020, 6, 22, 6, 54), Decimal('58.54'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2271, 'd350dc8804c47de965bd535a6dfa0ea5', 6520000000000000, datetime.datetime(2020, 6, 22, 6, 57), Decimal('8.03'), 'fraud_Ruecker Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2272, 'fd64f6d342a039d6fb8e8b694dcc9d95', 4170000000000, datetime.datetime(2020, 6, 22, 6, 59), Decimal('18.09'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2273, '6120bfeb738158f5f435d60ac4386c0f', 4670000000000000, datetime.datetime(2020, 6, 22, 7, 3), Decimal('33.94'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2274, '1e8315f379a0f3fae179d7fb36532127', 4290000000000, datetime.datetime(2020, 6, 22, 7, 4), Decimal('7.82'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2275, '3dba48008750acccc1e5a07a755b08cc', 4030000000000000, datetime.datetime(2020, 6, 22, 7, 4), Decimal('2.26'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2276, '0b9686230fda04b65a2a7c0da91b99ba', 4080000000000, datetime.datetime(2020, 6, 22, 7, 8), Decimal('9.66'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2277, 'd0e9d487a770f9ded3fe55824c1a3479', 4160000000000000, datetime.datetime(2020, 6, 22, 7, 10), Decimal('3.45'), 'fraud_Kris-Weimann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2278, 'c3083bf51ebaf68fd163fe6fe309c38c', 3530000000000000, datetime.datetime(2020, 6, 22, 7, 11), Decimal('35.96'), 'fraud_Flatley-Durgan', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2279, 'c749b1c234175cbbfc7ea9f1d62853b9', 30500000000000, datetime.datetime(2020, 6, 22, 7, 13), Decimal('17.05'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2280, '46087b983bb0819b24459b16515e9b66', 2360000000000000, datetime.datetime(2020, 6, 22, 7, 13), Decimal('3.62'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2281, 'eb81b9362337af2c0848398dcc6c79f4', 4290000000000, datetime.datetime(2020, 6, 22, 7, 14), Decimal('14.45'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2282, '5b0899dfffe4d6de926739beba5f416f', 38200000000000, datetime.datetime(2020, 6, 22, 7, 14), Decimal('85.53'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2283, 'da470830fb247499b377dccd70d11b82', 6600000000000000, datetime.datetime(2020, 6, 22, 7, 17), Decimal('1.49'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2284, 'f386629ddf3ccfc669280b1435c5ffce', 4290000000000000000, datetime.datetime(2020, 6, 22, 7, 18), Decimal('2.97'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2285, '414b568d0677dd2c73f5c81b1de6df51', 3570000000000000, datetime.datetime(2020, 6, 22, 7, 22), Decimal('1.36'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2286, '6396ece8eef16b613c91557a46f9dc33', 38200000000000, datetime.datetime(2020, 6, 22, 7, 24), Decimal('99.40'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2287, '774c231a72898bfc3eeb126968817831', 36900000000000, datetime.datetime(2020, 6, 22, 7, 25), Decimal('14.38'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2288, '58f496393df9d8f0d78d5bba78e1dc81', 6010000000000000, datetime.datetime(2020, 6, 22, 7, 26), Decimal('143.99'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2289, '1b11c7c701713cf8d159a22cc6950feb', 4170000000000000, datetime.datetime(2020, 6, 22, 7, 27), Decimal('1.81'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2290, '7792f7618779145802b01a2de89fcb8d', 377000000000000, datetime.datetime(2020, 6, 22, 7, 27), Decimal('9.46'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2291, 'c2fd92041e09712f07343c11ece35e9c', 4400000000000, datetime.datetime(2020, 6, 22, 7, 29), Decimal('94.31'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2292, '1c09163598fa238570507930d7140ad6', 4470000000000000, datetime.datetime(2020, 6, 22, 7, 31), Decimal('2.34'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2293, '1ba4c405cf7f615087a7ac929dae16e0', 572000000000, datetime.datetime(2020, 6, 22, 7, 31), Decimal('2.20'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2294, 'ffd6d0012990c75f4f01d4fcad349e75', 3560000000000000, datetime.datetime(2020, 6, 22, 7, 34), Decimal('81.08'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2295, '9947b417a077fd4b9be6e1281a00af8b', 5100000000000000, datetime.datetime(2020, 6, 22, 7, 36), Decimal('97.13'), 'fraud_Zemlak Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2296, 'ed0497d32f69c9635e9d68ca85e7cf73', 4780000000000000, datetime.datetime(2020, 6, 22, 7, 44), Decimal('91.80'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2297, '59dc090234586e3c4b9fd296d6c5aded', 639000000000, datetime.datetime(2020, 6, 22, 7, 46), Decimal('1.36'), 'fraud_Bednar Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2298, '11b8c6da3d2c9ec24a28792d2338596d', 561000000000, datetime.datetime(2020, 6, 22, 7, 46), Decimal('1.47'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2299, '95d1a559d19b8dd429253df6987a28a3', 344000000000000, datetime.datetime(2020, 6, 22, 7, 48), Decimal('10.95'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2300, 'b1f31bf2355fa9e77d885a53b3f07370', 3590000000000000, datetime.datetime(2020, 6, 22, 7, 49), Decimal('107.73'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2301, '80c0740c62d724b6976731f43d7c3ed9', 3560000000000000, datetime.datetime(2020, 6, 22, 7, 51), Decimal('3.15'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2302, 'bd6d513f82a2faa6d4bc9b28247ff3f8', 4660000000000, datetime.datetime(2020, 6, 22, 7, 51), Decimal('8.25'), 'fraud_Durgan-Auer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2303, 'c7774131311ee11903e9e315fefa6a6a', 4920000000000000, datetime.datetime(2020, 6, 22, 7, 52), Decimal('3.04'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2304, 'a2b583e5ec6ed861fc21a9b753ab9772', 4130000000000000000, datetime.datetime(2020, 6, 22, 7, 53), Decimal('8.17'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2305, '66bde8a7fbdcd9f6d49c8eeb3324266a', 4470000000000000, datetime.datetime(2020, 6, 22, 7, 53), Decimal('2.46'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2306, '0e8b610ddbed44a2b5ea9955f9735844', 639000000000, datetime.datetime(2020, 6, 22, 7, 56), Decimal('3.70'), 'fraud_Mosciski, Ziemann and Farrell', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2307, 'eafffa564ccac566069d80562cda2f47', 6010000000000000, datetime.datetime(2020, 6, 22, 7, 57), Decimal('56.85'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2308, '520b66f18f50aab68aef9c94cd698559', 3570000000000000, datetime.datetime(2020, 6, 22, 7, 57), Decimal('2.41'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2309, '030a7af75fea9259ca4af6522dfee380', 6600000000000000, datetime.datetime(2020, 6, 22, 8, 1), Decimal('7.40'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2310, '2f3a47cc068e88ed9a805807ccd18462', 38600000000000, datetime.datetime(2020, 6, 22, 8, 1), Decimal('4.23'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2311, '7e22f3815bd2f91a6d10f84975058f16', 4070000000000000, datetime.datetime(2020, 6, 22, 8, 5), Decimal('6.54'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2312, '78324b21159cd55289908e1b6083653b', 3590000000000000, datetime.datetime(2020, 6, 22, 8, 6), Decimal('108.11'), 'fraud_Zemlak Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2313, 'f5ff4d4585c1e3bdd21c32f8ecfeb4a1', 342000000000000, datetime.datetime(2020, 6, 22, 8, 7), Decimal('103.31'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2314, 'b8f9e1c15cb38534670b333103b66050', 4990000000000, datetime.datetime(2020, 6, 22, 8, 8), Decimal('1.25'), 'fraud_Ferry, Lynch and Kautzer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2315, '614d8c22740bc81f163ee024e878a2a6', 213000000000000, datetime.datetime(2020, 6, 22, 8, 11), Decimal('3.36'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2316, '1e3e9a2b79f4a43a0bd41f2daf97991d', 4590000000000, datetime.datetime(2020, 6, 22, 8, 15), Decimal('4.54'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2317, '3e8d76827bef650a84a7334057ee2fbb', 4620000000000, datetime.datetime(2020, 6, 22, 8, 17), Decimal('6.13'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2318, 'c473a1f44e9d225652459c19c226d669', 630000000000, datetime.datetime(2020, 6, 22, 8, 18), Decimal('5.21'), 'fraud_Donnelly PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2319, 'f395fc05edb7d69f37dec91f0cd7185d', 4370000000000000, datetime.datetime(2020, 6, 22, 8, 20), Decimal('97.81'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2320, '4c42615b70075b959d562b85b5f5cee6', 4470000000000000000, datetime.datetime(2020, 6, 22, 8, 25), Decimal('9.45'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2321, '615a64999104c3cfdb20cb87154dab04', 3550000000000000, datetime.datetime(2020, 6, 22, 8, 25), Decimal('7.80'), 'fraud_Bednar Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2322, '186951e3ccd37773195343be80c81b14', 3530000000000000, datetime.datetime(2020, 6, 22, 8, 26), Decimal('138.71'), 'fraud_Ruecker Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2323, '4f639ac7924a5bcd6081814ed733e650', 6520000000000000, datetime.datetime(2020, 6, 22, 8, 30), Decimal('36.03'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2324, '17957b882bd820d614dbf28aa2db4f00', 180000000000000, datetime.datetime(2020, 6, 22, 8, 33), Decimal('2.88'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2325, '0db82426220d53582f05d110769a2ad2', 4230000000000000, datetime.datetime(2020, 6, 22, 8, 33), Decimal('230.86'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2326, 'b8e4fa3a5e219460ab1334714a421774', 4220000000000000000, datetime.datetime(2020, 6, 22, 8, 38), Decimal('99.63'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2327, 'b4fcc34b16584446c871e49d6f691e4e', 213000000000000, datetime.datetime(2020, 6, 22, 8, 39), Decimal('4.39'), 'fraud_Lehner, Mosciski and King', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2328, '1fa1951cdf55205b31d898561fdaa261', 4280000000000000, datetime.datetime(2020, 6, 22, 8, 40), Decimal('32.85'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2329, '45ff639fd4155449ef95343231486b82', 2270000000000000, datetime.datetime(2020, 6, 22, 8, 41), Decimal('2.93'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2330, '2521f8af2bb79c5828442f92432b70fb', 213000000000000, datetime.datetime(2020, 6, 22, 8, 41), Decimal('95.09'), 'fraud_Lebsack and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2331, '9816b63f3f90db8ba581b652ff9057c7', 4540000000000000000, datetime.datetime(2020, 6, 22, 8, 45), Decimal('135.58'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2332, 'cc761a521fcbac21f6aa3383fe7f7d76', 4640000000000, datetime.datetime(2020, 6, 22, 8, 48), Decimal('4.35'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2333, '651911610e9ccd035a6730ad1bf34180', 2230000000000000, datetime.datetime(2020, 6, 22, 8, 48), Decimal('6.25'), 'fraud_Stehr, Jewess and Schimmel', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2334, '246b8b16ae4c738318f0554b3fca74e6', 3530000000000000, datetime.datetime(2020, 6, 22, 8, 49), Decimal('12.07'), 'fraud_Kerluke Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2335, '3a6ced4754d03e3f27e8481e51bdacd0', 213000000000000, datetime.datetime(2020, 6, 22, 8, 53), Decimal('3.06'), 'fraud_Block-Parisian', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2336, '1bbed9bcb5abc1e9dfcb5547f0de57d2', 4040000000000000000, datetime.datetime(2020, 6, 22, 8, 54), Decimal('37.07'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2337, '8f8c43598ea1e1d6757bbf123c696446', 6010000000000000, datetime.datetime(2020, 6, 22, 8, 55), Decimal('272.77'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2338, '5d489b83c5858f8ba54280281ce2a39c', 4320000000000000000, datetime.datetime(2020, 6, 22, 8, 56), Decimal('8.61'), 'fraud_Brown PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2339, '89074edd7a14bb553ff7a13e5b6ecec3', 2230000000000000, datetime.datetime(2020, 6, 22, 8, 58), Decimal('1.19'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2340, '20098795f5f4296562adade1a5ab7a63', 4610000000000, datetime.datetime(2020, 6, 22, 9, 2), Decimal('81.32'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2341, 'aea59620c87e32f0e446fcfcf28077d7', 6010000000000000, datetime.datetime(2020, 6, 22, 9, 2), Decimal('45.53'), 'fraud_Koelpin and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2342, '7e9ab67dfe2ecee47fd6ef86f429949d', 6520000000000000, datetime.datetime(2020, 6, 22, 9, 3), Decimal('11.58'), 'fraud_Koelpin and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2343, '506f36ecdf2d5c4ab74c4b1094a9982e', 30500000000000, datetime.datetime(2020, 6, 22, 9, 5), Decimal('4.17'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2344, 'de239d13c87dd29794623ea2d558a8a7', 38600000000000, datetime.datetime(2020, 6, 22, 9, 9), Decimal('2.54'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2345, '898103a034473242c29c1f9ccb6c02f2', 2230000000000000, datetime.datetime(2020, 6, 22, 9, 11), Decimal('5.79'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2346, 'f5846e4762583131f00357dd9d1199a4', 3540000000000000, datetime.datetime(2020, 6, 22, 9, 15), Decimal('5.12'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2347, 'ebe7dcd7fdbc67cc792b34970614b681', 30600000000000, datetime.datetime(2020, 6, 22, 9, 15), Decimal('27.73'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2348, 'b9bf2f20638467d60b319018b50e5772', 585000000000, datetime.datetime(2020, 6, 22, 9, 17), Decimal('302.52'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2349, 'a66036a0bdedd1643b6af34db596e20c', 30000000000000, datetime.datetime(2020, 6, 22, 9, 19), Decimal('108.58'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2350, 'cd675e3a5535382fe674c6cdd94aec06', 502000000000, datetime.datetime(2020, 6, 22, 9, 20), Decimal('11.43'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2351, '831931c07abaacb257205eaec43ff900', 6010000000000000, datetime.datetime(2020, 6, 22, 9, 21), Decimal('96.44'), 'fraud_Tillman, Fritsch and Schmitt', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2352, '24b8f152361d3fc7e61d747ffb461f27', 3590000000000000, datetime.datetime(2020, 6, 22, 9, 25), Decimal('15.24'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2353, 'aab65fd14d33408ff63ef27d7d25ddb4', 180000000000000, datetime.datetime(2020, 6, 22, 9, 30), Decimal('8.78'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2354, 'da229e926bad5ab12c620932422bc3b4', 213000000000000, datetime.datetime(2020, 6, 22, 9, 30), Decimal('28.80'), 'fraud_Kunde-Sanford', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2355, '7d87c025fbf92a293b29d5fcf49a753b', 6600000000000000, datetime.datetime(2020, 6, 22, 9, 35), Decimal('3.93'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2356, '8d2c32ee47ea5ad55d59278d1b9cf457', 6010000000000000, datetime.datetime(2020, 6, 22, 9, 35), Decimal('7.15'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2357, '0c7f907b148f2626d644f667e6c7637b', 4740000000000000000, datetime.datetime(2020, 6, 22, 9, 37), Decimal('11.32'), 'fraud_Kunde-Sanford', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2358, '8858ea03e21f240c9a1886c1e950add2', 4360000000000000000, datetime.datetime(2020, 6, 22, 9, 37), Decimal('5.25'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2359, '6aaf1d7906dbc02e8bf31baf7b5874a8', 6010000000000000, datetime.datetime(2020, 6, 22, 9, 39), Decimal('56.61'), 'fraud_Kris-Weimann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2360, '94ccb8890ae8340569929151d3f42861', 4310000000000000000, datetime.datetime(2020, 6, 22, 9, 43), Decimal('10.78'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2361, '5b2f47fe7364780988043a00adf06a6b', 213000000000000, datetime.datetime(2020, 6, 22, 9, 47), Decimal('5.69'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2362, '67872a8ac748f78b9dd3e0c80df2ede2', 3530000000000000, datetime.datetime(2020, 6, 22, 9, 49), Decimal('105.93'), 'fraud_Bogisich-Homenick', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2363, 'f4d9765ca9d50910c4635788cca6cce6', 3540000000000000, datetime.datetime(2020, 6, 22, 9, 50), Decimal('5.03'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2364, 'd32b5577effee77f07727c38cd2be041', 6010000000000000, datetime.datetime(2020, 6, 22, 9, 53), Decimal('45.63'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2365, '5f49b231e66551e4f813852969f27f6c', 3530000000000000, datetime.datetime(2020, 6, 22, 9, 57), Decimal('216.04'), 'fraud_Miller-Harris', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2366, '6469185e811e242d926dbae6104ca9cc', 3540000000000000, datetime.datetime(2020, 6, 22, 9, 59), Decimal('101.98'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2367, 'b144f95bcf60a045b014bfbfe50b3a3a', 4960000000000000, datetime.datetime(2020, 6, 22, 10, 0), Decimal('1235.60'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2368, '443a24feb1dd377404e66075e818167d', 4300000000000000000, datetime.datetime(2020, 6, 22, 10, 0), Decimal('99.85'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2369, '1f5fe3d7efb0504652ccab036b8a58d5', 30100000000000, datetime.datetime(2020, 6, 22, 10, 1), Decimal('1085.92'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2370, '7407e5ea5d269e5682710d05e259ddde', 4420000000000000, datetime.datetime(2020, 6, 22, 10, 4), Decimal('7.92'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2371, 'b4a029bf79eb0aadbce4b7ea5effd05b', 574000000000, datetime.datetime(2020, 6, 22, 10, 6), Decimal('7.71'), 'fraud_Kuhn LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2372, 'db59af4453503bb8c08e150b2ce1ab09', 180000000000000, datetime.datetime(2020, 6, 22, 10, 13), Decimal('98.52'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2373, 'b8b4aeeaaa1e5d0594a6c8ebc5c35bed', 372000000000000, datetime.datetime(2020, 6, 22, 10, 20), Decimal('4.69'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2374, '77c6f8c712bea6610a9856175f680f14', 180000000000000, datetime.datetime(2020, 6, 22, 10, 20), Decimal('4.22'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2375, '967d6aaf33989cd863d101936814c0e7', 676000000000, datetime.datetime(2020, 6, 22, 10, 21), Decimal('4.34'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2376, '6f7e342f8b32b8abf22c64d036559cfa', 4260000000000, datetime.datetime(2020, 6, 22, 10, 29), Decimal('2.86'), 'fraud_Huel Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2377, '564d4bb96980e05dd8092dcc50376014', 2240000000000000, datetime.datetime(2020, 6, 22, 10, 32), Decimal('8.37'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2378, '8a4fe6240b5a80edace5d4486a1a3aeb', 375000000000000, datetime.datetime(2020, 6, 22, 10, 35), Decimal('83.07'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2379, 'f3fb4bdd7907201428cfc35b01f2cf4f', 213000000000000, datetime.datetime(2020, 6, 22, 10, 38), Decimal('354.52'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2380, 'e3dd53edc21e9a865b909eb8f66928c6', 30200000000000, datetime.datetime(2020, 6, 22, 10, 39), Decimal('74.56'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2381, 'cae879b12273c799de203640d4f20016', 180000000000000, datetime.datetime(2020, 6, 22, 10, 40), Decimal('160.17'), 'fraud_Brown PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2382, 'fdd6ceb2ea31a8d09f38527be3f17248', 30200000000000, datetime.datetime(2020, 6, 22, 10, 41), Decimal('2.87'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2383, '43220a08c195b0e183525bb60d3db678', 3530000000000000, datetime.datetime(2020, 6, 22, 10, 48), Decimal('100.49'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2384, 'c30a90c28c297fd4edeab8f7e9dc16f2', 3530000000000000, datetime.datetime(2020, 6, 22, 10, 50), Decimal('74.53'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2385, 'd48d752a99c0128c298230493526ee2b', 4150000000000, datetime.datetime(2020, 6, 22, 10, 53), Decimal('9.13'), 'fraud_Koelpin and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2386, '90c558cd8549097f867dcf7b25c1d00d', 4600000000000000000, datetime.datetime(2020, 6, 22, 10, 58), Decimal('796.31'), 'fraud_Rippin, Kub and Mann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2387, 'e4f60ed9c233447dc5ae6be2f20eabb4', 378000000000000, datetime.datetime(2020, 6, 22, 11, 0), Decimal('47.36'), 'fraud_Donnelly PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2388, '88b37112647184408602b62767f553b5', 4410000000000000000, datetime.datetime(2020, 6, 22, 11, 9), Decimal('2.34'), 'fraud_Kuphal-Predovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2389, '641185de4b13e2751093d4687484167b', 4360000000000000000, datetime.datetime(2020, 6, 22, 11, 16), Decimal('3.65'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2390, 'cddbaaaa89c3f8d48d27c002380d24ae', 30300000000000, datetime.datetime(2020, 6, 22, 11, 19), Decimal('8.09'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2391, 'e6a257cafa7d3db961fd7302353f43bc', 3600000000000000, datetime.datetime(2020, 6, 22, 11, 19), Decimal('634.57'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2392, 'fab1b102dce7e5789d6c89fc98d54182', 4380000000000000000, datetime.datetime(2020, 6, 22, 11, 20), Decimal('10.74'), 'fraud_Lehner, Mosciski and King', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2393, '19b8768a5498123aa61afb332380e6ba', 4240000000000000, datetime.datetime(2020, 6, 22, 11, 21), Decimal('20.05'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2394, 'd973dabaafcad08a330458182ded8173', 4900000000000, datetime.datetime(2020, 6, 22, 11, 23), Decimal('1.94'), 'fraud_Nader-Heller', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2395, 'd3b2b5520d3a4930fa61cf79d0fd195c', 2260000000000000, datetime.datetime(2020, 6, 22, 11, 24), Decimal('2.83'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2396, '8a7a4755625c648d21f6656e140bfaa2', 2360000000000000, datetime.datetime(2020, 6, 22, 11, 25), Decimal('2.91'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2397, '7d8a5aabe38282106e72e6fa4dc7ce40', 4500000000000000000, datetime.datetime(2020, 6, 22, 11, 27), Decimal('2.03'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2398, 'ae65de2fae884661e1b1a6bcddf319f5', 4500000000000000000, datetime.datetime(2020, 6, 22, 11, 29), Decimal('95.05'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2399, '293879583760a24a8e348c5632787596', 6010000000000000, datetime.datetime(2020, 6, 22, 11, 36), Decimal('8.73'), 'fraud_Kerluke Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2400, '0873071afaa280f8ba1578c88247b432', 639000000000, datetime.datetime(2020, 6, 22, 11, 37), Decimal('47.50'), 'fraud_Rippin, Kub and Mann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2401, 'f3213e80c776da7a2c74756a5524eb2f', 3580000000000000, datetime.datetime(2020, 6, 22, 11, 40), Decimal('6.01'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2402, '8928811279dfb5047ac2a0f5f05748c5', 30500000000000, datetime.datetime(2020, 6, 22, 11, 42), Decimal('9.78'), 'fraud_Tillman, Fritsch and Schmitt', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2403, 'e5bb36eaffd4a4f0eee86b84d3436e81', 180000000000000, datetime.datetime(2020, 6, 22, 11, 43), Decimal('8.35'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2404, '6f0d92f4f3a726098cc7b7fa97776946', 676000000000, datetime.datetime(2020, 6, 22, 11, 45), Decimal('293.40'), 'fraud_Welch Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2405, '9ca87d29b452b2493015820c4318b37f', 3590000000000000, datetime.datetime(2020, 6, 22, 11, 47), Decimal('79.72'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2406, '97487bd08310399b7652309f76c5734e', 6010000000000000, datetime.datetime(2020, 6, 22, 11, 48), Decimal('8.58'), 'fraud_Ferry, Lynch and Kautzer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2407, '2cce6f7f459e0c0a62815aca27873eb0', 4330000000000000, datetime.datetime(2020, 6, 22, 11, 50), Decimal('7.97'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2408, '1fae5b88bc4d9d7a4fa367e1a1233da2', 341000000000000, datetime.datetime(2020, 6, 22, 11, 51), Decimal('563.67'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2409, '7e6bc96ca49269b39eb4bb7f82c2e636', 213000000000000, datetime.datetime(2020, 6, 22, 11, 55), Decimal('9.59'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2410, '0fe3e17c33066ba80dcdbe87ac5b6807', 30300000000000, datetime.datetime(2020, 6, 22, 12, 5), Decimal('75.29'), 'fraud_McGlynn-Heathcote', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2411, 'bbf0d801bfb3a3f274191c1fdaf142e7', 630000000000, datetime.datetime(2020, 6, 22, 12, 12), Decimal('7.08'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2412, '4cfbdf538531f6b724af7606a88e860a', 6540000000000000, datetime.datetime(2020, 6, 22, 12, 14), Decimal('83.02'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2413, '4b1fd51d4ffe519f52c285a5fd43e8dd', 4260000000000, datetime.datetime(2020, 6, 22, 12, 16), Decimal('98.42'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2414, 'c9a135f021ad912510e360f8485fc8d1', 2250000000000000, datetime.datetime(2020, 6, 22, 12, 24), Decimal('8.17'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2415, '7e4302987e8c763a9abe668fb6d3d7b0', 3600000000000000, datetime.datetime(2020, 6, 22, 12, 25), Decimal('1.10'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2416, 'b36fddcd00ea8efa202e14ae36299ddf', 6010000000000000, datetime.datetime(2020, 6, 22, 12, 30), Decimal('1.48'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2417, '04723f9891bb196b7094ae281be54f6a', 4560000000000000000, datetime.datetime(2020, 6, 22, 12, 38), Decimal('125.93'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2418, 'cfa0a92850fbdad6acfd0d4e00aaf65e', 568000000000, datetime.datetime(2020, 6, 22, 12, 45), Decimal('5.58'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2419, 'cfbdfbf569c6574ea08aa5edd4d984c4', 3520000000000000, datetime.datetime(2020, 6, 22, 12, 48), Decimal('22.28'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2420, '0f1c7c3ad07790d8f52cdae7b2994487', 180000000000000, datetime.datetime(2020, 6, 22, 12, 49), Decimal('6.28'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2421, '33d6306d162f1ad7eef2fc0e5d1e54ba', 4750000000000, datetime.datetime(2020, 6, 22, 12, 50), Decimal('96.64'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2422, '7ec4e1a1d5d9e747e95be8b2db2b3830', 4720000000000000, datetime.datetime(2020, 6, 22, 12, 51), Decimal('1.90'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2423, '353b70a33a06722198186e7df3884dbc', 30300000000000, datetime.datetime(2020, 6, 22, 12, 54), Decimal('83.24'), 'fraud_Tillman, Fritsch and Schmitt', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2424, 'c209a1fa2694f6960fb877a27c228f8e', 3590000000000000, datetime.datetime(2020, 6, 22, 12, 56), Decimal('144.59'), 'fraud_Zemlak Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2425, '9985746dc259a52e45607bfaa35fd870', 373000000000000, datetime.datetime(2020, 6, 22, 12, 59), Decimal('1.23'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2426, '6b4b3f50991ab2061563721c1132efc9', 2290000000000000, datetime.datetime(2020, 6, 22, 13, 6), Decimal('40.41'), 'fraud_Lehner, Mosciski and King', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2427, 'd73021fc544d51208dfab4bfac34b79c', 6010000000000000, datetime.datetime(2020, 6, 22, 13, 9), Decimal('9.66'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2428, 'aca5aad58e8e5e329f12a059cdce8b5d', 2700000000000000, datetime.datetime(2020, 6, 22, 13, 9), Decimal('7.87'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2429, '68c3a1f8098c506fbd7bc080d8a7c527', 3500000000000000, datetime.datetime(2020, 6, 22, 13, 11), Decimal('75.55'), 'fraud_Welch Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2430, '271753076ee3161f8be7b9866b2b774c', 30300000000000, datetime.datetime(2020, 6, 22, 13, 13), Decimal('7.00'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2431, '5e00592497439c3bab1a3f16cde796b9', 2300000000000000, datetime.datetime(2020, 6, 22, 13, 15), Decimal('5.76'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2432, 'cd9d359519d7c1bce0918bf5117bec61', 630000000000, datetime.datetime(2020, 6, 22, 13, 22), Decimal('2.71'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2433, '766862bc6d260e92fc900507eccf83ff', 4070000000000000, datetime.datetime(2020, 6, 22, 13, 27), Decimal('2.68'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2434, 'e3ba43ce124303ff714da6992f57fe8e', 3600000000000000, datetime.datetime(2020, 6, 22, 13, 29), Decimal('7.99'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2435, 'a902be346b15b9fe7152e7d3afe2ce7e', 4900000000000000, datetime.datetime(2020, 6, 22, 13, 41), Decimal('4.39'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2436, '260ec0f4af4cf7821259d34a8eb23207', 4200000000000, datetime.datetime(2020, 6, 22, 13, 47), Decimal('5.20'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2437, '8014edced273bae442d28c6ae2b2cefa', 4510000000000000, datetime.datetime(2020, 6, 22, 13, 54), Decimal('26.09'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2438, '5448147977cf24521ca10d7d72147b62', 213000000000000, datetime.datetime(2020, 6, 22, 14, 0), Decimal('129.78'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2439, '37ed37e1f5b310d55bd3a1b3b485fae9', 38500000000000, datetime.datetime(2020, 6, 22, 14, 2), Decimal('2.02'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2440, '64682f745a8ebaa49a685a99800ee5fb', 4590000000000000, datetime.datetime(2020, 6, 22, 14, 4), Decimal('68.03'), 'fraud_Ferry, Lynch and Kautzer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2441, 'c9ef65c37deb0821a9af9079ec0b56ff', 3600000000000000, datetime.datetime(2020, 6, 22, 14, 6), Decimal('8.19'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2442, '13a6748dd8f6060ccbf3f192efe81d14', 3530000000000000, datetime.datetime(2020, 6, 22, 14, 7), Decimal('3.50'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2443, '340432e76a5e0f1a99ba158a8394d9b3', 30200000000000, datetime.datetime(2020, 6, 22, 14, 8), Decimal('5.35'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2444, '98b099cb042d36e6e0b76a0285c30bcf', 4900000000000000, datetime.datetime(2020, 6, 22, 14, 17), Decimal('9.81'), 'fraud_Block-Parisian', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2445, 'a4397f225ecaa21a524a47b91f077d96', 4650000000000000, datetime.datetime(2020, 6, 22, 14, 17), Decimal('3.37'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2446, '12127e2bedadac7704b594f921debe26', 4840000000000000, datetime.datetime(2020, 6, 22, 14, 26), Decimal('3.27'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2447, '4c484c7f025f9674ad5e13f04653fcac', 371000000000000, datetime.datetime(2020, 6, 22, 14, 27), Decimal('8.40'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2448, '3de03ddcd34eef0815ba999b5b1d2102', 3510000000000000, datetime.datetime(2020, 6, 22, 14, 27), Decimal('8.21'), 'fraud_Kris-Weimann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2449, 'ce8b33f5874d4e01a909b980d164cb51', 342000000000000, datetime.datetime(2020, 6, 22, 14, 32), Decimal('38.51'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2450, 'c4490d3eb729dea36e7d9658fbe4cb3b', 3500000000000000, datetime.datetime(2020, 6, 22, 14, 35), Decimal('9.80'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2451, '7e78e8042544eb7b526478013bcf9d8c', 371000000000000, datetime.datetime(2020, 6, 22, 14, 37), Decimal('5.25'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2452, '4e5a4843f7cdb4278a9e6f177f358293', 676000000000, datetime.datetime(2020, 6, 22, 14, 42), Decimal('8.29'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2453, '6deb3476ebf0577e7764f5d36fc09f89', 578000000000, datetime.datetime(2020, 6, 22, 14, 43), Decimal('110.37'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2454, '66c4387b2c8d7572bd3251906203119c', 4290000000000000000, datetime.datetime(2020, 6, 22, 14, 44), Decimal('269.74'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2455, '6e9f282c86995f7c7fb097061ca951db', 4860000000000000000, datetime.datetime(2020, 6, 22, 14, 44), Decimal('184.56'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2456, '50acc40c8fa88309e90b1276b0537cba', 3570000000000000, datetime.datetime(2020, 6, 22, 14, 44), Decimal('1.94'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2457, '6319452aea4b055c63a22715e67fb7fb', 4630000000000000, datetime.datetime(2020, 6, 22, 14, 49), Decimal('2.63'), 'fraud_Kuphal-Predovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2458, '93a841498d3c1261df38bc59648a8852', 562000000000, datetime.datetime(2020, 6, 22, 14, 51), Decimal('8.98'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2459, '6b1901b4b1c61eb47b1d1db071b91079', 2280000000000000, datetime.datetime(2020, 6, 22, 14, 52), Decimal('8.12'), 'fraud_Durgan-Auer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2460, 'f28b1f0993362ff960f4a0e4f8f7145b', 5100000000000000, datetime.datetime(2020, 6, 22, 14, 56), Decimal('71.87'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2461, '03afea941a11b40103aa765ac2a72da1', 213000000000000, datetime.datetime(2020, 6, 22, 15, 0), Decimal('162.51'), 'fraud_Rippin, Kub and Mann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2462, '9621f29e36354cd538df54aaed422683', 2710000000000000, datetime.datetime(2020, 6, 22, 15, 0), Decimal('19.73'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2463, '635fb853432f848a93efd833a786e240', 30600000000000, datetime.datetime(2020, 6, 22, 15, 0), Decimal('4.29'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2464, '22b4b0141a079f873444a264b9152a8a', 4150000000000, datetime.datetime(2020, 6, 22, 15, 7), Decimal('1.66'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2465, 'c134d2a50804e0e13412a8d8672a80c7', 6010000000000000, datetime.datetime(2020, 6, 22, 15, 10), Decimal('7.79'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2466, '1f03a16f40e3f1f6d9dd7ce72ce6b0ae', 213000000000000, datetime.datetime(2020, 6, 22, 15, 18), Decimal('437.79'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2467, '7a26f3ab707f6164c7b3cfe2d4537417', 6590000000000000, datetime.datetime(2020, 6, 22, 15, 24), Decimal('7.97'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2468, '03d171e4947e9892f4af8d38e15046d8', 4910000000000000000, datetime.datetime(2020, 6, 22, 15, 25), Decimal('7.15'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2469, '2607c3a04481bfbb66e923fc8f91a679', 5000000000000000, datetime.datetime(2020, 6, 22, 15, 29), Decimal('1.60'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2470, '2bad2c9cfae332d0790038168fa63bb3', 3530000000000000, datetime.datetime(2020, 6, 22, 15, 31), Decimal('28.22'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2471, '816bd034ee3ba2c83c72b0b4569a2241', 3580000000000000, datetime.datetime(2020, 6, 22, 15, 34), Decimal('7.08'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2472, 'c49ac13004d146d8741433d0377e4fcc', 4000000000000000, datetime.datetime(2020, 6, 22, 15, 34), Decimal('5.21'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2473, 'c85e5cae500a859971c86811590a121b', 6540000000000000, datetime.datetime(2020, 6, 22, 15, 36), Decimal('4.99'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2474, '2d1f0bcc9b6f1c372a87eabb7badb4a8', 3530000000000000, datetime.datetime(2020, 6, 22, 15, 48), Decimal('8.52'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2475, '01894a15ac990076875a3f72fd86f65d', 2700000000000000, datetime.datetime(2020, 6, 22, 15, 54), Decimal('1447.90'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2476, '77ebe414905ad4d305a726339773244c', 3530000000000000, datetime.datetime(2020, 6, 22, 15, 56), Decimal('4.82'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2477, 'cb98754c6652fcfea509e44f8acd9054', 6010000000000000, datetime.datetime(2020, 6, 22, 15, 56), Decimal('7.09'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2478, 'b468beb46ee3bbebd43e962ecca733d1', 4190000000000000, datetime.datetime(2020, 6, 22, 15, 57), Decimal('1.00'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2479, 'a71cbff91faa3fed76d0235808dc0ad6', 6540000000000000, datetime.datetime(2020, 6, 22, 16, 1), Decimal('80.03'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2480, 'f1681e87fe27ad43b3fc4bbb4a1d1be9', 4720000000000000, datetime.datetime(2020, 6, 22, 16, 2), Decimal('2.49'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2481, '6063be086d1551bf3d8371732d8c62c9', 371000000000000, datetime.datetime(2020, 6, 22, 16, 3), Decimal('553.43'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2482, 'd1b2e965bc7b4e09f7fd1c77fb196c0d', 4450000000000000, datetime.datetime(2020, 6, 22, 16, 11), Decimal('111.57'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2483, '767ac0f7283a639c6f9ba3ca4f036feb', 6540000000000000, datetime.datetime(2020, 6, 22, 16, 14), Decimal('37.59'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2484, '5b5f080a0a440a4c1c916f007dcf96a5', 6540000000000000, datetime.datetime(2020, 6, 22, 16, 15), Decimal('7.52'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2485, '39b3f4e411af2e3c079c9dfd7162de3f', 4480000000000, datetime.datetime(2020, 6, 22, 16, 21), Decimal('4.44'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2486, 'aa6ff6bf56ff83dd76c9e97045314bca', 3530000000000000, datetime.datetime(2020, 6, 22, 16, 22), Decimal('6.24'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2487, '0d84b66b37ba0ffc6032dd14a68091a1', 4590000000000000000, datetime.datetime(2020, 6, 22, 16, 22), Decimal('269.39'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2488, '290ff0a046ed5b3d8fa18f279e7a3aa7', 180000000000000, datetime.datetime(2020, 6, 22, 16, 24), Decimal('3.90'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2489, 'fdb968693953f4b7e7081e2a0e137366', 4290000000000000000, datetime.datetime(2020, 6, 22, 16, 26), Decimal('87.14'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2490, '0a2ca031aaced2e9ad23cc04a4f5278b', 3560000000000000, datetime.datetime(2020, 6, 22, 16, 26), Decimal('87.28'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2491, '207ec34d1c4de473691c0baedfd0f0ff', 3600000000000000, datetime.datetime(2020, 6, 22, 16, 31), Decimal('17.39'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2492, '6fa10726f4788dffe0621e0dc5bfcce2', 3520000000000000, datetime.datetime(2020, 6, 22, 16, 31), Decimal('8.95'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2493, 'ef05eff4fd296579a57cefd60240919b', 4860000000000000000, datetime.datetime(2020, 6, 22, 16, 36), Decimal('3.95'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2494, '9c5be70e6db6b7460f9448fc234ea497', 30300000000000, datetime.datetime(2020, 6, 22, 16, 42), Decimal('159.88'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2495, '26172577eacddfff4553e718d9ae49d3', 676000000000, datetime.datetime(2020, 6, 22, 16, 46), Decimal('7.46'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2496, 'a49092e960f1a192c11f8fbb6a8df764', 6010000000000000, datetime.datetime(2020, 6, 22, 16, 59), Decimal('6.00'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2497, '0f397e2e868e63c224a3214ce25e2f1d', 4460000000000, datetime.datetime(2020, 6, 22, 17, 0), Decimal('6.27'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2498, 'c048d2478ec1b2a5a3e3e9470ee5e7ca', 30000000000000, datetime.datetime(2020, 6, 22, 17, 11), Decimal('6.83'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2499, 'f13b4ae2462212685b6439e2210cbb53', 6010000000000000, datetime.datetime(2020, 6, 22, 17, 12), Decimal('58.85'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2500, '14ecba1792731935a571248921af6cd1', 3580000000000000, datetime.datetime(2020, 6, 22, 17, 13), Decimal('9.87'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2501, '09e2398578ee978b383840d3b56e3bcc', 371000000000000, datetime.datetime(2020, 6, 22, 17, 14), Decimal('116.69'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2502, '3178264dffebfd455779b9a8f2a28ce1', 4100000000000000, datetime.datetime(2020, 6, 22, 17, 16), Decimal('7.10'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2503, '0bc06d07c99746c85b00f3cd35a5be5b', 4800000000000000000, datetime.datetime(2020, 6, 22, 17, 17), Decimal('5.03'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2504, '5ea13bd4f77faca4ef3168552cd1e716', 3520000000000000, datetime.datetime(2020, 6, 22, 17, 18), Decimal('194.09'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2505, 'b6f00e0919757b22d141a00d54536fe0', 2700000000000000, datetime.datetime(2020, 6, 22, 17, 20), Decimal('58.02'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2506, '6f948e779fdd419db90112f6761b05ff', 4640000000000000, datetime.datetime(2020, 6, 22, 17, 22), Decimal('400.46'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2507, 'd0ff6fc439a678894a96e32f33f10591', 4000000000000000, datetime.datetime(2020, 6, 22, 17, 24), Decimal('6.50'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2508, '6dea943581ffe79d54b5c13e6c515454', 4590000000000000, datetime.datetime(2020, 6, 22, 17, 31), Decimal('117.85'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2509, '00eb78fcfe4a37b5e1b48e88231d9a5c', 38500000000000, datetime.datetime(2020, 6, 22, 17, 39), Decimal('6.72'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2510, 'eeed96fc4d1fa49c4669854536ee7c7a', 30300000000000, datetime.datetime(2020, 6, 22, 17, 46), Decimal('58.23'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2511, 'c12964d852e61c45b5f2f3f42b434ed0', 345000000000000, datetime.datetime(2020, 6, 22, 17, 52), Decimal('49.05'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2512, '035e4939d5ff8647e653e59f6177a6c9', 3520000000000000, datetime.datetime(2020, 6, 22, 17, 59), Decimal('4.34'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2513, 'a91ca7e30a0e522d459805661b6d2617', 4090000000000000000, datetime.datetime(2020, 6, 22, 18, 2), Decimal('125.30'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2514, '95859c0e92ff7276a54d7a79ae3fbb33', 180000000000000, datetime.datetime(2020, 6, 22, 18, 8), Decimal('15.32'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2515, '68ed0760a73ea76d3c46e296cfbc8295', 3600000000000000, datetime.datetime(2020, 6, 22, 18, 14), Decimal('123.89'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2516, '422403e27d7d5c8a46fad82ec6d621f4', 4500000000000000000, datetime.datetime(2020, 6, 22, 18, 16), Decimal('559.10'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2517, 'a2dce396aaf3aacc9e01aabf63065f1f', 30000000000000, datetime.datetime(2020, 6, 22, 18, 18), Decimal('1.51'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2518, '5c0e7f9b83e6df45a15bdd17ed6fdf9f', 30300000000000, datetime.datetime(2020, 6, 22, 18, 19), Decimal('23.52'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2519, 'b0d6f91319448ac82fd879b76786bf2a', 4960000000000000000, datetime.datetime(2020, 6, 22, 18, 24), Decimal('5.50'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2520, 'b82c4317bb91fff21d979cee74f04a61', 38100000000000, datetime.datetime(2020, 6, 22, 18, 27), Decimal('417.84'), 'fraud_Ferry, Lynch and Kautzer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2521, '6a14e3dbf5cd5a85c3e47c7b985045e4', 3550000000000000, datetime.datetime(2020, 6, 22, 18, 40), Decimal('6.78'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2522, 'df278773c4234bfa813bccd37e4965cf', 676000000000, datetime.datetime(2020, 6, 22, 18, 47), Decimal('6.08'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2523, '20419920f9c8c57733db1255ca6fa8d4', 30200000000000, datetime.datetime(2020, 6, 22, 18, 52), Decimal('286.31'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2524, 'f1ae3cbfba8e995a916e1cd7ddfa64b1', 578000000000, datetime.datetime(2020, 6, 22, 18, 57), Decimal('7.06'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2525, 'c479b71b1293b761dcd763672f099786', 4380000000000000, datetime.datetime(2020, 6, 22, 19, 5), Decimal('2.57'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2526, '3984bab432dd87ac0d64a9fe1b1726b8', 630000000000, datetime.datetime(2020, 6, 22, 19, 6), Decimal('6.87'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2527, '38a2c4084b6fa056896b5801d041e359', 6010000000000000, datetime.datetime(2020, 6, 22, 19, 7), Decimal('6.32'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2528, '31b1333437ee70ad4326b8e2d04dc06a', 30300000000000, datetime.datetime(2020, 6, 22, 19, 9), Decimal('102.31'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2529, '27257f95d63152d82791df9d3877eb43', 676000000000, datetime.datetime(2020, 6, 22, 19, 10), Decimal('36.52'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2530, '64e891a36ae3d7cac6361ef504370a9b', 3500000000000000, datetime.datetime(2020, 6, 22, 19, 11), Decimal('8.49'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2531, '6d01b20a4173c4afa4913b7741615079', 3520000000000000, datetime.datetime(2020, 6, 22, 19, 11), Decimal('16.64'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2532, 'a1c49100f1bc0ad536c4317da382b2fc', 630000000000, datetime.datetime(2020, 6, 22, 19, 13), Decimal('3.98'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2533, 'a547fcda92cbd095841b57af23cca4bd', 3510000000000000, datetime.datetime(2020, 6, 22, 19, 15), Decimal('2.47'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2534, 'fcf9a2d799300b036123628011cd7976', 6010000000000000, datetime.datetime(2020, 6, 22, 19, 15), Decimal('9.06'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2535, '3246aa5134212eaa6cc5ffc8f0ff445d', 36500000000000, datetime.datetime(2020, 6, 22, 19, 16), Decimal('3.98'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2536, 'e960f9a73c6d908007dfbe5a6e197bb0', 6010000000000000, datetime.datetime(2020, 6, 22, 19, 17), Decimal('6.21'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2537, '09f32c578a9c7b8eec54d108799ddac6', 6540000000000000, datetime.datetime(2020, 6, 22, 19, 20), Decimal('120.77'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2538, '69712818e2490e8d7935d9d935d75563', 3570000000000000, datetime.datetime(2020, 6, 22, 19, 21), Decimal('24.74'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2539, 'a1df0348ab7fcff3c1ee83ee6f48f4b7', 4590000000000000, datetime.datetime(2020, 6, 22, 19, 24), Decimal('4.29'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2540, '95ca1b68e75bf1339bef2f98bf581d3e', 3580000000000000, datetime.datetime(2020, 6, 22, 19, 25), Decimal('2.19'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2541, '8d7cd725a5091c2fa54dee5df54eedd4', 3570000000000000, datetime.datetime(2020, 6, 22, 19, 30), Decimal('49.54'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2542, '46e75f0b14d14cda2c07f5e8f6b12281', 213000000000000, datetime.datetime(2020, 6, 22, 19, 39), Decimal('12.98'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2543, '9002883a3e6bd07f7ab66dbea72120fb', 38100000000000, datetime.datetime(2020, 6, 22, 19, 39), Decimal('5.08'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2544, '18fa74d4a376d2e7b8181e9e5b5a4652', 3530000000000000, datetime.datetime(2020, 6, 22, 19, 40), Decimal('17.53'), 'fraud_Mosciski, Ziemann and Farrell', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2545, 'f096bdedcecdc933b328882344a0ed79', 4560000000000, datetime.datetime(2020, 6, 22, 19, 41), Decimal('4.94'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2546, '8205f1ca7ded4f1f7e7f1a7357a3a856', 4260000000000, datetime.datetime(2020, 6, 22, 19, 41), Decimal('1.13'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2547, '296f40dc7410a43c04d59c13ed3ca78a', 4000000000000000, datetime.datetime(2020, 6, 22, 19, 45), Decimal('3.83'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2548, '865cc4e10bb0d01d6d16008006f24043', 571000000000, datetime.datetime(2020, 6, 22, 19, 46), Decimal('3.06'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2549, '8ae7c8a1e945c29f5230dbbe9e982835', 3570000000000000, datetime.datetime(2020, 6, 22, 19, 49), Decimal('1.67'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2550, '0e5e5a49757d0804c928da89403ad8b3', 571000000000, datetime.datetime(2020, 6, 22, 19, 49), Decimal('1.00'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2551, '2941579141d70dcc1de89d281c25f9d5', 341000000000000, datetime.datetime(2020, 6, 22, 19, 54), Decimal('100.39'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2552, '6fedc3fc4098c62c73fea2a3dff19cd4', 4290000000000000000, datetime.datetime(2020, 6, 22, 19, 56), Decimal('4.53'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2553, '85b92ebde965320668b2f94a40fe254d', 213000000000000, datetime.datetime(2020, 6, 22, 19, 59), Decimal('1.25'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2554, '29edfc2b2046d77151830797f8fd4c4b', 30300000000000, datetime.datetime(2020, 6, 22, 19, 59), Decimal('2.96'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2555, '10e196e8d54a00a3d10b401a81b0f15e', 2720000000000000, datetime.datetime(2020, 6, 22, 20, 0), Decimal('3.01'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2556, 'fe0f4ecc9ea7cfc4e389f6719b4b156b', 4090000000000000000, datetime.datetime(2020, 6, 22, 20, 0), Decimal('3.63'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2557, 'efd0d17bd97d5fee5e17de5ed701d0f5', 4590000000000000000, datetime.datetime(2020, 6, 22, 20, 5), Decimal('100.10'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2558, 'e3567fc7e45c5ddf1bb45ff12f291621', 4900000000000, datetime.datetime(2020, 6, 22, 20, 5), Decimal('3.06'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2559, 'bc4b5b8b1dccd3f4ca2d5fb55500f1e8', 6010000000000000, datetime.datetime(2020, 6, 22, 20, 8), Decimal('68.50'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2560, 'ea5c1087e60e6ffc78811aa4521912a9', 3550000000000000, datetime.datetime(2020, 6, 22, 20, 11), Decimal('8.76'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2561, '56779b2e1c3196f0a5e618fb5d5f5aba', 4510000000000000, datetime.datetime(2020, 6, 22, 20, 25), Decimal('37.86'), 'fraud_Kerluke Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2562, 'fa32fd4c51bb857f110b54b7a241d927', 3580000000000000, datetime.datetime(2020, 6, 22, 20, 30), Decimal('52.17'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2563, '27597b2a4d321c4524c5c5220f1508ea', 4070000000000000, datetime.datetime(2020, 6, 22, 20, 31), Decimal('7.29'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2564, '375e5685df610ffabaa98b5dfb19d8b1', 3600000000000000, datetime.datetime(2020, 6, 22, 20, 33), Decimal('4.77'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2565, '9eb649525298c861d3ebfb591840a124', 180000000000000, datetime.datetime(2020, 6, 22, 20, 38), Decimal('6.26'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2566, '6a2d9f22b3e26652b7d0d315ed14d978', 3570000000000000, datetime.datetime(2020, 6, 22, 20, 42), Decimal('8.46'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2567, '203c191fc555232a5c182eb0ec45b785', 6590000000000000, datetime.datetime(2020, 6, 22, 20, 44), Decimal('31.58'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2568, '510dc7e8d8704bc22e6e0deb5ecc1f63', 3570000000000000, datetime.datetime(2020, 6, 22, 20, 46), Decimal('6.70'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2569, '370e61d9a7ea80932a9e30a37f27e0f9', 4630000000000000, datetime.datetime(2020, 6, 22, 20, 46), Decimal('8.45'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2570, 'd7ce9228f218ba9663e93c66867b48c7', 4490000000000000, datetime.datetime(2020, 6, 22, 20, 46), Decimal('272.47'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2571, 'c8ab0b0c71ef87f35c9d25bb3d7083c5', 3550000000000000, datetime.datetime(2020, 6, 22, 20, 52), Decimal('4.04'), 'fraud_Lehner, Mosciski and King', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2572, 'af00a46f4b8c2e104d1ebd81384e0d2c', 6010000000000000, datetime.datetime(2020, 6, 22, 20, 55), Decimal('9.73'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2573, '2536fff69bba98edda95103903b36474', 4180000000000000, datetime.datetime(2020, 6, 22, 21, 3), Decimal('2.07'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2574, '091cfcb437b977ad0120638e22517f1f', 4380000000000000, datetime.datetime(2020, 6, 22, 21, 6), Decimal('3.18'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2575, '270f65586bd7c8d54535d7b7d70446ea', 6530000000000000, datetime.datetime(2020, 6, 22, 21, 8), Decimal('9.35'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2576, '682bb02eb47a6851822b2a056e277d93', 3590000000000000, datetime.datetime(2020, 6, 22, 21, 9), Decimal('5.48'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2577, '3ec72fa9d89e0cf90f33dd88e47f553f', 60487002085, datetime.datetime(2020, 6, 22, 21, 10), Decimal('3.56'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2578, 'd13480ea47d962cada92ca70cd67e6a6', 38600000000000, datetime.datetime(2020, 6, 22, 21, 11), Decimal('9.74'), 'fraud_Boyer-Reichert', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2579, '4c3feb6a6795326731c7e8ceaa5a0671', 4510000000000000000, datetime.datetime(2020, 6, 22, 21, 15), Decimal('4.43'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2580, '2ba5bd635c92553019c6b18387b102a4', 3560000000000000, datetime.datetime(2020, 6, 22, 21, 16), Decimal('1.16'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2581, 'a5b1b309020046e136e4e77f73eb15c5', 30200000000000, datetime.datetime(2020, 6, 22, 21, 16), Decimal('8.72'), 'fraud_Mosciski, Ziemann and Farrell', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2582, 'c889e18bac3b009c700d0caa989f03ba', 676000000000, datetime.datetime(2020, 6, 22, 21, 17), Decimal('8.25'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2583, '95ba456f956db3a2e2e708374e1bf894', 30200000000000, datetime.datetime(2020, 6, 22, 21, 18), Decimal('8.16'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2584, '37ec054872d9567e3555f596372cb2da', 3550000000000000, datetime.datetime(2020, 6, 22, 21, 18), Decimal('83.52'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2585, '72604cbffdf31558c4edfcee991cec13', 4580000000000000000, datetime.datetime(2020, 6, 22, 21, 20), Decimal('338.96'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2586, '46fe7a07560d2e2e3545a91222b5043e', 3590000000000000, datetime.datetime(2020, 6, 22, 21, 21), Decimal('10.23'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2587, '80c64938c9ad334cd7fa9d34c21d9597', 4590000000000000000, datetime.datetime(2020, 6, 22, 21, 26), Decimal('148.08'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2588, '12b7b2e20dd3a2d768ab82ee624ed165', 4650000000000000, datetime.datetime(2020, 6, 22, 21, 26), Decimal('444.86'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2589, '93d7c358126befaebbafa3338054d5b9', 6510000000000000, datetime.datetime(2020, 6, 22, 21, 30), Decimal('28.25'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2590, 'ef3e7c93c5492d0d8278fc744f92d689', 6010000000000000, datetime.datetime(2020, 6, 22, 21, 32), Decimal('5.10'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2591, '2cfa455cce6ebbae73f4bed1fa9a462f', 4680000000000, datetime.datetime(2020, 6, 22, 21, 33), Decimal('8.39'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2592, '24b5409c84e79cbe9e1fe9254a581d67', 6500000000000000, datetime.datetime(2020, 6, 22, 21, 36), Decimal('1.57'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2593, 'e6fe5b107a9bc5b9099885929fe3eae2', 4790000000000000000, datetime.datetime(2020, 6, 22, 21, 38), Decimal('517.36'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2594, '076c9c94307062395dc2cd6c7c7a2c73', 30400000000000, datetime.datetime(2020, 6, 22, 21, 39), Decimal('8.71'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2595, '7e845b9bd5d570f3d96da54322d07209', 2240000000000000, datetime.datetime(2020, 6, 22, 21, 39), Decimal('181.44'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2596, 'c8f44cfd89f7c09aeda90cd67465ddaf', 571000000000, datetime.datetime(2020, 6, 22, 21, 42), Decimal('1.22'), 'fraud_Kuhn LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2597, '1213805243d4fe8eb6d29b4276390e0a', 4340000000000000, datetime.datetime(2020, 6, 22, 21, 46), Decimal('7.64'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2598, '3ecc9f0bfaed052e7988b5e9e3811f7e', 4560000000000000000, datetime.datetime(2020, 6, 22, 21, 50), Decimal('361.59'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2599, 'be912a5ee136a22ebd8edfc69b483122', 4640000000000, datetime.datetime(2020, 6, 22, 21, 51), Decimal('3.91'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2600, '795230f4861485b7b505733a29339e85', 30500000000000, datetime.datetime(2020, 6, 22, 22, 2), Decimal('2.08'), 'fraud_Mante Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2601, '2d35d0c0e520b6c5076e2c55a7a8e6b2', 180000000000000, datetime.datetime(2020, 6, 22, 22, 2), Decimal('614.58'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2602, '9ff93d01eb0ae56c362770d8871e43f2', 4010000000000000, datetime.datetime(2020, 6, 22, 22, 6), Decimal('66.45'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2603, '7ad79193ccd55e8f37ed9999d57bf716', 36900000000000, datetime.datetime(2020, 6, 22, 22, 14), Decimal('53.33'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2604, '2d0eadb567e0cbbbf018d186226a375b', 4400000000000000000, datetime.datetime(2020, 6, 22, 22, 14), Decimal('1.09'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2605, '73e245857ca5fe53f1170b42f2bd0a51', 4170000000000000, datetime.datetime(2020, 6, 22, 22, 15), Decimal('3.84'), 'fraud_Reichert, Huels and Hoppe', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2606, '2f149d7583d7dd41c807b983a8f3ec06', 4180000000000000, datetime.datetime(2020, 6, 22, 22, 17), Decimal('2.38'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2607, '8a4ab39c5297121902a75cca154ccc60', 4870000000000000, datetime.datetime(2020, 6, 22, 22, 23), Decimal('1.07'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2608, 'fcbc34d704ffa81f8d047b27917a03a9', 213000000000000, datetime.datetime(2020, 6, 22, 22, 25), Decimal('1.55'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2609, '4a1bb725c0a9a6eb06d0e19253a05891', 6590000000000000, datetime.datetime(2020, 6, 22, 22, 25), Decimal('89.96'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2610, '5991f2ed4e5069e035088dde436b0076', 371000000000000, datetime.datetime(2020, 6, 22, 22, 26), Decimal('13.49'), 'fraud_Herman, Treutel and Dickens', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2611, '9b24f21c1172d5b8abcb7a7090e204a1', 180000000000000, datetime.datetime(2020, 6, 22, 22, 29), Decimal('164.01'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2612, 'b40c6184690c8a001d5ebb5f2c94d3ab', 373000000000000, datetime.datetime(2020, 6, 22, 22, 36), Decimal('187.67'), 'fraud_Kris-Weimann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2613, '10b5c23e5cfa3ddca9dd598daa01191f', 30200000000000, datetime.datetime(2020, 6, 22, 22, 39), Decimal('8.89'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2614, '56f418e1de0c59064e3e747c330d7b7e', 4100000000000000, datetime.datetime(2020, 6, 22, 22, 45), Decimal('7.90'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2615, 'a95eeea988cce083b56151abe93532c5', 6010000000000000, datetime.datetime(2020, 6, 22, 22, 45), Decimal('75.22'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2616, 'a22d00ce8f136c417e240325fb8888ba', 4680000000000000, datetime.datetime(2020, 6, 22, 22, 46), Decimal('6.54'), 'fraud_Hills-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2617, 'fa89eeae0bb1009fcd0ee9db2710a290', 2270000000000000, datetime.datetime(2020, 6, 22, 22, 47), Decimal('8.01'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2618, 'cc6f11568da5971fffd51aa0b12e55dc', 4840000000000000, datetime.datetime(2020, 6, 22, 22, 49), Decimal('8.10'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2619, 'f07b762ac85015ab33bedf897ed8fa1a', 180000000000000, datetime.datetime(2020, 6, 22, 22, 50), Decimal('42.71'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2620, '83157a5e47b4ed1b44d3f82a1e160522', 4940000000000000, datetime.datetime(2020, 6, 22, 22, 51), Decimal('726.29'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2621, '141a455f3e18624caf45fb2456b3f904', 3590000000000000, datetime.datetime(2020, 6, 22, 23, 1), Decimal('124.50'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2622, '9ea6cf4a46a195d7fa11e87cb15efdca', 3500000000000000, datetime.datetime(2020, 6, 22, 23, 3), Decimal('5.97'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2623, 'db5f780e162c2e8cd3420b143ecbe85b', 3530000000000000, datetime.datetime(2020, 6, 22, 23, 4), Decimal('63.74'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2624, 'f9c914fa8ddc2a131b88dcaef8b08f83', 2610000000000000, datetime.datetime(2020, 6, 22, 23, 6), Decimal('101.72'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2625, 'febd4aafe269cca4d3f7354111ef59f2', 213000000000000, datetime.datetime(2020, 6, 22, 23, 10), Decimal('5.03'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2626, '4c2a34ba301cd312792d758bb64856f2', 4800000000000000000, datetime.datetime(2020, 6, 22, 23, 11), Decimal('3.01'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2627, 'e15e7decd98d1afb5e47bb7ca3758395', 6540000000000000, datetime.datetime(2020, 6, 22, 23, 12), Decimal('94.22'), 'fraud_Stehr, Jewess and Schimmel', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2628, '06d567fb57f22688840bf94303ea3dde', 6540000000000000, datetime.datetime(2020, 6, 22, 23, 19), Decimal('4.34'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2629, '5225fcb180886be4477001caf6fefdbe', 3590000000000000, datetime.datetime(2020, 6, 22, 23, 22), Decimal('87.05'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2630, 'ea36d0e567911df4a6fa2645c312bb15', 3580000000000000, datetime.datetime(2020, 6, 22, 23, 24), Decimal('3.57'), 'fraud_Fisher-Schowalter', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2631, 'cb4afb7cb9f31a0f99aa1e0c7ac078fe', 4590000000000000000, datetime.datetime(2020, 6, 22, 23, 25), Decimal('69.10'), 'fraud_Bednar Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2632, 'a90fe21e7d0b0ca62bdd8bd6f6fba37f', 30200000000000, datetime.datetime(2020, 6, 22, 23, 29), Decimal('56.52'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2633, 'b5fa38c39c41800a65410d5232879b22', 30400000000000, datetime.datetime(2020, 6, 22, 23, 31), Decimal('23.87'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2634, 'ad44425f276292d6a63981610c5d3090', 2300000000000000, datetime.datetime(2020, 6, 22, 23, 39), Decimal('2.98'), 'fraud_Kuphal-Predovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2635, 'a64ae04db0bdd30509b4f1d6a21f91b5', 4800000000000000000, datetime.datetime(2020, 6, 22, 23, 41), Decimal('9.35'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2636, 'fb9e5c8c62a02b852e2e284a06f494b3', 4750000000000, datetime.datetime(2020, 6, 22, 23, 48), Decimal('250.80'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2637, '40a4ec36461ebc778a4a43ac06bde1d8', 6010000000000000, datetime.datetime(2020, 6, 22, 23, 48), Decimal('10.72'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2638, '915c48c90be8e7e368cd56c21bfca0ce', 3590000000000000, datetime.datetime(2020, 6, 22, 23, 51), Decimal('8.37'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2639, 'c84767f72ba45ca20bf504995822fa57', 6540000000000000, datetime.datetime(2020, 6, 22, 23, 51), Decimal('3.60'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2640, '49d74986142b582c7f7e9dd95a57f183', 3600000000000000, datetime.datetime(2020, 6, 22, 23, 58), Decimal('7.50'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2641, '2bc13ceddb6f416cac3ef72889a221f1', 349000000000000, datetime.datetime(2020, 6, 23, 6, 1), Decimal('7.06'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2642, '62cddfbeac7745a6147a59d45c6008bb', 213000000000000, datetime.datetime(2020, 6, 23, 6, 2), Decimal('379.10'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2643, '8779304d3e48a3f7dcde5a6bc203a9df', 3540000000000000, datetime.datetime(2020, 6, 23, 6, 3), Decimal('4.47'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2644, '74b92d1fb533af39011c3d40f52f0ea3', 5540000000000000, datetime.datetime(2020, 6, 23, 6, 6), Decimal('8.42'), 'fraud_Huel Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2645, '09d71bbb354baf54dc197a268b246b8a', 376000000000000, datetime.datetime(2020, 6, 23, 6, 13), Decimal('5.76'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2646, '956ccf4db5ede717846810a9c1764a35', 4430000000000000, datetime.datetime(2020, 6, 23, 6, 14), Decimal('6.98'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2647, 'ff34f29081089703cd0280f3dae57dc8', 5000000000000000, datetime.datetime(2020, 6, 23, 6, 15), Decimal('364.03'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2648, 'f946cdd96e2679f2faca2583f209f735', 213000000000000, datetime.datetime(2020, 6, 23, 6, 17), Decimal('34.19'), 'fraud_Kerluke Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2649, 'e12af0b064044969c39d52f24b765138', 4290000000000, datetime.datetime(2020, 6, 23, 6, 18), Decimal('61.81'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2650, '669c06a856a034d4a315b6e8020eed06', 2380000000000000, datetime.datetime(2020, 6, 23, 6, 23), Decimal('4.60'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2651, '0b4f21ad1b5e2098aa18e21da0c21b47', 378000000000000, datetime.datetime(2020, 6, 23, 6, 31), Decimal('5.50'), 'fraud_Jaskolski-Vandervort', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2652, 'f31d6472770100e7e99734f56c242729', 375000000000000, datetime.datetime(2020, 6, 23, 6, 32), Decimal('33.06'), 'fraud_Huel Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2653, '50e98bd3eb7a679e8a3a6d805c3fd32b', 213000000000000, datetime.datetime(2020, 6, 23, 6, 32), Decimal('95.76'), 'fraud_Baumbach, Feeney and Morar', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2654, 'a10ea749884ba5d37ffafc7de01d661a', 3570000000000000, datetime.datetime(2020, 6, 23, 6, 34), Decimal('4.33'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2655, 'c51094b52b292e9c63e11c7477f1f584', 4270000000000000, datetime.datetime(2020, 6, 23, 6, 35), Decimal('1.42'), 'fraud_Brown PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2656, 'a5c2e4b41c60efbd8ffa2716e553e081', 30100000000000, datetime.datetime(2020, 6, 23, 6, 41), Decimal('5.58'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2657, 'dd6adca8fc7e28a1859d3c1c55b04319', 4710000000000000, datetime.datetime(2020, 6, 23, 6, 42), Decimal('9.34'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2658, '814c1ff321c6572605d6bea50337d337', 6010000000000000, datetime.datetime(2020, 6, 23, 6, 43), Decimal('5.20'), 'fraud_Kunde-Sanford', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2659, '8a9a9fb6c39ea1e5a064ef53a29aba2b', 213000000000000, datetime.datetime(2020, 6, 23, 6, 45), Decimal('68.01'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2660, '2d0151ff3cb6822fe699ed1a2b36eda8', 2290000000000000, datetime.datetime(2020, 6, 23, 6, 49), Decimal('8.82'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2661, '983f57c08c482a614d3e354c23d8b1a7', 6010000000000000, datetime.datetime(2020, 6, 23, 6, 51), Decimal('8.92'), 'fraud_Ruecker Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2662, '3d22033ae978fe96dcf8cbf5ca1ff465', 4910000000000000000, datetime.datetime(2020, 6, 23, 6, 56), Decimal('7.07'), 'fraud_Bernier, Volkman and Hoeger', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2663, '79617d9f065ecd8de55917ff2d6104cc', 4070000000000, datetime.datetime(2020, 6, 23, 6, 59), Decimal('479.82'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2664, '1eb913336aa4d2cbfbc14b80a41e926c', 4740000000000000, datetime.datetime(2020, 6, 23, 7, 0), Decimal('3.18'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2665, '1922ca595f81c46f056c0f144c3a7904', 6600000000000000, datetime.datetime(2020, 6, 23, 7, 6), Decimal('2.06'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2666, 'd7f084ba321dc42b37dba7a591d378e0', 180000000000000, datetime.datetime(2020, 6, 23, 7, 12), Decimal('6.24'), 'fraud_Little, Gutmann and Lynch', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2667, '1bfd6118900c8e2e2a2ddc1cd4f54edd', 4710000000000000, datetime.datetime(2020, 6, 23, 7, 16), Decimal('5.43'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2668, '88b559b855eae0f37af3431c95629f2f', 2250000000000000, datetime.datetime(2020, 6, 23, 7, 17), Decimal('5.61'), 'fraud_Kris-Weimann', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2669, '2e4537515bb2aa7d56746c559b6385be', 372000000000000, datetime.datetime(2020, 6, 23, 7, 20), Decimal('4.84'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2670, 'dfda6770312cd392e3532786fcf53d25', 2250000000000000, datetime.datetime(2020, 6, 23, 7, 20), Decimal('9.02'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2671, '50402d61eed1b1b592ef58613d2b7986', 4290000000000, datetime.datetime(2020, 6, 23, 7, 21), Decimal('7.39'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2672, '2f0b71e7e5863df47c68fbafa05dd76b', 4130000000000000, datetime.datetime(2020, 6, 23, 7, 21), Decimal('9.73'), 'fraud_Medhurst PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2673, '893b4ebe9afe6c5b5aa6d216242e98dd', 3580000000000000, datetime.datetime(2020, 6, 23, 7, 22), Decimal('34.97'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2674, 'f9ec1eee98e2655ff7f26e7ba0898a43', 4380000000000000, datetime.datetime(2020, 6, 23, 7, 23), Decimal('84.96'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2675, 'c4af368bd47e5d99f3da29a29dc93ec0', 3540000000000000, datetime.datetime(2020, 6, 23, 7, 24), Decimal('2.96'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2676, 'c37b0400c47361a77b5add6beb55bf16', 180000000000000, datetime.datetime(2020, 6, 23, 7, 25), Decimal('1.67'), 'fraud_Stamm-Witting', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2677, '90844e6b338e38bb5f64e9d0e1d7e0fc', 6010000000000000, datetime.datetime(2020, 6, 23, 7, 25), Decimal('5.42'), 'fraud_Bednar Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2678, '9489a12d4b9937f28dff0e5c4146c51a', 3550000000000000, datetime.datetime(2020, 6, 23, 7, 26), Decimal('1.92'), 'fraud_Welch Inc', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2679, 'd367edaf2be756c3b79137a3988b2453', 4840000000000000, datetime.datetime(2020, 6, 23, 7, 26), Decimal('430.59'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2680, '7aa1cfb7546a5d2f1279dc02756b9f63', 346000000000000, datetime.datetime(2020, 6, 23, 7, 32), Decimal('4.40'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2681, 'a493a48c805522d3e505f90664ee4031', 376000000000000, datetime.datetime(2020, 6, 23, 7, 36), Decimal('90.78'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2682, 'bf58c7454da89d9804152b81f21d4435', 4370000000000000, datetime.datetime(2020, 6, 23, 7, 37), Decimal('97.05'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2683, '1833225f838a64211edb8042cebed18a', 4450000000000000, datetime.datetime(2020, 6, 23, 7, 39), Decimal('82.40'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2684, 'f76a507c68190639a596ba27b7c1d26f', 4790000000000000000, datetime.datetime(2020, 6, 23, 7, 42), Decimal('169.86'), 'fraud_Huel-Langworth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2685, '906d7f290b7b89baefcaa4aeeaa5e1d5', 60495593109, datetime.datetime(2020, 6, 23, 7, 43), Decimal('8.99'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2686, '4365b209383fef7d75a85df02b57384d', 380000000000000, datetime.datetime(2020, 6, 23, 7, 46), Decimal('146.35'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2687, 'bec0bbd866c5c3a0733a217e47f539c3', 3570000000000000, datetime.datetime(2020, 6, 23, 7, 46), Decimal('61.17'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2688, 'c5fb0f335cc3d4ebabe7d340c194c81a', 2700000000000000, datetime.datetime(2020, 6, 23, 7, 48), Decimal('46.04'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2689, 'b3f6150fef7528efb8c62e4a722385f3', 371000000000000, datetime.datetime(2020, 6, 23, 7, 49), Decimal('84.62'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2690, '32fb43cf5e744e3d52e5ccf2eb1c2943', 370000000000000, datetime.datetime(2020, 6, 23, 7, 54), Decimal('3.31'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2691, '7e2169be07d2ba49b432c12dc84d8308', 2290000000000000, datetime.datetime(2020, 6, 23, 7, 54), Decimal('17.03'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2692, 'e278f69a196a4459ace20d017ab0265d', 630000000000, datetime.datetime(2020, 6, 23, 7, 58), Decimal('8.18'), 'fraud_Donnelly PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2693, '2d848e26191372fe8d6af01ed3a4fd31', 5580000000000000, datetime.datetime(2020, 6, 23, 8, 2), Decimal('99.06'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2694, '200c7b9e4227ba62fe173a1f19269170', 4720000000000000000, datetime.datetime(2020, 6, 23, 8, 4), Decimal('3.85'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2695, '06ffead4a7584d4bb969f9a8a6c2340b', 373000000000000, datetime.datetime(2020, 6, 23, 8, 7), Decimal('88.60'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2696, 'eca87a60c65b9129b740970c676f52f6', 565000000000, datetime.datetime(2020, 6, 23, 8, 9), Decimal('102.25'), 'fraud_Cormier LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2697, '29d8687880fc04cefb30545a9554acd0', 4690000000000000000, datetime.datetime(2020, 6, 23, 8, 10), Decimal('78.01'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2698, '7c8bd300580b124bba6f6cfabdbd6745', 344000000000000, datetime.datetime(2020, 6, 23, 8, 10), Decimal('53.96'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2699, '8ef1f65d745b2f356378d2f6a25db861', 3530000000000000, datetime.datetime(2020, 6, 23, 8, 13), Decimal('92.02'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2700, 'cd0eea1c67e1571a7cec277c35380fc1', 4450000000000000, datetime.datetime(2020, 6, 23, 8, 14), Decimal('7.91'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2701, '18dd81de35051fd93f094148b0836c9e', 6010000000000000, datetime.datetime(2020, 6, 23, 8, 22), Decimal('7.41'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2702, '9b7c0916bb63100529b1a683360a3522', 3540000000000000, datetime.datetime(2020, 6, 23, 8, 23), Decimal('146.36'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2703, 'a140948ead51db70542a6aa87ee60328', 6010000000000000, datetime.datetime(2020, 6, 23, 8, 23), Decimal('127.67'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2704, '6e38b5f21c664e371d0d769de34e077b', 36100000000000, datetime.datetime(2020, 6, 23, 8, 26), Decimal('7.87'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2705, '77ceaee2931012de263afaea6b31f1d1', 4860000000000, datetime.datetime(2020, 6, 23, 8, 29), Decimal('55.49'), 'fraud_Moore, Dibbert and Koepp', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2706, 'a54e68927af686accbd6f5ef7b28dccb', 213000000000000, datetime.datetime(2020, 6, 23, 8, 29), Decimal('1.28'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2707, 'a2b88f602cd6edca9a42883208ece359', 4030000000000000, datetime.datetime(2020, 6, 23, 8, 33), Decimal('8.04'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2708, '358f0afe3843fb87f9d2efcb97385c53', 502000000000, datetime.datetime(2020, 6, 23, 8, 34), Decimal('66.99'), 'fraud_Kunde-Sanford', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2709, '86d94bd8dd6c5b4f0e5af41fe5b7bbd1', 4170000000000000, datetime.datetime(2020, 6, 23, 8, 35), Decimal('4.60'), 'fraud_Donnelly PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2710, 'd082053728564003a50e12eb726164f1', 5360000000000000, datetime.datetime(2020, 6, 23, 8, 39), Decimal('137.34'), 'fraud_Kunde-Sanford', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2711, '64bca8dbdab67971abbf3dba9febdc54', 4450000000000000, datetime.datetime(2020, 6, 23, 8, 40), Decimal('3.06'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2712, '7e9e68e24e68b416d985624fa07bd33e', 5000000000000000, datetime.datetime(2020, 6, 23, 8, 44), Decimal('138.77'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2713, 'a863ec48273e433ce938d3af524efbd4', 3510000000000000, datetime.datetime(2020, 6, 23, 8, 56), Decimal('3.84'), 'fraud_Ruecker Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2714, '3386f20711b5282189546865aa14a528', 213000000000000, datetime.datetime(2020, 6, 23, 9, 0), Decimal('58.25'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2715, 'ec0c668ef7ab7e9e709f98e2915e4f71', 213000000000000, datetime.datetime(2020, 6, 23, 9, 5), Decimal('1.23'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2716, '84b5608fc13a91c8abfcf932c1ca69a7', 2290000000000000, datetime.datetime(2020, 6, 23, 9, 6), Decimal('177.43'), 'fraud_Kozey-Boehm', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2717, '051bf0b7d4ed100f952d7cca0bb121ed', 4840000000000000, datetime.datetime(2020, 6, 23, 9, 8), Decimal('1008.94'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2718, '9c0e151d284273a08dedf4693813f063', 4780000000000, datetime.datetime(2020, 6, 23, 9, 9), Decimal('8.94'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2719, '42c1eef56749371b709edbdcdad8de84', 4390000000000000000, datetime.datetime(2020, 6, 23, 9, 9), Decimal('4.52'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2720, 'c69f48ba95bb6241edd082bae43340ef', 585000000000, datetime.datetime(2020, 6, 23, 9, 13), Decimal('31.51'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2721, '0d13f48a39d228c0243a477b220f7ae1', 4650000000000000000, datetime.datetime(2020, 6, 23, 9, 13), Decimal('5.10'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2722, 'ac0ac5e66ecd86068deb819855fca4a1', 3590000000000000, datetime.datetime(2020, 6, 23, 9, 20), Decimal('147.64'), 'fraud_Greenfelder, Bartoletti and Davis', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2723, '4b74e411d01a33881ed90c4192e5629d', 30000000000000, datetime.datetime(2020, 6, 23, 9, 24), Decimal('6.60'), 'fraud_Lehner, Mosciski and King', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2724, 'dbfa430b3930b084bf913e53897349e8', 5390000000000000, datetime.datetime(2020, 6, 23, 9, 24), Decimal('5.18'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2725, 'e6dddcf6be12adeded0b33e1ce57884b', 30100000000000, datetime.datetime(2020, 6, 23, 9, 24), Decimal('3.24'), 'fraud_Ferry, Lynch and Kautzer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2726, 'b4842b3cd57e0e46cb77dd7221a6f48a', 3580000000000000, datetime.datetime(2020, 6, 23, 9, 25), Decimal('4.91'), 'fraud_Block-Parisian', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2727, '461085e3fda5ac6a126eca2826ba75e9', 6590000000000000, datetime.datetime(2020, 6, 23, 9, 30), Decimal('1.87'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2728, 'a61b1f0006bda3e7e5073b8957941d7f', 36600000000000, datetime.datetime(2020, 6, 23, 9, 30), Decimal('3.39'), 'fraud_Brown PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2729, '25122503572048dbda4020d90600e2de', 4650000000000000, datetime.datetime(2020, 6, 23, 9, 31), Decimal('4.20'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2730, '39753907d80d2785a1c95f1508ca6a36', 5600000000000000, datetime.datetime(2020, 6, 23, 9, 43), Decimal('4.85'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2731, '85b68612069125738dfa8158311f5c76', 565000000000, datetime.datetime(2020, 6, 23, 9, 43), Decimal('108.72'), 'fraud_Reichert, Rowe and Mraz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2732, '8cf7e36a36d3188639f5e3bb4d8541d7', 4480000000000000, datetime.datetime(2020, 6, 23, 9, 45), Decimal('21.96'), 'fraud_Block-Parisian', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2733, '5ef5873b59e187508b44d9973f5ca852', 3520000000000000, datetime.datetime(2020, 6, 23, 9, 46), Decimal('4.79'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2734, 'aa6c1b1e5c1f0d5c09c84b1913fa3cba', 30100000000000, datetime.datetime(2020, 6, 23, 9, 53), Decimal('208.37'), 'fraud_Nader-Heller', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2735, '33005ea51b19b753e4f20e75fb5ab5f3', 6550000000000000, datetime.datetime(2020, 6, 23, 9, 54), Decimal('357.77'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2736, 'ff451adb01c281849b9893d39a24476f', 340000000000000, datetime.datetime(2020, 6, 23, 10, 7), Decimal('4.99'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2737, '2c033522929577f29c246583274588d0', 5390000000000000, datetime.datetime(2020, 6, 23, 10, 9), Decimal('6.00'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2738, 'f7745b1c5c37c343471f2de72c0cf592', 571000000000, datetime.datetime(2020, 6, 23, 10, 12), Decimal('7.66'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2739, 'ec10d0a77cc048dab80e95166618f1f0', 30600000000000, datetime.datetime(2020, 6, 23, 10, 14), Decimal('2.98'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2740, 'd78bfea7e004fe0e15db7803fc3539a1', 6010000000000000, datetime.datetime(2020, 6, 23, 10, 15), Decimal('3.23'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2741, 'e3010e097b5f9e3511e7268b758ea91b', 4090000000000000000, datetime.datetime(2020, 6, 23, 10, 21), Decimal('827.94'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2742, 'e1538ed9bb681a3b520aed5707808aea', 3530000000000000, datetime.datetime(2020, 6, 23, 10, 23), Decimal('4.29'), 'fraud_Hayes, Marquardt and Dibbert', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2743, '55ef6e91c6a4da4049d2709a6bdec59a', 4430000000000000, datetime.datetime(2020, 6, 23, 10, 27), Decimal('1.14'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2744, 'e3405a3fc00dc53699e9c820be479efa', 3570000000000000, datetime.datetime(2020, 6, 23, 10, 30), Decimal('7.83'), 'fraud_Donnelly PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2745, 'a834d5cf8bf0b5624d5279d6f0f53726', 4150000000000, datetime.datetime(2020, 6, 23, 10, 30), Decimal('7.74'), 'fraud_Tillman, Fritsch and Schmitt', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2746, '5b6b275f803ed625fbe467dc37ada05a', 630000000000, datetime.datetime(2020, 6, 23, 10, 31), Decimal('5.46'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2747, 'aebb22ac2f2a12ac2f5143f7343cc22f', 4810000000000, datetime.datetime(2020, 6, 23, 10, 31), Decimal('1.90'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2748, 'c19a09629ba888885ff406dd5dfe5e5a', 378000000000000, datetime.datetime(2020, 6, 23, 10, 33), Decimal('87.28'), 'fraud_Bogisich-Homenick', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2749, 'd410f97318fc8882c9b819c8baeb95a2', 630000000000, datetime.datetime(2020, 6, 23, 10, 35), Decimal('31.41'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2750, '1c7bd04d1507cb60a61e6d0f032b5018', 4840000000000000, datetime.datetime(2020, 6, 23, 10, 36), Decimal('1.94'), 'fraud_Rohan, White and Aufderhar', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2751, '6373597cd8f193247be53194d692f472', 2280000000000000, datetime.datetime(2020, 6, 23, 10, 38), Decimal('3.28'), 'fraud_Huel Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2752, '164325db3c7dbea2a1f7d416e0fc7611', 3570000000000000, datetime.datetime(2020, 6, 23, 10, 44), Decimal('34.41'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2753, '55534817a16da8e60de9a9635cc66618', 2250000000000000, datetime.datetime(2020, 6, 23, 10, 45), Decimal('3.65'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2754, '4829ce2747458e19fb1d5dc71fca4cda', 38800000000000, datetime.datetime(2020, 6, 23, 10, 48), Decimal('108.36'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2755, '1ba7e26bcdc065d146a8ece5b5a5e0d4', 4130000000000000, datetime.datetime(2020, 6, 23, 10, 49), Decimal('3.71'), 'fraud_Dooley-Thompson', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2756, '8882d1e5de802a2012867b2c1c8afc68', 572000000000, datetime.datetime(2020, 6, 23, 10, 50), Decimal('6.40'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2757, '544e80c492c2e6d4fdac36dc40c271ae', 4150000000000000, datetime.datetime(2020, 6, 23, 10, 52), Decimal('1.84'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2758, '0a83a0c7f287447112d1a3436b8cce0c', 30400000000000, datetime.datetime(2020, 6, 23, 10, 53), Decimal('4.71'), 'fraud_Reichert, Shanahan and Hayes', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2759, 'ff5b0ad12900a298f32a2f4818901d2a', 378000000000000, datetime.datetime(2020, 6, 23, 10, 54), Decimal('2.31'), 'fraud_Hamill-Daugherty', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2760, '189ce8f9d09e84c9cb5a4e2368524551', 213000000000000, datetime.datetime(2020, 6, 23, 10, 55), Decimal('2.04'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2761, '1e920c757a07b96ee85ebf3e0f20d92c', 4790000000000000000, datetime.datetime(2020, 6, 23, 10, 59), Decimal('10.45'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2762, '0a9e41b3016dc3a25b135bab487cb052', 4390000000000000000, datetime.datetime(2020, 6, 23, 11, 2), Decimal('2.12'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2763, '5d4d395e9e2d95153bd042b6fec8ceb8', 30500000000000, datetime.datetime(2020, 6, 23, 11, 12), Decimal('198.10'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2764, '5420ab41c823b91d0e32368be6d9b691', 2480000000000000, datetime.datetime(2020, 6, 23, 11, 26), Decimal('78.59'), 'fraud_Donnelly PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2765, '16da7e9d28b9311f867ca39b29a1fbac', 378000000000000, datetime.datetime(2020, 6, 23, 11, 29), Decimal('151.39'), 'fraud_Miller-Harris', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2766, '29f1ea16f698c18ae00dd719a913d201', 4510000000000000, datetime.datetime(2020, 6, 23, 11, 30), Decimal('4.83'), 'fraud_Heathcote, Yost and Kertzmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2767, '0c81cc6910c977be014aa83018a9813e', 341000000000000, datetime.datetime(2020, 6, 23, 11, 32), Decimal('6.91'), 'fraud_Jones, Sawayn and Romaguera', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2768, '3baf4dbda93c4493849fd153747d002b', 3510000000000000, datetime.datetime(2020, 6, 23, 11, 34), Decimal('8.77'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2769, '1456d33af7c6cc25bbe085d0d752666d', 676000000000, datetime.datetime(2020, 6, 23, 11, 38), Decimal('5.48'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2770, 'ca90821eafe5461bf492e5f598a10497', 3530000000000000, datetime.datetime(2020, 6, 23, 11, 39), Decimal('8.24'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2771, '1cfe9f15f2588900a975a3daf1c08585', 4500000000000, datetime.datetime(2020, 6, 23, 11, 43), Decimal('14.58'), 'fraud_Volkman Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2772, 'f649b37e519392c27983253671988710', 585000000000, datetime.datetime(2020, 6, 23, 11, 44), Decimal('7.68'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2773, 'fff7cceddaf4baef4a36a4b19bb731f7', 6010000000000000, datetime.datetime(2020, 6, 23, 11, 50), Decimal('89.00'), 'fraud_Zemlak Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2774, 'cfd6a2eae3e4cf0ff4a80fba2886f2ad', 4590000000000, datetime.datetime(2020, 6, 23, 11, 51), Decimal('4.85'), 'fraud_Brown PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2775, '1590c5c451255231f908f77e7d8cefcb', 4560000000000, datetime.datetime(2020, 6, 23, 11, 56), Decimal('9.57'), 'fraud_Huel Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2776, '51d2c754be7f4a18d1d6f1c9ba6688cd', 3560000000000000, datetime.datetime(2020, 6, 23, 12, 3), Decimal('90.50'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2777, '0e039b499d1000721dab736c86b76dc9', 2240000000000000, datetime.datetime(2020, 6, 23, 12, 4), Decimal('140.29'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2778, 'b3e4fadb7ae78311ab9747489f9afdf3', 3570000000000000, datetime.datetime(2020, 6, 23, 12, 6), Decimal('1.25'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2779, 'c69ff6b95e4d772735379a85cf6af9e7', 3540000000000000, datetime.datetime(2020, 6, 23, 12, 10), Decimal('2.94'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2780, '1b2fccba260564801ad5eddeabbeddd5', 30300000000000, datetime.datetime(2020, 6, 23, 12, 13), Decimal('4.81'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2781, '24d5ac5593588bb495695af596696f7b', 3560000000000000, datetime.datetime(2020, 6, 23, 12, 16), Decimal('2.32'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2782, 'b5d286341ddb90f2d14a7dcfa7812276', 3600000000000000, datetime.datetime(2020, 6, 23, 12, 33), Decimal('2.00'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2783, '71cb9553a06b4dc562d532a6ba02050d', 6510000000000000, datetime.datetime(2020, 6, 23, 12, 34), Decimal('22.62'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2784, 'b7dff8ba1b1426704467e524c0c43619', 5540000000000000, datetime.datetime(2020, 6, 23, 12, 39), Decimal('4.79'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2785, 'a61f870c1e3a2dbab2db3b80fbd97886', 3520000000000000, datetime.datetime(2020, 6, 23, 12, 41), Decimal('12.29'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2786, 'f4b90e3b3af600d14d1f81d61ab1abf2', 3560000000000000, datetime.datetime(2020, 6, 23, 12, 43), Decimal('302.76'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2787, '0582c9b6729b2d703641999ef0838f97', 4580000000000000000, datetime.datetime(2020, 6, 23, 12, 44), Decimal('2.83'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2788, '323e23963ce4ba98caa19046bc581f64', 376000000000000, datetime.datetime(2020, 6, 23, 12, 45), Decimal('8.16'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2789, 'bd5afb24df70fd39afbd1eb02104f62b', 4540000000000000000, datetime.datetime(2020, 6, 23, 12, 50), Decimal('5.07'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2790, '95886c43142b6bd5f26bfaf8fd008500', 377000000000000, datetime.datetime(2020, 6, 23, 12, 53), Decimal('1.80'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2791, '7b6d0953c3d3c3e9da97447bf920a8ec', 4630000000000000, datetime.datetime(2020, 6, 23, 12, 59), Decimal('9.30'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2792, '5e39586abcf5179c6ffbd55bde035045', 568000000000, datetime.datetime(2020, 6, 23, 13, 5), Decimal('7.37'), 'fraud_Jast Ltd', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2793, '47435ca74459f3af90b6a0f6fb3d1ac3', 3580000000000000, datetime.datetime(2020, 6, 23, 13, 6), Decimal('8.14'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2794, 'dbde1dffa8c30ebc388f42583fce621c', 346000000000000, datetime.datetime(2020, 6, 23, 13, 7), Decimal('2.26'), 'fraud_Predovic Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2795, 'cedfc747449d7da39d519a67a3d6f5e9', 6500000000000000, datetime.datetime(2020, 6, 23, 13, 14), Decimal('5.99'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2796, '16eb5b2c83e49d46a6c51a3887966926', 4430000000000, datetime.datetime(2020, 6, 23, 13, 17), Decimal('32.58'), 'fraud_Donnelly PLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2797, 'ee9dd63afc1cebfec43c24b70b97a25b', 376000000000000, datetime.datetime(2020, 6, 23, 13, 19), Decimal('1.58'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2798, '040bdb6225ee780d24ba5115c28300b1', 3540000000000000, datetime.datetime(2020, 6, 23, 13, 20), Decimal('2.10'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2799, '5e5bc2fe0bb95201ab001b3a59169e77', 4380000000000000000, datetime.datetime(2020, 6, 23, 13, 23), Decimal('1.02'), 'fraud_Volkman-Predovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2800, 'f7681a69f6fa498520c1ab86a135c17d', 4560000000000, datetime.datetime(2020, 6, 23, 13, 24), Decimal('107.58'), 'fraud_Parisian, Schiller and Altenwerth', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2801, '9a6fa7f6eef741727f7479fc14bde781', 4010000000000000, datetime.datetime(2020, 6, 23, 13, 31), Decimal('1.84'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2802, 'b073ab5550564f320f20db7f704ae74a', 3560000000000000, datetime.datetime(2020, 6, 23, 13, 32), Decimal('3.87'), 'fraud_Terry-Huel', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2803, '995e05d3f11dd10e691f320c198ee110', 4590000000000000000, datetime.datetime(2020, 6, 23, 13, 33), Decimal('102.93'), 'fraud_Kerluke, Kertzmann and Wiza', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2804, '057025f2c53fa1a9aa66232c03281d24', 3560000000000000, datetime.datetime(2020, 6, 23, 13, 36), Decimal('2.32'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2805, '1e24da94ff7544936987aa5ddc33cc72', 3570000000000000, datetime.datetime(2020, 6, 23, 13, 37), Decimal('5.34'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2806, 'c9d42b7755cb1e88eb996343d49607cd', 4590000000000000, datetime.datetime(2020, 6, 23, 13, 39), Decimal('21.14'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2807, '26c531b835b7366befc5a63e64fccbe0', 4460000000000, datetime.datetime(2020, 6, 23, 13, 40), Decimal('3.47'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2808, '05e72f560c609a9ec59db68cc46f18b8', 4590000000000000, datetime.datetime(2020, 6, 23, 13, 40), Decimal('298.28'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2809, '6781761d9c2b58c13bd253b26748c267', 3580000000000000, datetime.datetime(2020, 6, 23, 13, 41), Decimal('3.61'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2810, '7ef6891ab7722430635f0c47e083840e', 3590000000000000, datetime.datetime(2020, 6, 23, 13, 43), Decimal('1.83'), 'fraud_Miller-Harris', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2811, '8606e2a439d3444fa1b85b37b9c9d4fc', 4510000000000000000, datetime.datetime(2020, 6, 23, 13, 43), Decimal('4.68'), 'fraud_Schmitt Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2812, '6fea841b434cbf588c6d190207fe4701', 2250000000000000, datetime.datetime(2020, 6, 23, 13, 46), Decimal('1.18'), 'fraud_Boyer PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2813, '2bf6748a09a8c4180f7747d21fa49f22', 4760000000000, datetime.datetime(2020, 6, 23, 14, 1), Decimal('164.69'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2814, 'bbf214f99eb08b2ce571199009598953', 4790000000000000000, datetime.datetime(2020, 6, 23, 14, 2), Decimal('1.97'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2815, 'd4e7dd4fa5712280e419944152666edb', 4580000000000000000, datetime.datetime(2020, 6, 23, 14, 3), Decimal('9.08'), 'fraud_Schmidt and Sons', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2816, 'af676906d3231bd6e57c3bfa0ee07d0f', 4290000000000000000, datetime.datetime(2020, 6, 23, 14, 4), Decimal('161.33'), 'fraud_Miller-Harris', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2817, 'b7ad6b510987e107e862e9ac5213e3fe', 30100000000000, datetime.datetime(2020, 6, 23, 14, 7), Decimal('8.12'), 'fraud_Rempel Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2818, '54971aa8e9906a841b0214bf92326675', 4480000000000, datetime.datetime(2020, 6, 23, 14, 7), Decimal('7.35'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2819, 'e2489005f7e9c59791cfb3eb7dc74ec0', 3520000000000000, datetime.datetime(2020, 6, 23, 14, 9), Decimal('6.65'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2820, 'f0659f62bd79218d064514b48d65e21f', 3550000000000000, datetime.datetime(2020, 6, 23, 14, 15), Decimal('1.93'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2821, '97ca92e9e1caaedfd699eb0f779f4a3a', 5150000000000000, datetime.datetime(2020, 6, 23, 14, 15), Decimal('2.85'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2822, 'de36580f4568d48481036384dbe96a5f', 60416207185, datetime.datetime(2020, 6, 23, 14, 24), Decimal('2.83'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2823, '200ee5bcdae242306a60257df786ba6a', 30100000000000, datetime.datetime(2020, 6, 23, 14, 35), Decimal('702.21'), 'fraud_Kuhic LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2824, 'de28d7eabdfdbfe3fc5cb8299078a142', 30200000000000, datetime.datetime(2020, 6, 23, 14, 46), Decimal('24.51'), 'fraud_Klocko LLC', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2825, '0b819f4baf1db5ca0925ec6a430ce42b', 3550000000000000, datetime.datetime(2020, 6, 23, 14, 53), Decimal('2.73'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2826, 'bbfc7a9cf6aaaf121cda03c651fb3ca3', 4500000000000000000, datetime.datetime(2020, 6, 23, 15, 2), Decimal('3.93'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2827, '1b591401a5a2577704fcc0032f76142d', 6590000000000000, datetime.datetime(2020, 6, 23, 15, 4), Decimal('2.01'), 'fraud_Schmeler, Bashirian and Price', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2828, '9639fcf2fcfc71e4a10edcb25b7352ff', 4000000000000000, datetime.datetime(2020, 6, 23, 15, 10), Decimal('8.72'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2829, '08cb282c3bba2ce39e438bef1b6d949d', 3500000000000000, datetime.datetime(2020, 6, 23, 15, 12), Decimal('197.14'), 'fraud_Rodriguez, Yost and Jenkins', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2830, '3de4ff1630240187946a0de5fc05152e', 3580000000000000, datetime.datetime(2020, 6, 23, 15, 15), Decimal('1.75'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2831, 'd64a61a061898e6fc266354d801c8c09', 4600000000000, datetime.datetime(2020, 6, 23, 15, 15), Decimal('3.11'), 'fraud_Mohr-Bayer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2832, '6a4bf572d3a159fe86250d76e665e19e', 4130000000000000, datetime.datetime(2020, 6, 23, 15, 21), Decimal('3.66'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2833, '4f00f3f13990e1f4b76b79b55bdec7ad', 3520000000000000, datetime.datetime(2020, 6, 23, 15, 24), Decimal('7.83'), 'fraud_Bogisich-Homenick', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2834, '8d1f6bbeac13b300295ee7f0e3700c06', 4860000000000000000, datetime.datetime(2020, 6, 23, 15, 30), Decimal('4.27'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2835, '01bdbe8efea56ee652af48ecc2e6fa55', 30500000000000, datetime.datetime(2020, 6, 23, 15, 30), Decimal('9.00'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2836, 'a0190f90a4d15670b6ecc0adbdcf5f17', 30100000000000, datetime.datetime(2020, 6, 23, 15, 30), Decimal('172.63'), 'fraud_Kerluke-Abshire', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2837, 'c0e2f4aad4423526e4549454b165d932', 4360000000000000, datetime.datetime(2020, 6, 23, 15, 41), Decimal('10.00'), 'fraud_Bashirian Group', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2838, 'c4530cd1ddb11aa171dd9f02144b6045', 38300000000000, datetime.datetime(2020, 6, 23, 15, 43), Decimal('7.69'), 'fraud_Auer-West', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2839, '2093cb305985ed0cafcd60cf3968cd99', 373000000000000, datetime.datetime(2020, 6, 23, 15, 44), Decimal('3.89'), 'fraud_Kuhic, Bins and Pfeffer', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2840, '5514e81a4304da3933fe119c30cb450f', 371000000000000, datetime.datetime(2020, 6, 23, 15, 47), Decimal('4.65'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2841, '7087b3517aff7458a2e647e9e6f02f17', 4600000000000000, datetime.datetime(2020, 6, 23, 15, 50), Decimal('30.68'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2842, '740635edc7232e6084d5beb04d60c4c8', 3510000000000000, datetime.datetime(2020, 6, 23, 15, 52), Decimal('8.48'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2843, '8e4b088c9593d03f833a5ad01db5b34b', 4900000000000, datetime.datetime(2020, 6, 23, 15, 54), Decimal('6.68'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2844, 'e35eebec4570e792574c8ba678201d81', 639000000000, datetime.datetime(2020, 6, 23, 15, 56), Decimal('16.91'), 'fraud_Johnson, Runolfsdottir and Mayer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2845, 'c3ed9c41b42adee6d3bd9e71fdd713af', 3540000000000000, datetime.datetime(2020, 6, 23, 15, 57), Decimal('103.88'), 'fraud_Block-Parisian', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2846, '944eb2badfc5237efe2e06e516b7ad79', 3580000000000000, datetime.datetime(2020, 6, 23, 16, 2), Decimal('4.08'), 'fraud_Goyette Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2847, '1dbb4cca00963377642b7248282b6b92', 345000000000000, datetime.datetime(2020, 6, 23, 16, 10), Decimal('3.47'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2848, '78ed338f03a32601332f617871559587', 4840000000000000, datetime.datetime(2020, 6, 23, 16, 10), Decimal('89.48'), 'fraud_Koelpin and Sons', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2849, '74c72ac8cbff93c7e9e8dbc58f4b7ce6', 30300000000000, datetime.datetime(2020, 6, 23, 16, 11), Decimal('6.65'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2850, '7bb59e073e9ca7696d0dea67e607304d', 180000000000000, datetime.datetime(2020, 6, 23, 16, 15), Decimal('18.93'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2851, 'bbda643f1c6f2f10e71ee0bfdfb5d9d9', 30200000000000, datetime.datetime(2020, 6, 23, 16, 16), Decimal('275.30'), 'fraud_Bednar Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2852, '2ebb1d76dd2c147434c34e24c906cc15', 4800000000000000000, datetime.datetime(2020, 6, 23, 16, 26), Decimal('9.35'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2853, 'ea3e8c06e0b4d709661dcc910efaf94d', 5360000000000000, datetime.datetime(2020, 6, 23, 16, 32), Decimal('9.65'), 'fraud_Schumm PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2854, 'ab456b2aeb0f879d96b6e74e40d6b2dd', 345000000000000, datetime.datetime(2020, 6, 23, 16, 34), Decimal('719.27'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2855, '50b952feafba129db3bc7147aa646895', 4560000000000000000, datetime.datetime(2020, 6, 23, 16, 34), Decimal('24.67'), 'fraud_Labadie, Treutel and Bode', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2856, '4121ed13405a9b9b4ea86f2710ec17eb', 180000000000000, datetime.datetime(2020, 6, 23, 16, 34), Decimal('8.07'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2857, 'd91ef85ca8de21c25de892388961532f', 60416207185, datetime.datetime(2020, 6, 23, 16, 39), Decimal('7.26'), 'fraud_Altenwerth, Cartwright and Koss', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2858, 'e9d3abe2a1cab924e78dcd94bd0f64db', 3580000000000000, datetime.datetime(2020, 6, 23, 16, 45), Decimal('6.61'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2859, '61dba9d125d8d2ff8633d8ff139a31b4', 3580000000000000, datetime.datetime(2020, 6, 23, 16, 48), Decimal('1.96'), 'fraud_Zboncak, Rowe and Murazik', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2860, '13ec41ab795173d1311a2c8545e782ee', 5100000000000000, datetime.datetime(2020, 6, 23, 16, 50), Decimal('316.57'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2861, 'd5129fccc0ff9efb7a0cce966996bb0f', 3550000000000000, datetime.datetime(2020, 6, 23, 16, 53), Decimal('8.04'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2862, '8c2d3f2776ddbf58e2b40f88bdcab7af', 2240000000000000, datetime.datetime(2020, 6, 23, 16, 54), Decimal('2.32'), 'fraud_Gottlieb, Considine and Schultz', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2863, 'a425a5670a23d01b1c703868b1e165ba', 4170000000000000, datetime.datetime(2020, 6, 23, 16, 54), Decimal('2.00'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2864, '5f20588bc8fc0eef42a51d50d53ef104', 376000000000000, datetime.datetime(2020, 6, 23, 17, 3), Decimal('3.42'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2865, 'bf4264a62e7883739cc36dc26d411a28', 4160000000000000, datetime.datetime(2020, 6, 23, 17, 7), Decimal('7.38'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2866, '80448879b35a15c4b80700f523f6e98d', 38300000000000, datetime.datetime(2020, 6, 23, 17, 7), Decimal('1.76'), 'fraud_Mosciski, Ziemann and Farrell', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2867, '257aabe056bac23923464ea5c70809a3', 3520000000000000, datetime.datetime(2020, 6, 23, 17, 16), Decimal('185.60'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2868, '99af54dcd3bc14175414275bcd3b51c8', 5360000000000000, datetime.datetime(2020, 6, 23, 17, 21), Decimal('3.52'), 'fraud_Kuphal-Bartoletti', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2869, 'd5831abd8b72c131039f80d31f86efbc', 582000000000, datetime.datetime(2020, 6, 23, 17, 21), Decimal('642.32'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2870, 'c19eae623003b0777c8385c000d0ae7f', 2700000000000000, datetime.datetime(2020, 6, 23, 17, 22), Decimal('37.25'), 'fraud_Gerlach Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2871, 'cc14cdbd781163439752dd4da9623b49', 2240000000000000, datetime.datetime(2020, 6, 23, 17, 36), Decimal('162.60'), 'fraud_Durgan-Auer', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2872, '071a5b14302f8b633519726eff962349', 4940000000000000, datetime.datetime(2020, 6, 23, 17, 44), Decimal('5.48'), 'fraud_Heathcote LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2873, 'a60d9a175e9f854aa134bd6418736d89', 4580000000000000000, datetime.datetime(2020, 6, 23, 17, 50), Decimal('6.77'), 'fraud_Ankunding LLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2874, '03085ef17733fe53cf7ec33d5e89483f', 341000000000000, datetime.datetime(2020, 6, 23, 17, 54), Decimal('2.20'), 'fraud_Kihn, Abernathy and Douglas', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2875, '20432c4bbb9b250886bfd244ce898084', 4760000000000, datetime.datetime(2020, 6, 23, 17, 55), Decimal('9.46'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2876, 'e56f04c0538e4e616a4099ced4a334aa', 38100000000000, datetime.datetime(2020, 6, 23, 18, 0), Decimal('3.40'), 'fraud_Ruecker, Beer and Collier', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2877, '840e4fbbebfb12f9c4a75a70d9473de2', 4200000000000, datetime.datetime(2020, 6, 23, 18, 0), Decimal('3.55'), 'fraud_Romaguera, Cruickshank and Greenholt', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2878, '9c4aa33ce5899ce1b597bbf1117aa1d2', 3550000000000000, datetime.datetime(2020, 6, 23, 18, 0), Decimal('4.37'), 'fraud_Gleason-Macejkovic', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2879, '54d814ac01ca44fd7bf89a924b61698c', 4290000000000000000, datetime.datetime(2020, 6, 23, 18, 1), Decimal('37.36'), 'fraud_Ruecker Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2880, '273d40cc5e0ea80231451f8165ee07b8', 4100000000000000, datetime.datetime(2020, 6, 23, 18, 4), Decimal('9.18'), 'fraud_Langworth, Boehm and Gulgowski', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2881, '2f648f68c0ef806ef2182cd05b16bbe0', 3580000000000000, datetime.datetime(2020, 6, 23, 18, 6), Decimal('7.50'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2882, 'aba77952d151fa218172c73930252ac4', 4310000000000000000, datetime.datetime(2020, 6, 23, 18, 10), Decimal('3344.72'), 'fraud_Streich, Dietrich and Barton', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2883, 'aaf14e0ca40dd424bb0f2f65819266b7', 630000000000, datetime.datetime(2020, 6, 23, 18, 19), Decimal('6.65'), 'fraud_Fisher Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2884, '9db4b4a95328a8fe1e2453dc60035c12', 3550000000000000, datetime.datetime(2020, 6, 23, 18, 23), Decimal('94.58'), 'fraud_Lemke-Gutmann', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2885, 'b425adb33c95b7370cef0ef85a64457e', 30300000000000, datetime.datetime(2020, 6, 23, 18, 23), Decimal('101.04'), 'fraud_Kerluke, Considine and Macejkovic', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2886, 'a74976193b3a5daa163326ef1a03efb1', 6010000000000000, datetime.datetime(2020, 6, 23, 18, 29), Decimal('10.10'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2887, 'd32515a4006b5893fb04572ecbe6aea2', 3590000000000000, datetime.datetime(2020, 6, 23, 18, 32), Decimal('6.05'), \"fraud_Greenholt, O'Hara and Balistreri\", 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2888, '87fbfe68bbbe01e449fe3f0f3e6e0b0e', 3570000000000000, datetime.datetime(2020, 6, 23, 18, 37), Decimal('6.19'), 'fraud_Towne, Greenholt and Koepp', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2889, '873889338af56579399bf4a6e29d6b64', 4360000000000000, datetime.datetime(2020, 6, 23, 18, 37), Decimal('1.80'), 'fraud_Price Inc', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2890, 'c966ed8c1474d4c7c1bbae9870d609c6', 30600000000000, datetime.datetime(2020, 6, 23, 18, 40), Decimal('6.57'), 'fraud_Ruecker Group', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2891, '1c3c61ddb312fa4771edc9f198d40d8c', 4180000000000000, datetime.datetime(2020, 6, 23, 18, 42), Decimal('2.54'), 'fraud_Stanton, Jakubowski and Baumbach', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2892, '6b55d5228ce751121ccafc5acb93533a', 630000000000, datetime.datetime(2020, 6, 23, 18, 42), Decimal('4.06'), 'fraud_Huel Ltd', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2893, '11dbab7071504ff6f8531ff6480dbf54', 346000000000000, datetime.datetime(2020, 6, 23, 18, 47), Decimal('1.57'), 'fraud_Kassulke PLC', 'shopping_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "(2894, '22d9e40d1b2c21b0f7eaebd22bf49f5c', 4750000000000, datetime.datetime(2020, 6, 23, 18, 49), Decimal('82.53'), 'fraud_Dach-Nader', 'misc_net', 0, 'High-risk category', datetime.datetime(2025, 7, 21, 11, 7, 3))\n",
      "   id                         trans_num            cc_num          trans_date  \\\n",
      "0   1  16bf2e46c54369a8eab2214649506425  3560000000000000 2020-06-21 22:06:00   \n",
      "1   2  ab4b379d2c0c9c667d46508d4e126d72  6560000000000000 2020-06-21 22:32:00   \n",
      "2   3  47a9987ae81d99f7832a54b29a77bf4b  6560000000000000 2020-06-21 22:37:00   \n",
      "3   4  fe956c7e4a253c437c18918bf96f7b62  4010000000000000 2020-06-21 22:38:00   \n",
      "4   5  f6838c01f5d2262006e6b71d33ba7c6d  3560000000000000 2020-06-21 23:02:00   \n",
      "\n",
      "       amt                             merchant        category  is_fraud  \\\n",
      "0    24.84                 fraud_Hamill-D'Amore  health_fitness         1   \n",
      "1   780.52    fraud_Rodriguez, Yost and Jenkins        misc_net         1   \n",
      "2   620.33                     fraud_Nienow PLC   entertainment         1   \n",
      "3  1077.69  fraud_Heathcote, Yost and Kertzmann    shopping_net         1   \n",
      "4   842.65               fraud_Hermann and Sons    shopping_pos         1   \n",
      "\n",
      "             reason          created_at  \n",
      "0  Labeled as fraud 2025-07-21 11:07:03  \n",
      "1  Labeled as fraud 2025-07-21 11:07:03  \n",
      "2  Labeled as fraud 2025-07-21 11:07:03  \n",
      "3  Labeled as fraud 2025-07-21 11:07:03  \n",
      "4  Labeled as fraud 2025-07-21 11:07:03  \n"
     ]
    }
   ],
   "source": [
    "#STORED PROCEDURE CONNECTION\n",
    "import mysql.connector\n",
    "\n",
    "try:\n",
    "    # Step 1: Connect to MySQL\n",
    "    conn = mysql.connector.connect(\n",
    "        host=\"localhost\",        \n",
    "    user=\"root\",             \n",
    "    password=\"123456789\", \n",
    "    database=\"credit_card_fraud_detection\"  \n",
    "    )\n",
    "\n",
    "    cursor = conn.cursor()\n",
    "\n",
    "    # Step 2: Call the stored procedure\n",
    "    cursor.callproc('DetectSuspiciousFrauds')\n",
    "    conn.commit()\n",
    "    print(\"Stored procedure executed successfully.\")\n",
    "\n",
    "    # Step 3 (optional): Fetch and display inserted rows\n",
    "    cursor.execute(\"SELECT * FROM suspicious_fraud_log\")\n",
    "    results = cursor.fetchall()\n",
    "\n",
    "    for row in results:\n",
    "        print(row)\n",
    "\n",
    "except mysql.connector.Error as err:\n",
    "    print(\"MySQL Error:\", err)\n",
    "\n",
    "finally:\n",
    "    if conn.is_connected():\n",
    "        cursor.close()\n",
    "        conn.close()\n",
    " \n",
    "  \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8634ee5-7e0a-49cf-9307-a3482fd09b0f",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The script successfully connects to the MySQL database and executes the stored procedure                                  DetectSuspiciousFrauds. It then fetches and displays records from the suspicious_fraud_log table, indicating              that fraudulent or suspicious transactions have been identified and logged. This automated approach is useful             for monitoring fraud in real time and enhancing security analytics.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dd19d844-6c6a-477c-98d1-2332e24f3edf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   id                         trans_num            cc_num          trans_date  \\\n",
      "0   1  16bf2e46c54369a8eab2214649506425  3560000000000000 2020-06-21 22:06:00   \n",
      "1   2  ab4b379d2c0c9c667d46508d4e126d72  6560000000000000 2020-06-21 22:32:00   \n",
      "2   3  47a9987ae81d99f7832a54b29a77bf4b  6560000000000000 2020-06-21 22:37:00   \n",
      "3   4  fe956c7e4a253c437c18918bf96f7b62  4010000000000000 2020-06-21 22:38:00   \n",
      "4   5  f6838c01f5d2262006e6b71d33ba7c6d  3560000000000000 2020-06-21 23:02:00   \n",
      "\n",
      "       amt                             merchant        category  is_fraud  \\\n",
      "0    24.84                 fraud_Hamill-D'Amore  health_fitness         1   \n",
      "1   780.52    fraud_Rodriguez, Yost and Jenkins        misc_net         1   \n",
      "2   620.33                     fraud_Nienow PLC   entertainment         1   \n",
      "3  1077.69  fraud_Heathcote, Yost and Kertzmann    shopping_net         1   \n",
      "4   842.65               fraud_Hermann and Sons    shopping_pos         1   \n",
      "\n",
      "             reason          created_at  \n",
      "0  Labeled as fraud 2025-07-21 11:07:03  \n",
      "1  Labeled as fraud 2025-07-21 11:07:03  \n",
      "2  Labeled as fraud 2025-07-21 11:07:03  \n",
      "3  Labeled as fraud 2025-07-21 11:07:03  \n",
      "4  Labeled as fraud 2025-07-21 11:07:03  \n"
     ]
    }
   ],
   "source": [
    "#REPLACE WITH YOUR ACTUAL VALUES\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# Replace with your actual values\n",
    "username = 'root'             \n",
    "password = '123456789'  \n",
    "host = 'localhost'        \n",
    "database = \"credit_card_fraud_detection\"\n",
    "# Create SQLAlchemy engine\n",
    "engine = create_engine(f\"mysql+mysqlconnector://{username}:{password}@{host}/{database}\")\n",
    "\n",
    "# Use Pandas to read SQL\n",
    "df = pd.read_sql(\"SELECT * FROM suspicious_fraud_log\", con=engine)\n",
    "\n",
    "# Display the first few rows\n",
    "print(df.head())\n",
    "  \n",
    "        \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9df648bd-6454-4d09-9bca-cd975453fd10",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The script establishes a connection to the MySQL database and successfully retrieves data from the                        suspicious_fraud_log table using SQLAlchemy. The data is loaded into a Pandas DataFrame and previewed using               df.head(), allowing for further analysis or visualization in Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ddd1a260-a2ad-44c4-937b-a94f19335582",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Sno trans_date_trans_time        cc_num  \\\n",
      "0    0      21-06-2020 12:14  2.290000e+15   \n",
      "1    1      21-06-2020 12:14  3.570000e+15   \n",
      "2    2      21-06-2020 12:14  3.600000e+15   \n",
      "3    3      21-06-2020 12:15  3.590000e+15   \n",
      "4    4      21-06-2020 12:15  3.530000e+15   \n",
      "\n",
      "                               merchant        category    amt   first  \\\n",
      "0                 fraud_Kirlin and Sons   personal_care   2.86    Jeff   \n",
      "1                  fraud_Sporer-Keebler   personal_care  29.84  Joanne   \n",
      "2  fraud_Swaniawski, Nitzsche and Welch  health_fitness  41.28  Ashley   \n",
      "3                     fraud_Haley Group        misc_pos  60.05   Brian   \n",
      "4                 fraud_Johnston-Casper          travel   3.19  Nathan   \n",
      "\n",
      "       last gender                       street  ...      lat      long  \\\n",
      "0   Elliott      M            351 Darlene Green  ...  33.9659  -80.9355   \n",
      "1  Williams      F             3638 Marsh Union  ...  40.3207 -110.4360   \n",
      "2     Lopez      F         9333 Valentine Point  ...  40.6729  -73.5365   \n",
      "3  Williams      M  32941 Krystal Mill Apt. 552  ...  28.5697  -80.8191   \n",
      "4    Massey      M     5783 Evan Roads Apt. 465  ...  44.2529  -85.0170   \n",
      "\n",
      "   city_pop                     job         dob  \\\n",
      "0    333497     Mechanical engineer  19-03-1968   \n",
      "1       302  Sales professional, IT  17-01-1990   \n",
      "2     34496       Librarian, public  21-10-1970   \n",
      "3     54767            Set designer  25-07-1987   \n",
      "4      1126      Furniture designer  06-07-1955   \n",
      "\n",
      "                          trans_num   unix_time  merch_lat  merch_long  \\\n",
      "0  2da90c7d74bd46a0caf3777415b3ebd3  1371816865  33.986391  -81.200714   \n",
      "1  324cc204407e99f51b0d6ca0055005e7  1371816873  39.450498 -109.960431   \n",
      "2  c81755dbbbea9d5c77f094348a7579be  1371816893  40.495810  -74.196111   \n",
      "3  2159175b9efe66dc301f149d3d5abf8c  1371816915  28.812398  -80.883061   \n",
      "4  57ff021bd3f328f8738bb535c302a31b  1371816917  44.959148  -85.884734   \n",
      "\n",
      "   is_fraud  \n",
      "0         0  \n",
      "1         0  \n",
      "2         0  \n",
      "3         0  \n",
      "4         0  \n",
      "\n",
      "[5 rows x 23 columns]\n"
     ]
    }
   ],
   "source": [
    "#LOAD THE FULL DATASET\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# Connection setup\n",
    "username = 'root'\n",
    "password = '123456789'\n",
    "host = 'localhost'\n",
    "database = 'credit_card_fraud_detection'\n",
    "\n",
    "# Create the engine\n",
    "engine = create_engine(f\"mysql+mysqlconnector://{username}:{password}@{host}/{database}\")\n",
    "\n",
    "# Load the full dataset (original transactions)\n",
    "df = pd.read_sql(\"SELECT * FROM tratransaction\", con=engine)\n",
    "\n",
    "# Display the first few rows\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3596fdda-a1fb-4ca3-8899-aa34743f889f",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The script successfully connects to the MySQL database and loads data from the transaction table into a                   Pandas DataFrame. The df.head() function displays the first few rows of the dataset, allowing for an initial              inspection of the transaction records. This is useful to verify that the data has been correctly imported and             to begin exploratory data analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "62a3da96-f4f9-412f-afb4-be190374e91f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of transactions: 9000\n"
     ]
    }
   ],
   "source": [
    "# TOTAL NUMBER OF TRANSACTIONS\n",
    "total_transactions = df.shape[0]\n",
    "print(\"Total number of transactions:\", total_transactions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c30b866f-9816-48f8-b498-230b3fe06b88",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "This code calculates the total number of transactions in the dataset by accessing the number of rows using                df.shape[0]. It then prints the result, providing an overall count of all transactions stored in the                      DataFrame. This is useful for understanding the dataset size at a glance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dc04155f-55ff-4617-bf31-e97a643909e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_fraud\n",
      "Not Fraud    8978\n",
      "Fraud          22\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# COUNT OF FRAUDULENT VS. NON-FRAUDULENT TRANSACTIONS\n",
    "fraud_counts = df['is_fraud'].value_counts()\n",
    "print(\"Fraudulent vs. Non-Fraudulent Transactions:\\n\", fraud_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6bc86d7-4751-4d0a-aa0c-15607e3722a9",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">The output shows how many transactions are labeled as fraud (1) and how many are not (0).\n",
    ">This gives a clear idea of the class imbalance, which is important for model training and risk analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "00be8341-e550-400d-b8dc-706845d593b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraud Rate: 0.24%\n"
     ]
    }
   ],
   "source": [
    "# CALCULATE FRAUD RATE\n",
    "fraud_count = df['is_fraud'].sum()  # since fraud is marked as 1\n",
    "total_count = df.shape[0]\n",
    "fraud_rate = (fraud_count / total_count) * 100\n",
    "\n",
    "print(f\"Fraud Rate: {fraud_rate:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e102d90-e10e-4cf1-b0e8-1646fcf4afaf",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "Only 0.24% of the total transactions are marked as fraudulent. This indicates a highly imbalanced dataset,                where fraudulent transactions are extremely rare compared to non-fraudulent ones. This imbalance is common in             real-world fraud detection scenarios and must be carefully handled during model training "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "49a49baf-c7b8-4432-acb2-2757c33a606d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                mean  median\n",
      "is_fraud                    \n",
      "0          66.388277   45.29\n",
      "1         568.357727  739.63\n"
     ]
    }
   ],
   "source": [
    "# AVERAGE AND MEDIAN TRANSACTION AMOUNT FOR FRAUD VS. NON-FRAUD\n",
    "fraud_stats = df.groupby('is_fraud')['amt'].agg(['mean', 'median'])\n",
    "print(fraud_stats)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94dab2a6-872d-42e5-99c2-8e8f8b736fcf",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "Fraudulent transactions have a much higher average and median amount compared to non-fraudulent ones. This                suggests that fraudsters tend to target high-value transactions, making transaction amount a strong indicator             for potential fraud detection models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a97d9398-2985-429c-826a-0fda98c3c2e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "High-value threshold: $80.94\n",
      "high_value\n",
      "False    0.088889\n",
      "True     0.711111\n",
      "Name: is_fraud, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#DEFINE HIGH-VALUE TRANSACTIONS\n",
    "high_value_threshold = df['amt'].quantile(0.75)\n",
    "print(f\"High-value threshold: ${high_value_threshold:.2f}\")\n",
    "df['high_value'] = df['amt'] > high_value_threshold\n",
    "fraud_by_value = df.groupby('high_value')['is_fraud'].mean()*100\n",
    "print(fraud_by_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69ce1100-6c69-4254-8519-3bae6a6748ca",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "High-value transactions (above $80.94) are significantly more likely to be fraudulent, with over 71% fraud                rate, compared to only 8.9% for lower-value transactions. This suggests that transaction amount is a strong               indicator of fraud."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "c53b62aa-377a-414b-9b6c-ca76733abd28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    " #FRAUDULENT TRANSACTIONS BY HOUR OF THE DAY\n",
    "fraud_by_hour = df[df['is_fraud'] == 1]['hour'].value_counts().sort_index()\n",
    "fraud_by_hour.plot(kind='bar', figsize=(10, 5), title=\"Fraudulent Transactions by Hour\")\n",
    "plt.xlabel(\"Hour of Day\")\n",
    "plt.ylabel(\"Number of Fraudulent Transactions\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98e2ed34-f3e1-4e74-aff2-272cd0f3ef02",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">Fraudulent transactions peak at 11 PM (23rd hour) with 8 cases, the highest among all hours.\n",
    ">Other high-risk hours include:\n",
    "    >10 PM (22nd hour) with 5 cases\n",
    "    >1 AM and 3 AM, each with 3 cases\n",
    ">Very few fraud cases occur during the daytime or early evening.\n",
    ">The pattern suggests fraudsters tend to operate late at night or early morning, likely to avoid real-time detection.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "4bafd86d-e059-4607-963d-e002abdf7a25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 Merchants with Fraud Cases:\n",
      "merchant\n",
      "fraud_Rodriguez, Yost and Jenkins          2\n",
      "fraud_Hamill-D'Amore                       1\n",
      "fraud_Goldner, Kovacek and Abbott          1\n",
      "fraud_Haley, Batz and Auer                 1\n",
      "fraud_Shanahan-Lehner                      1\n",
      "fraud_Baumbach, Strosin and Nicolas        1\n",
      "fraud_Schumm PLC                           1\n",
      "fraud_Kuhn LLC                             1\n",
      "fraud_Skiles-Ankunding                     1\n",
      "fraud_Kerluke, Considine and Macejkovic    1\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Top 10 Categories with Fraud Cases:\n",
      "category\n",
      "shopping_net      6\n",
      "health_fitness    3\n",
      "misc_net          3\n",
      "shopping_pos      3\n",
      "grocery_pos       2\n",
      "entertainment     1\n",
      "misc_pos          1\n",
      "grocery_net       1\n",
      "personal_care     1\n",
      "home              1\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    " #TOP MERCHANTS AND CATEGORIES INVOLVED IN FRAUD\n",
    "print(\"Top 10 Merchants with Fraud Cases:\")\n",
    "print(df[df['is_fraud'] == 1]['merchant'].value_counts().head(10))\n",
    "\n",
    "print(\"\\nTop 10 Categories with Fraud Cases:\")\n",
    "print(df[df['is_fraud'] == 1]['category'].value_counts().head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0918be6-c5e7-40ee-8da3-058ffcf9ca42",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">Merchant Insight: The top merchants each have very few fraud cases individually (mostly 1), suggesting widespread fraud across various merchants rather than concentrated attacks.\n",
    ">Category Trend:\n",
    "      >shopping_net (online shopping) leads in fraud, which is expected due to the lower authentication barriers online.\n",
    "      >Categories like health_fitness, misc_net, and shopping_pos also show moderate fraud, indicating fraudsters target         both online and point-of-sale environments.\n",
    "      >Sectors such as entertainment, home, and personal_care have lower counts but may still be significant depending on        transaction volume."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "3bf9e59a-b02e-42ab-84c4-c9b0d4426ad4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraud Rate by Weekend Status:\n",
      " is_weekend\n",
      "False    0.001721\n",
      "True     0.004931\n",
      "Name: is_fraud, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#WEEKEND VS WEEKDAY FRAUD COMPARISON\n",
    "weekend_fraud_rate = df.groupby('is_weekend')['is_fraud'].mean()\n",
    "print(\"Fraud Rate by Weekend Status:\\n\", weekend_fraud_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a0c4a23-4955-4c23-b166-d3e9b23c3157",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">The fraud rate on weekends (0.49%) is significantly higher than on weekdays (0.17%).\n",
    ">This suggests that fraudulent transactions are more likely to happen during weekends.\n",
    ">Possible reasons:\n",
    "  >Reduced monitoring by fraud detection teams.\n",
    "  >Higher online activity for leisure/shopping.\n",
    "  >Fraudsters may exploit lower alertness in systems or consumers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "ac6b7f8e-06fc-4f18-a676-a9011279fc9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraud Rate by Gender:\n",
      " gender\n",
      "F    0.002202\n",
      "M    0.002747\n",
      "Name: is_fraud, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#FRAUD BY CUSTOMER GENDER\n",
    "fraud_by_gender = df.groupby('gender')['is_fraud'].mean()\n",
    "print(\"Fraud Rate by Gender:\\n\", fraud_by_gender)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e9b018f-d84e-4a93-ad08-b18c485848ce",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">Male customers (M) have a higher fraud rate (0.27%) than female customers (F) (0.22%).\n",
    ">This suggests that male customers are slightly more likely to be involved in fraudulent transactions.\n",
    ">While the difference is modest, it may point to underlying patterns in behavior, fraud targeting, or transaction types that warrant deeper analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "6f7f76b1-29bf-4511-9d60-4990d3b4d9c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 Jobs with Highest Fraud:\n",
      " job\n",
      "Librarian, public           9\n",
      "Herbalist                   8\n",
      "Public relations officer    3\n",
      "Cytogeneticist              2\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#TOP JOBS ASSOCIATED WITH FRAUD\n",
    "top_jobs = df[df['is_fraud'] == 1]['job'].value_counts().head(10)\n",
    "print(\"Top 10 Jobs with Highest Fraud:\\n\", top_jobs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3511daff-26ea-46bf-ac82-d06feaac1e8f",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">\"Librarian, public\" and \"Herbalist\" are the top job titles associated with fraudulent transactions.\n",
    ">This might indicate certain occupational clusters or lifestyle factors more vulnerable to fraud—or could simply be random due to small sample sizes.\n",
    ">Further analysis may be required to determine why these roles are at higher fraud risk (e.g., income patterns, transaction behavior, or location-based exposure)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "252287df-3b05-481b-9510-e6920cb4e988",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top States with Fraud Cases:\n",
      "state\n",
      "FL    9\n",
      "LA    8\n",
      "WI    3\n",
      "TX    2\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Top Cities with Fraud Cases:\n",
      "city\n",
      "Vero Beach        9\n",
      "Denham Springs    8\n",
      "Benton            3\n",
      "Notrees           2\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#TOP STATES AND CITIES REPORTING FRAUD\n",
    "print(\"Top States with Fraud Cases:\")\n",
    "print(df[df['is_fraud'] == 1]['state'].value_counts().head(10))\n",
    "\n",
    "print(\"\\nTop Cities with Fraud Cases:\")\n",
    "print(df[df['is_fraud'] == 1]['city'].value_counts().head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c63baae-2a02-4e47-9964-957575fd1840",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">Florida (FL) and Louisiana (LA) are the top two states with the highest number of fraud cases.\n",
    ">Vero Beach (FL) and Denham Springs (LA) alone account for a significant portion of fraudulent activity, indicating potential fraud hotspots.\n",
    ">These locations may require stricter monitoring, enhanced verification, or pattern analysis for fraud prevention."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "433e95cb-cf9d-4ceb-ae61-ccc397e27245",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#TEMPORAL TRENDS IN FRAUD CASES\n",
    "\n",
    "df['date'] = df['trans_date_trans_time'].dt.date\n",
    "df.groupby('date')['is_fraud'].sum().plot(figsize=(12, 5), title=\"Fraud Trends Over Time\")\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(\"Number of Fraud Cases\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f405c4e4-13ae-48f0-9629-da8039687d9d",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The spike on June 22 suggests a targeted or coordinated attempt at fraud. This could be due to a security                 lapse, promotional campaign exploitation, or high transaction volume on that day. The sudden drop the next                day may imply successful mitigation or that the activity was limited to a narrow window."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e5559eaa-95c3-4f4d-a174-f18c8955ceee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    " #CITY POPULATION VS FRAUD OCCURRENCE\n",
    "sns.violinplot(x='is_fraud', y='city_pop', data=df)\n",
    "plt.title(\"City Population vs Fraud (Violin Plot)\")\n",
    "plt.xlabel(\"Is Fraud\")\n",
    "plt.ylabel(\"City Population\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d3cd0dd-6bbe-4298-83e0-35e68389b719",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">Non-fraudulent transactions (is_fraud = 0):\n",
    "     >Happen across cities of all population sizes, including very large cities (up to ~3 million).\n",
    "     >The distribution is wider at the bottom, suggesting more transactions occur in smaller cities.\n",
    ">Fraudulent transactions (is_fraud = 1):\n",
    "     >Are mostly concentrated in cities with lower population sizes (less than ~500,000).\n",
    "     >Show a more compressed distribution, implying that fraud is more common in smaller cities than in large urban areas.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "c51e74a7-e6ca-44d4-a961-2bc394e54efe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#TOP TRANSACTION CATEGORIES INVOLVED IN FRAUD\n",
    "df[df['is_fraud'] == 1]['category'].value_counts().head(10).plot(kind='bar', title=\"Top Fraud Categories\")\n",
    "plt.xlabel(\"Category\")\n",
    "plt.ylabel(\"Number of Fraudulent Transactions\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c752caf-81a1-49e4-8894-7a0587eafd9d",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">shopping_net is the leading category with 6 fraud cases, indicating it's the most vulnerable.\n",
    ">Other notable categories with fraud include:\n",
    "     >athletic_fitness\n",
    "     >misc_net\n",
    "     >shopping_pos\n",
    "     >grocery_pos\n",
    ">Each of the remaining categories has 1–3 frauds, including entertainment, personal_care, and home."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "45116002-d381-4cae-83ea-95468442268a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#VISUAL COMPARISON OF FRAUD VS NON-FRAUD AMOUNTS\n",
    "sns.boxplot(x='is_fraud', y='amt', data=df)\n",
    "plt.title(\"Transaction Amount by Fraud Status\")\n",
    "plt.xlabel(\"Is Fraud\")\n",
    "plt.ylabel(\"Amount\")\n",
    "plt.show()\n",
    "\n",
    "sns.histplot(data=df, x='amt', hue='is_fraud', bins=50, kde=True)\n",
    "plt.title(\"Distribution of Transaction Amounts by Fraud Status\")\n",
    "plt.xlabel(\"Amount\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16647228-add6-43b4-a98b-91cdae120273",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">Fraudulent transactions usually have higher average values.\n",
    ">Non-fraudulent transactions are lower in amount but much more frequent.\n",
    ">Outlier detection and value-based flagging (e.g., amt > 500) may help in early fraud prediction.\n",
    ">These visual differences suggest that transaction amount is a key predictor for fraud.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "1e8ba6fb-5115-400c-bfb5-05d17c76c243",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_fraud     0  1\n",
      "region           \n",
      "EAST      2192  8\n",
      "NORTH     5792  3\n",
      "SOUTH      509  9\n",
      "WEST       485  2\n"
     ]
    }
   ],
   "source": [
    "#FRAUD DISTRIBUTION BY GEOGRAPHIC ZONE (NORTH/SOUTH/EAST/WEST)\n",
    "def region_classification(row):\n",
    "    if row['lat'] > 37:\n",
    "        return 'NORTH'\n",
    "    elif row['lat'] < 30:\n",
    "        return 'SOUTH'\n",
    "    elif row['long'] < -100:\n",
    "        return 'WEST'\n",
    "    else:\n",
    "        return 'EAST'\n",
    "\n",
    "df['region'] = df.apply(region_classification, axis=1)\n",
    "\n",
    "print(df.groupby(['region', 'is_fraud']).size().unstack())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d49dd96f-6db2-4b2a-80be-1ced91cdf144",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The southern region has the highest fraud rate at 1.74%, despite a smaller number of total transactions. this             suggests that south-based transactions may be riskier per capita. in contrast, the northern region has the                lowest fraud rate even though it has the most transactions overall.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3ab69d90-b7de-4859-81f0-54ea2a4c69bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#CITY POPULATION BY FRAUD STATUS (STRIP PLOT)\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.stripplot(data=df, x='is_fraud', y='city_pop', jitter=0.3, size=2, alpha=0.5)\n",
    "plt.title(\"City Population by Fraud Status (Strip Plot with Jitter)\")\n",
    "plt.xlabel(\"Fraud (0 = No, 1 = Yes)\")\n",
    "plt.ylabel(\"City Population\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9d63423-0425-4b14-b6d8-7a05fd37a312",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">Majority of transactions (both fraud and non-fraud) occur in cities with population less than ~500,000.\n",
    ">There is no clear concentration of fraud in either very large or very small cities — frauds appear distributed across all population ranges.\n",
    ">There are some outliers at the top (cities with ~2 to 3 million+ population), but those points are very sparse."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5a2f28e7-9b4f-4336-be58-1269b46dec00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "city_size\n",
      "Very Small    0.000805\n",
      "Small         0.005358\n",
      "Medium        0.011166\n",
      "Large         0.000000\n",
      "Very Large    0.000000\n",
      "Name: is_fraud, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#CATEGORIZE CITY SIZE AND COMPARE FRAUD RATE\n",
    "\n",
    "# Define bins for city population\n",
    "bins = [0, 10000, 100000, 500000, 1000000, df['city_pop'].max()]\n",
    "labels = ['Very Small', 'Small', 'Medium', 'Large', 'Very Large']\n",
    "df['city_size'] = pd.cut(df['city_pop'], bins=bins, labels=labels)\n",
    "\n",
    "# Fraud rate by city size\n",
    "fraud_by_city_size = df.groupby('city_size', observed=False)['is_fraud'].mean()\n",
    "print(fraud_by_city_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27128019-2f2f-4ce8-8bb1-4d842b7add8a",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "Fraud rates differ across city sizes. typically, very large and large cities tend to have higher fraud rates,             possibly due to increased anonymity and transaction density. in contrast, very small cities show lower fraud              rates, which may be attributed to closer community networks and lower economic activity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "81b2c8e5-facd-4c1a-91b4-e6770f185fd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#FRAUD RATE BY CITY SIZE\n",
    "fraud_by_city_size.plot(kind='bar', color='tomato')\n",
    "plt.title(\"Fraud Rate by City Size\")\n",
    "plt.xlabel(\"City Size\")\n",
    "plt.ylabel(\"Fraud Rate\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "120e2e41-5ab5-4f1c-a95e-be938671a9a7",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "Medium-sized cities have the highest fraud rate\n",
    "➤ Fraud is most frequent in medium-sized cities, indicating that these areas may be more susceptible to fraudulent activity due to a mix of population density and transaction volume.\n",
    "Small and Very Small cities show moderate fraud rates\n",
    "➤ Small cities have a noticeable fraud rate, but it's significantly lower than medium-sized cities. Very small cities have the lowest among these three.\n",
    "Large and Very Large cities have very low or negligible fraud rates\n",
    "➤ Contrary to expectations, larger cities exhibit lower fraud rates. This could be due to better fraud detection systems, higher regulation, or more secure payment infrastructures in urban areas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fc15005e-51b6-427d-b69f-492d7680d4d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_fraud          0  1\n",
      "category              \n",
      "entertainment    60  1\n",
      "food_dining      31  0\n",
      "gas_transport   371  0\n",
      "grocery_net     143  1\n",
      "grocery_pos     336  2\n",
      "health_fitness    0  3\n",
      "home              0  1\n",
      "misc_net        414  3\n",
      "misc_pos        130  1\n",
      "personal_care     0  1\n",
      "shopping_net    689  6\n",
      "shopping_pos    123  3\n"
     ]
    }
   ],
   "source": [
    "#FRAUD VS NON-FRAUD TRANSACTIONS BY CATEGORY (TABLE VIEW)\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "# Group by category and is_fraud, then count\n",
    "fraud_comparison = df.groupby(['category', 'is_fraud']).size().unstack(fill_value=0)\n",
    "print(fraud_comparison)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6436adeb-1dc3-49a6-b620-536b443465b7",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The number of fraudulent (is_fraud = 1) and non-fraudulent (is_fraud = 0) transactions across each category.              It helps identify which transaction types are more prone to fraud. For instance, if shopping_net or misc_net              shows significantly higher fraud counts, these categories may require tighter monitoring or fraud prevention              mechanisms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "719146d5-b862-4249-ae73-fe7bf7da0ec0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#FRAUD VS NON-FRAUD TRANSACTIONS BY CATEGORY\n",
    "fraud_comparison.plot(kind='bar', figsize=(10, 6), color=['skyblue', 'crimson'])\n",
    "\n",
    "plt.title('Fraud vs Non-Fraud Transactions by Category')\n",
    "plt.xlabel('Transaction Category')\n",
    "plt.ylabel('Number of Transactions')\n",
    "plt.xticks(rotation=45)\n",
    "plt.legend(['Non-Fraud (0)', 'Fraud (1)'])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27d5f868-9fe2-49e2-a5d2-a01589b322f7",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The bar chart illustrates the distribution of fraudulent and non-fraudulent transactions across various                   categories. Categories like shopping_net and misc_net show noticeably higher fraud counts compared to others.             This suggests that online-related categories are more susceptible to fraudulent behavior, emphasizing the                 need for focused fraud prevention strategies in these sectors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f56c4106-91b8-4b02-af5d-f4f2cfee7955",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The category with the most frauds is: shopping_net with 6 fraud cases.\n"
     ]
    }
   ],
   "source": [
    "# MOST FRAUD-PRONE CATEGORY\n",
    "fraud_only = df[df['is_fraud'] == 1]\n",
    "\n",
    "# Count frauds by category\n",
    "fraud_counts = fraud_only['category'].value_counts()\n",
    "\n",
    "# Display the category with the most frauds\n",
    "most_fraud_category = fraud_counts.idxmax()\n",
    "fraud_count = fraud_counts.max()\n",
    "\n",
    "print(f\"The category with the most frauds is: {most_fraud_category} with {fraud_count} fraud cases.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7b215ae-5144-41de-9b25-ca39ebc9a918",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "This indicates that fraudulent activities are more concentrated in online shopping, highlighting the need for             enhanced monitoring, stricter authentication, and fraud detection mechanisms in e-commerce platforms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "87b260d0-5621-46fd-a710-2240e9e60515",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average amount of fraud transactions: ₹568.36\n"
     ]
    }
   ],
   "source": [
    "#AVERAGE AMOUNT OF FRAUD TRANSACTIONS\n",
    "avg_fraud_amt = df[df['is_fraud'] == 1]['amt'].mean()\n",
    "print(f\"Average amount of fraud transactions: ₹{avg_fraud_amt:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f30db8a-2415-4c93-a671-bba77f73b8ef",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "The average amount of fraudulent transactions is ₹568.36, which is significantly higher than that of non-                 fraudulent transactions. This indicates that fraudsters are more likely to target high-value transactions,                emphasizing the need for enhanced scrutiny and detection measures on such transactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "dea69ba1-016d-46df-bb44-66627c45d63a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#FRAUD VS NON-FRAUD TRANSACTIONS BY HOUR OF DAY\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Group and plot\n",
    "df.groupby(['hour', 'is_fraud']).size().unstack().plot(\n",
    "    kind='bar',\n",
    "    stacked=True,\n",
    "    figsize=(12, 6),\n",
    "    color=['skyblue', 'crimson']\n",
    ")\n",
    "\n",
    "# Titles and labels\n",
    "plt.title('Fraud vs Non-Fraud Transactions by Hour of Day')\n",
    "plt.xlabel('Hour of Day')\n",
    "plt.ylabel('Number of Transactions')\n",
    "plt.legend(['Non-Fraud (0)', 'Fraud (1)'], title='is_fraud')\n",
    "plt.xticks(rotation=0)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd491dbb-d470-4871-9d2b-ec1ea74d1c13",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    ">non-fraud transactions are consistently high during business hours (8 AM to 6 PM), peaking around noon.\n",
    ">fraudulent transactions are relatively more frequent during early morning hours (12 AM – 6 AM) compared to non-fraud.\n",
    ">the fraud rate is proportionally higher at night, even though total volume is lower — indicating possible targeting of less monitored hours.\n",
    ">this pattern can guide real-time monitoring systems to prioritize nighttime alerts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b25686d5-16c2-4a12-b3e2-75b1174a4c43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#FRAUD VS NON-FRAUD TRANSACTIONS BY DAY OF WEEK\n",
    "day_group = df.groupby(['day_of_week', 'is_fraud']).size().unstack().reindex(\n",
    "    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n",
    "\n",
    "# Plot\n",
    "day_group.plot(kind='line', marker='o', figsize=(8, 4), color=['skyblue', 'crimson'])\n",
    "\n",
    "plt.title('Fraud vs Non-Fraud Transactions by Day of Week')\n",
    "plt.xlabel('Day of Week')\n",
    "plt.ylabel('Number of Transactions')\n",
    "plt.legend(['Non-Fraud (0)', 'Fraud (1)'], title='is_fraud')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "288e3864-ebb2-419b-bc44-73cf9ea84f7e",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "Most transactions occur on Monday, with a noticeable drop on the following days.\n",
    "Fraudulent transactions are only visible on Monday, Tuesday, and Sunday.\n",
    "Wednesday to Saturday show zero fraud cases — possibly indicating lower transaction volume or less fraud activity on those days.\n",
    "Non-fraudulent transactions consistently outnumber fraudulent ones on all days.\n",
    "Monday has the highest fraud and non-fraud activity, suggesting it is a key day for monitoring potential fraud."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "39c3943d-be1b-44cc-8aee-9ccec3050496",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TRANSACTION VOLUME BY DAY OF WEEK AND HOUR \n",
    "import seaborn as sns\n",
    "\n",
    "heat_data = df.groupby([df['day_of_week'], df['hour']]).size().unstack().reindex(\n",
    "    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.heatmap(heat_data, cmap=\"YlGnBu\", linewidths=0.5)\n",
    "plt.title('Transaction Volume by Day of Week and Hour')\n",
    "plt.xlabel('Hour of Day')\n",
    "plt.ylabel('Day of Week')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94df3ebd-ad65-42fb-bff0-300fb2b2cd89",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "High Transaction Volume on Monday and Tuesday:\n",
    "Monday shows the highest concentration of transactions between 12 PM and 10 PM, peaking especially between 1 PM and 4 PM.\n",
    "Tuesday also has significant transaction activity, primarily during the same afternoon and evening hours.\n",
    "Low or No Data for Wednesday to Saturday:\n",
    "No visible transactions from Wednesday to Saturday, suggesting either:\n",
    "Missing or unrecorded data for these days.\n",
    "Or transactions did not occur during the observed hours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "285ea2e9-99c8-4d5a-8004-16fb79569ae2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated Loss Prevented: $ 12503.87\n"
     ]
    }
   ],
   "source": [
    "#THE ESTIMATED LOSS PREVENTED BY DETECTING FRAUD\n",
    "estimated_loss_prevented = df[df['is_fraud'] == 1]['amt'].sum()\n",
    "print(\"Estimated Loss Prevented: $\", estimated_loss_prevented)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "298180fd-56a4-4150-af19-6679c63acf1e",
   "metadata": {},
   "source": [
    "OBSERVATION:\n",
    "This indicates that the fraud detection mechanism is effective in identifying high-risk transactions and                  could help significantly reduce financial loss if implemented in real-time. The value also highlights the                 monetary impact of fraud and the importance of continuous monitoring and improvement of fraud detection                   systems."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

